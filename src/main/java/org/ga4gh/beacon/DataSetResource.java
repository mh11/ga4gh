/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.beacon;  
@SuppressWarnings("all")
/** DataSetResource */
@org.apache.avro.specific.AvroGenerated
public class DataSetResource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataSetResource\",\"namespace\":\"org.ga4gh.beacon\",\"doc\":\"DataSetResource\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Dataset name\"},{\"name\":\"reference\",\"type\":\"string\",\"doc\":\"Reference genome\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Dataset description\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DataSizeResource\",\"doc\":\"DataSetSizeResource\",\"fields\":[{\"name\":\"variants\",\"type\":\"int\",\"doc\":\"Total number of variant positions in the data set\"},{\"name\":\"samples\",\"type\":\"int\",\"doc\":\"Total number of samples in the data set\"}]}],\"doc\":\"Dimensions of the data set. Should be provided if the beacon reports allele frequencies.\",\"default\":null},{\"name\":\"multiple\",\"type\":\"boolean\",\"doc\":\"True if this dataset contains data from 2 or more other datasets.\"},{\"name\":\"datasets\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"List of names of each of the datasets that comprises this aggregated dataset. Should be provided if ‘multiple’ is true.\",\"default\":[]},{\"name\":\"data_use\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataUseResource\",\"doc\":\"DataUseResource\",\"fields\":[{\"name\":\"category\",\"type\":\"string\",\"doc\":\"Data Use category.\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Description of Data Use category.\",\"default\":null},{\"name\":\"requirements\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataUseRequirementResource\",\"doc\":\"DataUseRequirementResource\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Data Use requirement\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Description of Data Use requirement.\",\"default\":null}]}},\"doc\":\"Data Use requirements.\",\"default\":[]}]}},\"doc\":\"Data use limitations, specified as a set of DataUseResource.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Dataset name */
   private java.lang.CharSequence id;
  /** Reference genome */
   private java.lang.CharSequence reference;
  /** Dataset description */
   private java.lang.CharSequence description;
  /** Dimensions of the data set. Should be provided if the beacon reports allele frequencies. */
   private org.ga4gh.beacon.DataSizeResource size;
  /** True if this dataset contains data from 2 or more other datasets. */
   private boolean multiple;
  /** List of names of each of the datasets that comprises this aggregated dataset. Should be provided if ‘multiple’ is true. */
   private java.util.List<java.lang.CharSequence> datasets;
  /** Data use limitations, specified as a set of DataUseResource. */
   private java.util.List<org.ga4gh.beacon.DataUseResource> data_use;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DataSetResource() {}

  /**
   * All-args constructor.
   */
  public DataSetResource(java.lang.CharSequence id, java.lang.CharSequence reference, java.lang.CharSequence description, org.ga4gh.beacon.DataSizeResource size, java.lang.Boolean multiple, java.util.List<java.lang.CharSequence> datasets, java.util.List<org.ga4gh.beacon.DataUseResource> data_use) {
    this.id = id;
    this.reference = reference;
    this.description = description;
    this.size = size;
    this.multiple = multiple;
    this.datasets = datasets;
    this.data_use = data_use;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return reference;
    case 2: return description;
    case 3: return size;
    case 4: return multiple;
    case 5: return datasets;
    case 6: return data_use;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: reference = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: size = (org.ga4gh.beacon.DataSizeResource)value$; break;
    case 4: multiple = (java.lang.Boolean)value$; break;
    case 5: datasets = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: data_use = (java.util.List<org.ga4gh.beacon.DataUseResource>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * Dataset name   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Dataset name   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'reference' field.
   * Reference genome   */
  public java.lang.CharSequence getReference() {
    return reference;
  }

  /**
   * Sets the value of the 'reference' field.
   * Reference genome   * @param value the value to set.
   */
  public void setReference(java.lang.CharSequence value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'description' field.
   * Dataset description   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Dataset description   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'size' field.
   * Dimensions of the data set. Should be provided if the beacon reports allele frequencies.   */
  public org.ga4gh.beacon.DataSizeResource getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * Dimensions of the data set. Should be provided if the beacon reports allele frequencies.   * @param value the value to set.
   */
  public void setSize(org.ga4gh.beacon.DataSizeResource value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'multiple' field.
   * True if this dataset contains data from 2 or more other datasets.   */
  public java.lang.Boolean getMultiple() {
    return multiple;
  }

  /**
   * Sets the value of the 'multiple' field.
   * True if this dataset contains data from 2 or more other datasets.   * @param value the value to set.
   */
  public void setMultiple(java.lang.Boolean value) {
    this.multiple = value;
  }

  /**
   * Gets the value of the 'datasets' field.
   * List of names of each of the datasets that comprises this aggregated dataset. Should be provided if ‘multiple’ is true.   */
  public java.util.List<java.lang.CharSequence> getDatasets() {
    return datasets;
  }

  /**
   * Sets the value of the 'datasets' field.
   * List of names of each of the datasets that comprises this aggregated dataset. Should be provided if ‘multiple’ is true.   * @param value the value to set.
   */
  public void setDatasets(java.util.List<java.lang.CharSequence> value) {
    this.datasets = value;
  }

  /**
   * Gets the value of the 'data_use' field.
   * Data use limitations, specified as a set of DataUseResource.   */
  public java.util.List<org.ga4gh.beacon.DataUseResource> getDataUse() {
    return data_use;
  }

  /**
   * Sets the value of the 'data_use' field.
   * Data use limitations, specified as a set of DataUseResource.   * @param value the value to set.
   */
  public void setDataUse(java.util.List<org.ga4gh.beacon.DataUseResource> value) {
    this.data_use = value;
  }

  /** Creates a new DataSetResource RecordBuilder */
  public static org.ga4gh.beacon.DataSetResource.Builder newBuilder() {
    return new org.ga4gh.beacon.DataSetResource.Builder();
  }
  
  /** Creates a new DataSetResource RecordBuilder by copying an existing Builder */
  public static org.ga4gh.beacon.DataSetResource.Builder newBuilder(org.ga4gh.beacon.DataSetResource.Builder other) {
    return new org.ga4gh.beacon.DataSetResource.Builder(other);
  }
  
  /** Creates a new DataSetResource RecordBuilder by copying an existing DataSetResource instance */
  public static org.ga4gh.beacon.DataSetResource.Builder newBuilder(org.ga4gh.beacon.DataSetResource other) {
    return new org.ga4gh.beacon.DataSetResource.Builder(other);
  }
  
  /**
   * RecordBuilder for DataSetResource instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataSetResource>
    implements org.apache.avro.data.RecordBuilder<DataSetResource> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence reference;
    private java.lang.CharSequence description;
    private org.ga4gh.beacon.DataSizeResource size;
    private boolean multiple;
    private java.util.List<java.lang.CharSequence> datasets;
    private java.util.List<org.ga4gh.beacon.DataUseResource> data_use;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.beacon.DataSetResource.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.beacon.DataSetResource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reference)) {
        this.reference = data().deepCopy(fields()[1].schema(), other.reference);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.multiple)) {
        this.multiple = data().deepCopy(fields()[4].schema(), other.multiple);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.datasets)) {
        this.datasets = data().deepCopy(fields()[5].schema(), other.datasets);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.data_use)) {
        this.data_use = data().deepCopy(fields()[6].schema(), other.data_use);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DataSetResource instance */
    private Builder(org.ga4gh.beacon.DataSetResource other) {
            super(org.ga4gh.beacon.DataSetResource.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reference)) {
        this.reference = data().deepCopy(fields()[1].schema(), other.reference);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.multiple)) {
        this.multiple = data().deepCopy(fields()[4].schema(), other.multiple);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.datasets)) {
        this.datasets = data().deepCopy(fields()[5].schema(), other.datasets);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.data_use)) {
        this.data_use = data().deepCopy(fields()[6].schema(), other.data_use);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.beacon.DataSetResource.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'reference' field */
    public java.lang.CharSequence getReference() {
      return reference;
    }
    
    /** Sets the value of the 'reference' field */
    public org.ga4gh.beacon.DataSetResource.Builder setReference(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.reference = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'reference' field has been set */
    public boolean hasReference() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'reference' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearReference() {
      reference = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ga4gh.beacon.DataSetResource.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public org.ga4gh.beacon.DataSizeResource getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public org.ga4gh.beacon.DataSetResource.Builder setSize(org.ga4gh.beacon.DataSizeResource value) {
      validate(fields()[3], value);
      this.size = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'size' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearSize() {
      size = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'multiple' field */
    public java.lang.Boolean getMultiple() {
      return multiple;
    }
    
    /** Sets the value of the 'multiple' field */
    public org.ga4gh.beacon.DataSetResource.Builder setMultiple(boolean value) {
      validate(fields()[4], value);
      this.multiple = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'multiple' field has been set */
    public boolean hasMultiple() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'multiple' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearMultiple() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'datasets' field */
    public java.util.List<java.lang.CharSequence> getDatasets() {
      return datasets;
    }
    
    /** Sets the value of the 'datasets' field */
    public org.ga4gh.beacon.DataSetResource.Builder setDatasets(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.datasets = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'datasets' field has been set */
    public boolean hasDatasets() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'datasets' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearDatasets() {
      datasets = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'data_use' field */
    public java.util.List<org.ga4gh.beacon.DataUseResource> getDataUse() {
      return data_use;
    }
    
    /** Sets the value of the 'data_use' field */
    public org.ga4gh.beacon.DataSetResource.Builder setDataUse(java.util.List<org.ga4gh.beacon.DataUseResource> value) {
      validate(fields()[6], value);
      this.data_use = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'data_use' field has been set */
    public boolean hasDataUse() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'data_use' field */
    public org.ga4gh.beacon.DataSetResource.Builder clearDataUse() {
      data_use = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DataSetResource build() {
      try {
        DataSetResource record = new DataSetResource();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.reference = fieldSetFlags()[1] ? this.reference : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.size = fieldSetFlags()[3] ? this.size : (org.ga4gh.beacon.DataSizeResource) defaultValue(fields()[3]);
        record.multiple = fieldSetFlags()[4] ? this.multiple : (java.lang.Boolean) defaultValue(fields()[4]);
        record.datasets = fieldSetFlags()[5] ? this.datasets : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.data_use = fieldSetFlags()[6] ? this.data_use : (java.util.List<org.ga4gh.beacon.DataUseResource>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
