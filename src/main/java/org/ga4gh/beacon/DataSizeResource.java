/*
 * Copyright 2015 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.beacon;  
@SuppressWarnings("all")
/** DataSetSizeResource */
@org.apache.avro.specific.AvroGenerated
public class DataSizeResource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataSizeResource\",\"namespace\":\"org.ga4gh.beacon\",\"doc\":\"DataSetSizeResource\",\"fields\":[{\"name\":\"variants\",\"type\":\"int\",\"doc\":\"Total number of variant positions in the data set\"},{\"name\":\"samples\",\"type\":\"int\",\"doc\":\"Total number of samples in the data set\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Total number of variant positions in the data set */
   private int variants;
  /** Total number of samples in the data set */
   private int samples;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DataSizeResource() {}

  /**
   * All-args constructor.
   */
  public DataSizeResource(java.lang.Integer variants, java.lang.Integer samples) {
    this.variants = variants;
    this.samples = samples;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variants;
    case 1: return samples;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variants = (java.lang.Integer)value$; break;
    case 1: samples = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variants' field.
   * Total number of variant positions in the data set   */
  public java.lang.Integer getVariants() {
    return variants;
  }

  /**
   * Sets the value of the 'variants' field.
   * Total number of variant positions in the data set   * @param value the value to set.
   */
  public void setVariants(java.lang.Integer value) {
    this.variants = value;
  }

  /**
   * Gets the value of the 'samples' field.
   * Total number of samples in the data set   */
  public java.lang.Integer getSamples() {
    return samples;
  }

  /**
   * Sets the value of the 'samples' field.
   * Total number of samples in the data set   * @param value the value to set.
   */
  public void setSamples(java.lang.Integer value) {
    this.samples = value;
  }

  /** Creates a new DataSizeResource RecordBuilder */
  public static org.ga4gh.beacon.DataSizeResource.Builder newBuilder() {
    return new org.ga4gh.beacon.DataSizeResource.Builder();
  }
  
  /** Creates a new DataSizeResource RecordBuilder by copying an existing Builder */
  public static org.ga4gh.beacon.DataSizeResource.Builder newBuilder(org.ga4gh.beacon.DataSizeResource.Builder other) {
    return new org.ga4gh.beacon.DataSizeResource.Builder(other);
  }
  
  /** Creates a new DataSizeResource RecordBuilder by copying an existing DataSizeResource instance */
  public static org.ga4gh.beacon.DataSizeResource.Builder newBuilder(org.ga4gh.beacon.DataSizeResource other) {
    return new org.ga4gh.beacon.DataSizeResource.Builder(other);
  }
  
  /**
   * RecordBuilder for DataSizeResource instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataSizeResource>
    implements org.apache.avro.data.RecordBuilder<DataSizeResource> {

    private int variants;
    private int samples;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.beacon.DataSizeResource.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.beacon.DataSizeResource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variants)) {
        this.variants = data().deepCopy(fields()[0].schema(), other.variants);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.samples)) {
        this.samples = data().deepCopy(fields()[1].schema(), other.samples);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DataSizeResource instance */
    private Builder(org.ga4gh.beacon.DataSizeResource other) {
            super(org.ga4gh.beacon.DataSizeResource.SCHEMA$);
      if (isValidValue(fields()[0], other.variants)) {
        this.variants = data().deepCopy(fields()[0].schema(), other.variants);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.samples)) {
        this.samples = data().deepCopy(fields()[1].schema(), other.samples);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'variants' field */
    public java.lang.Integer getVariants() {
      return variants;
    }
    
    /** Sets the value of the 'variants' field */
    public org.ga4gh.beacon.DataSizeResource.Builder setVariants(int value) {
      validate(fields()[0], value);
      this.variants = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variants' field has been set */
    public boolean hasVariants() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variants' field */
    public org.ga4gh.beacon.DataSizeResource.Builder clearVariants() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'samples' field */
    public java.lang.Integer getSamples() {
      return samples;
    }
    
    /** Sets the value of the 'samples' field */
    public org.ga4gh.beacon.DataSizeResource.Builder setSamples(int value) {
      validate(fields()[1], value);
      this.samples = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'samples' field has been set */
    public boolean hasSamples() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'samples' field */
    public org.ga4gh.beacon.DataSizeResource.Builder clearSamples() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DataSizeResource build() {
      try {
        DataSizeResource record = new DataSizeResource();
        record.variants = fieldSetFlags()[0] ? this.variants : (java.lang.Integer) defaultValue(fields()[0]);
        record.samples = fieldSetFlags()[1] ? this.samples : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
