/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.beacon;  
@SuppressWarnings("all")
/** A request for information about a specific site */
@org.apache.avro.specific.AvroGenerated
public class QueryResource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QueryResource\",\"namespace\":\"org.ga4gh.beacon\",\"doc\":\"A request for information about a specific site\",\"fields\":[{\"name\":\"allele\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Allele string. Use I<seq> for insertions and Dn for deletions, \\n      where <seq> is the nucleotide sequence inserted after position \\n      and n is a number of nucleotides deleted from the reference \\n      starting at position.\"},{\"name\":\"chromosome\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The chromosome of the request\"},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"0-based allele locus\"},{\"name\":\"reference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The version of the reference\"},{\"name\":\"dataset\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the targeted population\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Allele string. Use I<seq> for insertions and Dn for deletions, 
      where <seq> is the nucleotide sequence inserted after position 
      and n is a number of nucleotides deleted from the reference 
      starting at position. */
   private java.lang.String allele;
  /** The chromosome of the request */
   private java.lang.String chromosome;
  /** 0-based allele locus */
   private long position;
  /** The version of the reference */
   private java.lang.String reference;
  /** The name of the targeted population */
   private java.lang.String dataset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public QueryResource() {}

  /**
   * All-args constructor.
   */
  public QueryResource(java.lang.String allele, java.lang.String chromosome, java.lang.Long position, java.lang.String reference, java.lang.String dataset) {
    this.allele = allele;
    this.chromosome = chromosome;
    this.position = position;
    this.reference = reference;
    this.dataset = dataset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return allele;
    case 1: return chromosome;
    case 2: return position;
    case 3: return reference;
    case 4: return dataset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: allele = (java.lang.String)value$; break;
    case 1: chromosome = (java.lang.String)value$; break;
    case 2: position = (java.lang.Long)value$; break;
    case 3: reference = (java.lang.String)value$; break;
    case 4: dataset = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'allele' field.
   * Allele string. Use I<seq> for insertions and Dn for deletions, 
      where <seq> is the nucleotide sequence inserted after position 
      and n is a number of nucleotides deleted from the reference 
      starting at position.   */
  public java.lang.String getAllele() {
    return allele;
  }

  /**
   * Sets the value of the 'allele' field.
   * Allele string. Use I<seq> for insertions and Dn for deletions, 
      where <seq> is the nucleotide sequence inserted after position 
      and n is a number of nucleotides deleted from the reference 
      starting at position.   * @param value the value to set.
   */
  public void setAllele(java.lang.String value) {
    this.allele = value;
  }

  /**
   * Gets the value of the 'chromosome' field.
   * The chromosome of the request   */
  public java.lang.String getChromosome() {
    return chromosome;
  }

  /**
   * Sets the value of the 'chromosome' field.
   * The chromosome of the request   * @param value the value to set.
   */
  public void setChromosome(java.lang.String value) {
    this.chromosome = value;
  }

  /**
   * Gets the value of the 'position' field.
   * 0-based allele locus   */
  public java.lang.Long getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * 0-based allele locus   * @param value the value to set.
   */
  public void setPosition(java.lang.Long value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'reference' field.
   * The version of the reference   */
  public java.lang.String getReference() {
    return reference;
  }

  /**
   * Sets the value of the 'reference' field.
   * The version of the reference   * @param value the value to set.
   */
  public void setReference(java.lang.String value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'dataset' field.
   * The name of the targeted population   */
  public java.lang.String getDataset() {
    return dataset;
  }

  /**
   * Sets the value of the 'dataset' field.
   * The name of the targeted population   * @param value the value to set.
   */
  public void setDataset(java.lang.String value) {
    this.dataset = value;
  }

  /** Creates a new QueryResource RecordBuilder */
  public static org.ga4gh.beacon.QueryResource.Builder newBuilder() {
    return new org.ga4gh.beacon.QueryResource.Builder();
  }
  
  /** Creates a new QueryResource RecordBuilder by copying an existing Builder */
  public static org.ga4gh.beacon.QueryResource.Builder newBuilder(org.ga4gh.beacon.QueryResource.Builder other) {
    return new org.ga4gh.beacon.QueryResource.Builder(other);
  }
  
  /** Creates a new QueryResource RecordBuilder by copying an existing QueryResource instance */
  public static org.ga4gh.beacon.QueryResource.Builder newBuilder(org.ga4gh.beacon.QueryResource other) {
    return new org.ga4gh.beacon.QueryResource.Builder(other);
  }
  
  /**
   * RecordBuilder for QueryResource instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QueryResource>
    implements org.apache.avro.data.RecordBuilder<QueryResource> {

    private java.lang.String allele;
    private java.lang.String chromosome;
    private long position;
    private java.lang.String reference;
    private java.lang.String dataset;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.beacon.QueryResource.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.beacon.QueryResource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.allele)) {
        this.allele = data().deepCopy(fields()[0].schema(), other.allele);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[1].schema(), other.chromosome);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.position)) {
        this.position = data().deepCopy(fields()[2].schema(), other.position);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reference)) {
        this.reference = data().deepCopy(fields()[3].schema(), other.reference);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dataset)) {
        this.dataset = data().deepCopy(fields()[4].schema(), other.dataset);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing QueryResource instance */
    private Builder(org.ga4gh.beacon.QueryResource other) {
            super(org.ga4gh.beacon.QueryResource.SCHEMA$);
      if (isValidValue(fields()[0], other.allele)) {
        this.allele = data().deepCopy(fields()[0].schema(), other.allele);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[1].schema(), other.chromosome);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.position)) {
        this.position = data().deepCopy(fields()[2].schema(), other.position);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reference)) {
        this.reference = data().deepCopy(fields()[3].schema(), other.reference);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dataset)) {
        this.dataset = data().deepCopy(fields()[4].schema(), other.dataset);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'allele' field */
    public java.lang.String getAllele() {
      return allele;
    }
    
    /** Sets the value of the 'allele' field */
    public org.ga4gh.beacon.QueryResource.Builder setAllele(java.lang.String value) {
      validate(fields()[0], value);
      this.allele = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'allele' field has been set */
    public boolean hasAllele() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'allele' field */
    public org.ga4gh.beacon.QueryResource.Builder clearAllele() {
      allele = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'chromosome' field */
    public java.lang.String getChromosome() {
      return chromosome;
    }
    
    /** Sets the value of the 'chromosome' field */
    public org.ga4gh.beacon.QueryResource.Builder setChromosome(java.lang.String value) {
      validate(fields()[1], value);
      this.chromosome = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'chromosome' field has been set */
    public boolean hasChromosome() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'chromosome' field */
    public org.ga4gh.beacon.QueryResource.Builder clearChromosome() {
      chromosome = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'position' field */
    public java.lang.Long getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public org.ga4gh.beacon.QueryResource.Builder setPosition(long value) {
      validate(fields()[2], value);
      this.position = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'position' field */
    public org.ga4gh.beacon.QueryResource.Builder clearPosition() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'reference' field */
    public java.lang.String getReference() {
      return reference;
    }
    
    /** Sets the value of the 'reference' field */
    public org.ga4gh.beacon.QueryResource.Builder setReference(java.lang.String value) {
      validate(fields()[3], value);
      this.reference = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'reference' field has been set */
    public boolean hasReference() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'reference' field */
    public org.ga4gh.beacon.QueryResource.Builder clearReference() {
      reference = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'dataset' field */
    public java.lang.String getDataset() {
      return dataset;
    }
    
    /** Sets the value of the 'dataset' field */
    public org.ga4gh.beacon.QueryResource.Builder setDataset(java.lang.String value) {
      validate(fields()[4], value);
      this.dataset = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'dataset' field has been set */
    public boolean hasDataset() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'dataset' field */
    public org.ga4gh.beacon.QueryResource.Builder clearDataset() {
      dataset = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public QueryResource build() {
      try {
        QueryResource record = new QueryResource();
        record.allele = fieldSetFlags()[0] ? this.allele : (java.lang.String) defaultValue(fields()[0]);
        record.chromosome = fieldSetFlags()[1] ? this.chromosome : (java.lang.String) defaultValue(fields()[1]);
        record.position = fieldSetFlags()[2] ? this.position : (java.lang.Long) defaultValue(fields()[2]);
        record.reference = fieldSetFlags()[3] ? this.reference : (java.lang.String) defaultValue(fields()[3]);
        record.dataset = fieldSetFlags()[4] ? this.dataset : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
