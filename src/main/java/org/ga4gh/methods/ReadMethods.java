/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public interface ReadMethods {
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"ReadMethods\",\"namespace\":\"org.ga4gh.methods\",\"types\":[{\"type\":\"enum\",\"name\":\"Strand\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"Indicates the DNA strand associate for some data item.\\n* `NEG_STRAND`: The negative (-) strand.\\n* `POS_STRAND`:  The postive (+) strand.\",\"symbols\":[\"NEG_STRAND\",\"POS_STRAND\"]},{\"type\":\"record\",\"name\":\"Position\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `Position` is an unoriented base in some `Reference`. A `Position` is\\nrepresented by a `Reference` name, and a base number on that `Reference`\\n(0-based).\",\"fields\":[{\"name\":\"referenceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the `Reference` on which the `Position` is located.\"},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"The 0-based offset from the start of the forward strand for that `Reference`.\\n  Genomic positions are non-negative integers less than `Reference` length.\"},{\"name\":\"strand\",\"type\":\"Strand\",\"doc\":\"Strand the position is associated with.\"}]},{\"type\":\"record\",\"name\":\"ExternalIdentifier\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"Identifier from a public database\",\"fields\":[{\"name\":\"database\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The source of the identifier.\\n  (e.g. `Ensembl`)\"},{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID defined by the external database.\\n  (e.g. `ENST00000000000`)\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The version of the object or the database\\n  (e.g. `78`)\"}]},{\"type\":\"enum\",\"name\":\"CigarOperation\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An enum for the different types of CIGAR alignment operations that exist.\\nUsed wherever CIGAR alignments are used. The different enumerated values\\nhave the following usage:\\n\\n* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be\\n  aligned to the reference without evidence of an INDEL. Unlike the\\n  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`\\n  operator does not indicate whether the reference and read sequences are an\\n  exact match. This operator is equivalent to SAM's `M`.\\n* `INSERT`: The insert operator indicates that the read contains evidence of\\n  bases being inserted into the reference. This operator is equivalent to\\n  SAM's `I`.\\n* `DELETE`: The delete operator indicates that the read contains evidence of\\n  bases being deleted from the reference. This operator is equivalent to\\n  SAM's `D`.\\n* `SKIP`: The skip operator indicates that this read skips a long segment of\\n  the reference, but the bases have not been deleted. This operator is\\n  commonly used when working with RNA-seq data, where reads may skip long\\n  segments of the reference between exons. This operator is equivalent to\\n  SAM's 'N'.\\n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end\\n  of a read have not been considered during alignment. This may occur if the\\n  majority of a read maps, except for low quality bases at the start/end of\\n  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped\\n  will still be stored in the read.\\n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of\\n  a read have been omitted from this alignment. This may occur if this linear\\n  alignment is part of a chimeric alignment, or if the read has been trimmed\\n  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This\\n  operator is equivalent to SAM's 'H'.\\n* `PAD`: The pad operator indicates that there is padding in an alignment.\\n  This operator is equivalent to SAM's 'P'.\\n* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned\\n  sequence exactly matches the reference (e.g., all bases are equal to the\\n  reference bases). This operator is equivalent to SAM's '='.\\n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the\\n  aligned sequence is an alignment match to the reference, but a sequence\\n  mismatch (e.g., the bases are not equal to the reference). This can\\n  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.\",\"symbols\":[\"ALIGNMENT_MATCH\",\"INSERT\",\"DELETE\",\"SKIP\",\"CLIP_SOFT\",\"CLIP_HARD\",\"PAD\",\"SEQUENCE_MATCH\",\"SEQUENCE_MISMATCH\"]},{\"type\":\"record\",\"name\":\"CigarUnit\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A structure for an instance of a CIGAR operation.\\n`FIXME: This belongs under Reads (only readAlignment refers to this)`\",\"fields\":[{\"name\":\"operation\",\"type\":\"CigarOperation\",\"doc\":\"The operation type.\"},{\"name\":\"operationLength\",\"type\":\"long\",\"doc\":\"The number of bases that the operation runs for.\"},{\"name\":\"referenceSequence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)\\n  and deletions (`DELETE`). Filling this field replaces the MD tag.\\n  If the relevant information is not available, leave this field as `null`.\",\"default\":null}]},{\"type\":\"error\",\"name\":\"GAException\",\"doc\":\"A general exception type.\",\"fields\":[{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The error message\"},{\"name\":\"errorCode\",\"type\":\"int\",\"doc\":\"The numerical error code\",\"default\":-1}]},{\"type\":\"record\",\"name\":\"Experiment\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An experimental preparation of a sample.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The experiment UUID. This is globally unique.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the experiment.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A description of the experiment.\",\"default\":null},{\"name\":\"recordCreateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The time at which this record was created. \\n  Format: ISO 8601, YYYY-MM-DDTHH:MM:SS.SSS (e.g. 2015-02-10T00:03:42.123Z)\"},{\"name\":\"recordUpdateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The time at which this record was last updated.\\n  Format: ISO 8601, YYYY-MM-DDTHH:MM:SS.SSS (e.g. 2015-02-10T00:03:42.123Z)\"},{\"name\":\"runTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The time at which this experiment was performed.\\n  Granularity here is variable (e.g. date only).\\n  Format: ISO 8601, YYYY-MM-DDTHH:MM:SS (e.g. 2015-02-10T00:03:42)\",\"default\":null},{\"name\":\"molecule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The molecule examined in this experiment. (e.g. genomics DNA, total RNA)\",\"default\":null},{\"name\":\"strategy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The experiment technique or strategy applied to the sample.\\n  (e.g. whole genome sequencing, RNA-seq, RIP-seq)\",\"default\":null},{\"name\":\"selection\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The method used to enrich the target. (e.g. immunoprecipitation, size\\n  fractionation, MNase digestion)\",\"default\":null},{\"name\":\"library\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the library used as part of this experiment.\",\"default\":null},{\"name\":\"libraryLayout\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The configuration of sequenced reads. (e.g. Single or Paired)\",\"default\":null},{\"name\":\"instrumentModel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The instrument model used as part of this experiment.\\n    This maps to sequencing technology in BAM.\"},{\"name\":\"instrumentDataFile\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The data file generated by the instrument.\\n  TODO: This isn't actually a file is it?\\n  Should this be `instrumentData` instead?\",\"default\":null},{\"name\":\"sequencingCenter\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The sequencing center used as part of this experiment.\"},{\"name\":\"platformUnit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The platform unit used as part of this experiment. This is a flowcell-barcode\\n  or slide unique identifier.\",\"default\":null","},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional experiment information.\",\"default\":{}}]},{\"type\":\"record\",\"name\":\"Dataset\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A Dataset is a collection of related data of multiple types.\\nData providers decide how to group data into datasets.\\nSee [Metadata API](../api/metadata.html) for a more detailed discussion.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The dataset's id, locally unique to the server instance.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the dataset.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Additional, human-readable information on the dataset.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"Program\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"Program can be used to track the provenance of how read data was generated.\",\"fields\":[{\"name\":\"commandLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The command line used to run this program.\",\"default\":null},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The user specified ID of the program.\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the program.\",\"default\":null},{\"name\":\"prevProgramId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The ID of the program run before this one.\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The version of the program run.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"ReadStats\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"ReadStats can be used to provide summary statistics about read data.\",\"fields\":[{\"name\":\"alignedReadCount\",\"type\":[\"null\",\"long\"],\"doc\":\"The number of aligned reads.\",\"default\":null},{\"name\":\"unalignedReadCount\",\"type\":[\"null\",\"long\"],\"doc\":\"The number of unaligned reads.\",\"default\":null},{\"name\":\"baseCount\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bases.\\n  This is equivalent to the sum of `alignedSequence.length` for all reads.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"ReadGroup\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A ReadGroup is a set of reads derived from one physical sequencing process.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The read group ID.\"},{\"name\":\"datasetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The ID of the dataset this read group belongs to.\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The read group name.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The read group description.\",\"default\":null},{\"name\":\"sampleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The sample this read group's data was generated from.\\n  Note: the current API does not have a rigorous definition of sample. Therefore, this\\n  field actually contains an arbitrary string, typically corresponding to the SM tag in a\\n  BAM file.\"},{\"name\":\"experiment\",\"type\":[\"null\",\"Experiment\"],\"doc\":\"The experiment used to generate this read group.\"},{\"name\":\"predictedInsertSize\",\"type\":[\"null\",\"int\"],\"doc\":\"The predicted insert size of this read group.\",\"default\":null},{\"name\":\"created\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this read group was created in milliseconds from the epoch.\",\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this read group was last updated in milliseconds\\n  from the epoch.\",\"default\":null},{\"name\":\"stats\",\"type\":[\"null\",\"ReadStats\"],\"doc\":\"Statistical data on reads in this read group.\",\"default\":null},{\"name\":\"programs\",\"type\":{\"type\":\"array\",\"items\":\"Program\"},\"doc\":\"The programs used to generate this read group.\",\"default\":[]},{\"name\":\"referenceSetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The ID of the reference set to which the reads in this read group are aligned.\\n  Required if there are any read alignments.\",\"default\":null},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional read group information.\",\"default\":{}}]},{\"type\":\"record\",\"name\":\"ReadGroupSet\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A ReadGroupSet is a logical collection of ReadGroups. Typically one ReadGroupSet\\nrepresents all the reads from one experimental sample.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The read group set ID.\"},{\"name\":\"datasetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The ID of the dataset this read group set belongs to.\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The read group set name.\",\"default\":null},{\"name\":\"stats\",\"type\":[\"null\",\"ReadStats\"],\"doc\":\"Statistical data on reads in this read group set.\",\"default\":null},{\"name\":\"readGroups\",\"type\":{\"type\":\"array\",\"items\":\"ReadGroup\"},\"doc\":\"The read groups in this set.\",\"default\":[]}]},{\"type\":\"record\",\"name\":\"LinearAlignment\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A linear alignment describes the alignment of a read to a Reference, using a\\nposition and CIGAR array.\",\"fields\":[{\"name\":\"position\",\"type\":\"Position\",\"doc\":\"The position of this alignment.\"},{\"name\":\"mappingQuality\",\"type\":[\"null\",\"int\"],\"doc\":\"The mapping quality of this alignment, meaning the likelihood that the read\\n  maps to this position.\\n\\n  Specifically, this is -10 log10 Pr(mapping position is wrong), rounded to the\\n  nearest integer.\",\"default\":null},{\"name\":\"cigar\",\"type\":{\"type\":\"array\",\"items\":\"CigarUnit\"},\"doc\":\"Represents the local alignment of this sequence (alignment matches, indels, etc)\\n  versus the reference.\",\"default\":[]}]},{\"type\":\"record\",\"name\":\"ReadAlignment\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"Each read alignment describes an alignment with additional information\\nabout the fragment and the read. A read alignment object is equivalent to a\\nline in a SAM file.\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The read alignment ID. This ID is unique within the read group this\\n  alignment belongs to.\\n\\n  For performance reasons, this field may be omitted by a backend.\\n  If provided, its intended use is to make caching and UI display easier for\\n  genome browsers and other lightweight clients.\"},{\"name\":\"readGroupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID of the read group this read belongs to.\\n  (Every read must belong to exactly one read group.)\"},{\"name\":\"fragmentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The fragment name. Equivalent to QNAME (query template name) in SAM.\"},{\"name\":\"properPlacement\",\"type\":[\"null\",\"boolean\"],\"doc\":\"The orientation and the distance between reads from the fragment are\\n  consistent with the sequencing protocol (equivalent to SAM flag 0x2)\",\"default\":null},{\"name\":\"duplicateFragment\",\"type\":[\"null\",\"boolean\"],\"doc\":\"The fragment is a PCR or optical duplicate (SAM flag 0x400).\",\"default\":null},{\"name\":\"numberReads\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of reads in the fragment (extension to SAM flag 0x1)\",\"default\":null},{\"name\":\"fragmentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"The observed length of the fragment, equivalent to TLEN in SAM.\",\"default\":null},{\"name\":\"readNumber\",\"type\":[\"null\",\"int\"],\"doc\":\"The read ordinal in the fragment, 0-based and less than numberReads. This\\n  field replaces SAM flag 0x40 and 0x80 and is intended to more cleanly\\n  represent multiple reads per fragment.\",\"default\":null},{\"name\":\"failedVendorQualityChecks\",\"type\":[\"null\",\"boolean\"],\"doc\":\"The read fails platform or vendor quality checks (SAM flag 0x200).\",\"default\":null},{\"name\":\"alignment\",\"type\":[\"null\",\"LinearAlignment\"],\"doc\":\"The alig","nment for this alignment record. This field will be null if the read\\n  is unmapped.\",\"default\":null},{\"name\":\"secondaryAlignment\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Whether this alignment is secondary. Equivalent to SAM flag 0x100.\\n  A secondary alignment represents an alternative to the primary alignment\\n  for this read. Aligners may return secondary alignments if a read can map\\n  ambiguously to multiple coordinates in the genome.\\n\\n  By convention, each read has one and only one alignment where both\\n  secondaryAlignment and supplementaryAlignment are false.\",\"default\":null},{\"name\":\"supplementaryAlignment\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Whether this alignment is supplementary. Equivalent to SAM flag 0x800.\\n  Supplementary alignments are used in the representation of a chimeric\\n  alignment. In a chimeric alignment, a read is split into multiple\\n  linear alignments that map to different reference contigs. The first\\n  linear alignment in the read will be designated as the representative alignment;\\n  the remaining linear alignments will be designated as supplementary alignments.\\n  These alignments may have different mapping quality scores.\\n\\n  In each linear alignment in a chimeric alignment, the read will be hard clipped.\\n  The `alignedSequence` and `alignedQuality` fields in the alignment record will\\n  only represent the bases for its respective linear alignment.\",\"default\":null},{\"name\":\"alignedSequence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The bases of the read sequence contained in this alignment record (equivalent\\n  to SEQ in SAM).\\n\\n  `alignedSequence` and `alignedQuality` may be shorter than the full read sequence\\n  and quality. This will occur if the alignment is part of a chimeric alignment,\\n  or if the read was trimmed. When this occurs, the CIGAR for this read will\\n  begin/end with a hard clip operator that will indicate the length of the\\n  excised sequence.\",\"default\":null},{\"name\":\"alignedQuality\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"The quality of the read sequence contained in this alignment record\\n  (equivalent to QUAL in SAM).\\n\\n  `alignedSequence` and `alignedQuality` may be shorter than the full read sequence\\n  and quality. This will occur if the alignment is part of a chimeric alignment,\\n  or if the read was trimmed. When this occurs, the CIGAR for this read will\\n  begin/end with a hard clip operator that will indicate the length of the excised sequence.\",\"default\":[]},{\"name\":\"nextMatePosition\",\"type\":[\"null\",\"Position\"],\"doc\":\"The mapping of the primary alignment of the `(readNumber+1)%numberReads`\\n  read in the fragment. It replaces mate position and mate strand in SAM.\",\"default\":null},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional read alignment information.\",\"default\":{}}]},{\"type\":\"record\",\"name\":\"SearchReadsRequest\",\"doc\":\"This request maps to the body of `POST /reads/search` as JSON.\\n\\nIf a reference is specified, all queried `ReadGroup`s must be aligned\\nto `ReferenceSet`s containing that same `Reference`. If no reference is\\nspecified, all queried `ReadGroup`s must be aligned to the same `ReferenceSet`.\",\"fields\":[{\"name\":\"readGroupIds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The ReadGroups to search. At least one id must be specified.\"},{\"name\":\"referenceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The reference to query. Leaving blank returns results from all\\n  references, including unmapped reads - this could be very large.\",\"default\":null},{\"name\":\"start\",\"type\":[\"null\",\"long\"],\"doc\":\"The start position (0-based) of this query.\\n  If a reference is specified, this defaults to 0.\\n  Genomic positions are non-negative integers less than reference length.\\n  Requests spanning the join of circular genomes are represented as\\n  two requests one on each side of the join (position 0).\",\"default\":null},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"doc\":\"The end position (0-based, exclusive) of this query.\\n  If a reference is specified, this defaults to the\\n  reference's length.\",\"default\":null},{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n  If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchReadsResponse\",\"doc\":\"This is the response from `POST /reads/search` expressed as JSON.\",\"fields\":[{\"name\":\"alignments\",\"type\":{\"type\":\"array\",\"items\":\"org.ga4gh.models.ReadAlignment\"},\"doc\":\"The list of matching alignment records, sorted by position.\\n  Unmapped reads, which have no position, are returned last.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchReadGroupSetsRequest\",\"doc\":\"This request maps to the body of `POST /readgroupsets/search` as JSON.\\n\\nTODO: Factor this out to a common API patterns section.\\n- If searching by a resource ID, and that resource is not found, the method\\nwill return a `404` HTTP status code (`NOT_FOUND`).\\n- If searching by other attributes, e.g. `name`, and no matches are found, the\\nmethod will return a `200` HTTP status code (`OK`) with an empty result list.\",\"fields\":[{\"name\":\"datasetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The dataset to search.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only return read group sets with this name (case-sensitive, exact match).\",\"default\":null},{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n  If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchReadGroupSetsResponse\",\"doc\":\"This is the response from `POST /readgroupsets/search` expressed as JSON.\",\"fields\":[{\"name\":\"readGroupSets\",\"type\":{\"type\":\"array\",\"items\":\"org.ga4gh.models.ReadGroupSet\"},\"doc\":\"The list of matching read group sets.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchDatasetsRequest\",\"doc\":\"This request maps to the body of `POST /datasets/search` as JSON.\",\"fields\":[{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n  If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchDatasetsResponse\",\"doc\":\"This is the response from `POST /datasets/search` expressed as JSON.\",\"fields\":[{\"name\":\"datasets\",\"type\":{\"type\":\"array\",\"items\":\"org.ga4gh.models.Dataset\"},\"doc\":\"The list of datasets.\",\"default\":[]},{\"name\"",":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}],\"messages\":{\"searchReads\":{\"doc\":\"Gets a list of `ReadAlignment`s for one or more `ReadGroup`s.\\n\\n`searchReads` operates over a genomic coordinate space of reference sequence\\nand position defined by the `Reference`s to which the requested `ReadGroup`s are\\naligned.\\n\\nIf a target positional range is specified, search returns all reads whose\\nalignment to the reference genome *overlap* the range. A query which specifies\\nonly read group IDs yields all reads in those read groups, including unmapped\\nreads.\\n\\nAll reads returned (including reads on subsequent pages) are ordered by genomic\\ncoordinate (by reference sequence, then position). Reads with equivalent genomic\\ncoordinates are returned in an unspecified order. This order must be consistent\\nfor a given repository, such that two queries for the same content (regardless\\nof page size) yield reads in the same order across their respective streams of\\npaginated responses.\\n\\n`POST /reads/search` must accept a JSON version of `SearchReadsRequest` as\\nthe post body and will return a JSON version of `SearchReadsResponse`.\",\"request\":[{\"name\":\"request\",\"type\":\"SearchReadsRequest\"}],\"response\":\"SearchReadsResponse\",\"errors\":[\"GAException\"]},\"searchReadGroupSets\":{\"doc\":\"Gets a list of `ReadGroupSet` matching the search criteria.\\n\\n`POST /readgroupsets/search` must accept a JSON version of\\n`SearchReadGroupSetsRequest` as the post body and will return a JSON\\nversion of `SearchReadGroupSetsResponse`.\",\"request\":[{\"name\":\"request\",\"type\":\"SearchReadGroupSetsRequest\"}],\"response\":\"SearchReadGroupSetsResponse\",\"errors\":[\"GAException\"]},\"getReadGroupSet\":{\"doc\":\"Gets a `org.ga4gh.models.ReadGroupSet` by ID.\\n`GET /readgroupsets/{id}` will return a JSON version of `ReadGroupSet`.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"response\":\"org.ga4gh.models.ReadGroupSet\",\"errors\":[\"GAException\"]},\"getReadGroup\":{\"doc\":\"Gets a `org.ga4gh.models.ReadGroup` by ID.\\n`GET /readgroups/{id}` will return a JSON version of `ReadGroup`.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"response\":\"org.ga4gh.models.ReadGroup\",\"errors\":[\"GAException\"]},\"searchDatasets\":{\"doc\":\"Gets a list of datasets accessible through the API.\\n\\nTODO: Reads and variants both want to have datasets. Are they the same object?\\n\\n`POST /datasets/search` must accept a JSON version of\\n`SearchDatasetsRequest` as the post body and will return a JSON version\\nof `SearchDatasetsResponse`.\",\"request\":[{\"name\":\"request\",\"type\":\"SearchDatasetsRequest\"}],\"response\":\"SearchDatasetsResponse\",\"errors\":[\"GAException\"]},\"getDataset\":{\"doc\":\"Gets a `Dataset` by ID.\\n`GET /datasets/{id}` will return a JSON version of `Dataset`.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"response\":\"org.ga4gh.models.Dataset\",\"errors\":[\"GAException\"]}}}");
  /** Gets a list of `ReadAlignment`s for one or more `ReadGroup`s.

`searchReads` operates over a genomic coordinate space of reference sequence
and position defined by the `Reference`s to which the requested `ReadGroup`s are
aligned.

If a target positional range is specified, search returns all reads whose
alignment to the reference genome *overlap* the range. A query which specifies
only read group IDs yields all reads in those read groups, including unmapped
reads.

All reads returned (including reads on subsequent pages) are ordered by genomic
coordinate (by reference sequence, then position). Reads with equivalent genomic
coordinates are returned in an unspecified order. This order must be consistent
for a given repository, such that two queries for the same content (regardless
of page size) yield reads in the same order across their respective streams of
paginated responses.

`POST /reads/search` must accept a JSON version of `SearchReadsRequest` as
the post body and will return a JSON version of `SearchReadsResponse`. */
  org.ga4gh.methods.SearchReadsResponse searchReads(org.ga4gh.methods.SearchReadsRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a list of `ReadGroupSet` matching the search criteria.

`POST /readgroupsets/search` must accept a JSON version of
`SearchReadGroupSetsRequest` as the post body and will return a JSON
version of `SearchReadGroupSetsResponse`. */
  org.ga4gh.methods.SearchReadGroupSetsResponse searchReadGroupSets(org.ga4gh.methods.SearchReadGroupSetsRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a `org.ga4gh.models.ReadGroupSet` by ID.
`GET /readgroupsets/{id}` will return a JSON version of `ReadGroupSet`. */
  org.ga4gh.models.ReadGroupSet getReadGroupSet(java.lang.String id) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a `org.ga4gh.models.ReadGroup` by ID.
`GET /readgroups/{id}` will return a JSON version of `ReadGroup`. */
  org.ga4gh.models.ReadGroup getReadGroup(java.lang.String id) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a list of datasets accessible through the API.

TODO: Reads and variants both want to have datasets. Are they the same object?

`POST /datasets/search` must accept a JSON version of
`SearchDatasetsRequest` as the post body and will return a JSON version
of `SearchDatasetsResponse`. */
  org.ga4gh.methods.SearchDatasetsResponse searchDatasets(org.ga4gh.methods.SearchDatasetsRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a `Dataset` by ID.
`GET /datasets/{id}` will return a JSON version of `Dataset`. */
  org.ga4gh.models.Dataset getDataset(java.lang.String id) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;

  @SuppressWarnings("all")
  public interface Callback extends ReadMethods {
    public static final org.apache.avro.Protocol PROTOCOL = org.ga4gh.methods.ReadMethods.PROTOCOL;
    /** Gets a list of `ReadAlignment`s for one or more `ReadGroup`s.

`searchReads` operates over a genomic coordinate space of reference sequence
and position defined by the `Reference`s to which the requested `ReadGroup`s are
aligned.

If a target positional range is specified, search returns all reads whose
alignment to the reference genome *overlap* the range. A query which specifies
only read group IDs yields all reads in those read groups, including unmapped
reads.

All reads returned (including reads on subsequent pages) are ordered by genomic
coordinate (by reference sequence, then position). Reads with equivalent genomic
coordinates are returned in an unspecified order. This order must be consistent
for a given repository, such that two queries for the same content (regardless
of page size) yield reads in the same order across their respective streams of
paginated responses.

`POST /reads/search` must accept a JSON version of `SearchReadsRequest` as
the post body and will return a JSON version of `SearchReadsResponse`. */
    void searchReads(org.ga4gh.methods.SearchReadsRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.SearchReadsResponse> callback) throws java.io.IOException;
    /** Gets a list of `ReadGroupSet` matching the search criteria.

`POST /readgroupsets/search` must accept a JSON version of
`SearchReadGroupSetsRequest` as the post body and will return a JSON
version of `SearchReadGroupSetsResponse`. */
    void searchReadGroupSets(org.ga4gh.methods.SearchReadGroupSetsRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.SearchReadGroupSetsResponse> callback) throws java.io.IOException;
    /** Gets a `org.ga4gh.models.ReadGroupSet` by ID.
`GET /readgroupsets/{id}` will return a JSON version of `ReadGroupSet`. */
    void getReadGroupSet(java.lang.String id, org.apache.avro.ipc.Callback<org.ga4gh.models.ReadGroupSet> callback) throws java.io.IOException;
    /** Gets a `org.ga4gh.models.ReadGroup` by ID.
`GET /readgroups/{id}` will return a JSON version of `ReadGroup`. */
    void getReadGroup(java.lang.String id, org.apache.avro.ipc.Callback<org.ga4gh.models.ReadGroup> callback) throws java.io.IOException;
    /** Gets a list of datasets accessible through the API.

TODO: Reads and variants both want to have datasets. Are they the same object?

`POST /datasets/search` must accept a JSON version of
`SearchDatasetsRequest` as the post body and will return a JSON version
of `SearchDatasetsResponse`. */
    void searchDatasets(org.ga4gh.methods.SearchDatasetsRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.SearchDatasetsResponse> callback) throws java.io.IOException;
    /** Gets a `Dataset` by ID.
`GET /datasets/{id}` will return a JSON version of `Dataset`. */
    void getDataset(java.lang.String id, org.apache.avro.ipc.Callback<org.ga4gh.models.Dataset> callback) throws java.io.IOException;
  }
}