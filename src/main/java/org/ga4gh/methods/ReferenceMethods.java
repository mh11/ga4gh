/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public interface ReferenceMethods {
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"ReferenceMethods\",\"namespace\":\"org.ga4gh.methods\",\"types\":[{\"type\":\"enum\",\"name\":\"Strand\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"Indicates the DNA strand associate for some data item.\\n* `POS_STRAND`:  The postive (+) strand.\\n* `NEG_STRAND`: The negative (-) strand.\\n* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.\",\"symbols\":[\"POS_STRAND\",\"NEG_STRAND\",\"NO_STRAND\"]},{\"type\":\"record\",\"name\":\"Position\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `Position` is a side of a base pair in some already known sequence. A\\n`Position` is represented by a sequence name or ID, a base number on that\\nsequence (0-based), and a `Strand` to indicate the left or right side.\\n\\nFor example, given the sequence \\\"GTGG\\\", the `Position` on that sequence at\\noffset 1 in the forward orientation would be the left side of the T/A base pair.\\nThe base at this `Position` is \\\"T\\\". Alternately, for offset 1 in the reverse\\norientation, the `Position` would be the right side of the T/A base pair, and\\nthe base at the `Position` is \\\"A\\\".\\n\\nOffsets added to a `Position` are interpreted as reading along its strand;\\nadding to a reverse strand position actually subtracts from its `position`\\nmember.\",\"fields\":[{\"name\":\"referenceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the reference sequence in whatever reference set is being used.\\n  Does not generally include a \\\"chr\\\" prefix, so for example \\\"X\\\" would be used\\n  for the X chromosome.\\n\\n  If `sequenceId` is null, this must not be null.\",\"default\":null},{\"name\":\"sequenceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The ID of the sequence on which the `Position` is located. This may be a\\n  `Reference` sequence, or a novel piece of sequence associated with a\\n  `VariantSet`.\\n\\n  If `referenceName` is null, this must not be null.\\n\\n  If the server supports the \\\"graph\\\" mode, this must not be null.\",\"default\":null},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"The 0-based offset from the start of the forward strand for that sequence.\\n  Genomic positions are non-negative integers less than sequence length.\"},{\"name\":\"strand\",\"type\":\"Strand\",\"doc\":\"Strand the position is associated with. `POS_STRAND` represents the forward\\n  strand, or equivalently the left side of a base, and `NEG_STRAND` represents\\n  the reverse strand, or equivalently the right side of a base.\"}]},{\"type\":\"record\",\"name\":\"Segment\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `Segment` is a range on a sequence, possibly including the joins at the\\nsequence's ends. It does not include base data. (The bases for a sequence are\\navailable through the `getSequenceBases()` API call.)\\n\\nIn the sequence \\\"GTGG\\\", the segment starting at index 1 on the forward strand\\nwith length 2 is the \\\"TG\\\" on the forward strand. The length-2 segment starting\\nat index 1 on the reverse strand is \\\"AC\\\", corresponding to the first two base\\npairs of the sequence, or the last two bases of the reverse complement.\",\"fields\":[{\"name\":\"start\",\"type\":\"Position\",\"doc\":\"The sequence ID and start index of this `Segment`. This base is always\\n  included in the segment, regardless of orientation.\"},{\"name\":\"length\",\"type\":\"long\",\"doc\":\"The length of this `Segment`'s sequence. If `start` is on the forward strand,\\n  the `Segment` contains the range [`start.position`, `start.position` +\\n  `length`). If `start` is on the reverse strand, the `Segment` contains the\\n  range (`start.position` - `length`, `start.position`]. This is equivalent to\\n  starting from the side indicated by `start`, and traversing through that base\\n  out to the specified length.\"},{\"name\":\"startJoin\",\"type\":[\"null\",\"Position\"],\"doc\":\"Start and end `Position`s where this `Segment` attaches to other sequences.\\n  Note that the segmentId for start and end might not be the same. The\\n  `Segment`s covering the sequences onto which this `Segment` is joined are\\n  called its \\\"parents\\\", while this segment is a \\\"child\\\".\\n\\n  Joins may occur on the outer sides of the terminal bases in a sequence: the\\n  left side of the base at index 0, and the right side of the base with maximum\\n  index. These are the \\\"terminal sides\\\" of the sequence. `startJoin` is the join\\n  on the side indicated by `start`, and may only be set if that side is a\\n  terminal side. Similarly, `endJoin` is the join on the opposite side of the\\n  piece of sequence selected by the segment, and may only be set if that side is\\n  a terminal side. The value of `startJoin` or `endJoin`, if set, is the side to\\n  which the corresponding side of this `Sequence` is connected.\",\"default\":null},{\"name\":\"endJoin\",\"type\":[\"null\",\"Position\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"Path\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `Path` is an ordered list of `Segment`s. In general any contiguous path\\nthrough a sequence graph, with no novel adjacencies, can be represented by a\\n`Path`.\",\"fields\":[{\"name\":\"segments\",\"type\":{\"type\":\"array\",\"items\":\"Segment\"},\"doc\":\"We require that one of each consecutive pair of `Segment`s in a `Path` be\\n  joined onto the other. `Segment`s appear in the order in which they occur when\\n  walking the path from one end to the other.\",\"default\":[]}]},{\"type\":\"enum\",\"name\":\"CigarOperation\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An enum for the different types of CIGAR alignment operations that exist.\\nUsed wherever CIGAR alignments are used. The different enumerated values\\nhave the following usage:\\n\\n* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be\\n  aligned to the reference without evidence of an INDEL. Unlike the\\n  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`\\n  operator does not indicate whether the reference and read sequences are an\\n  exact match. This operator is equivalent to SAM's `M`.\\n* `INSERT`: The insert operator indicates that the read contains evidence of\\n  bases being inserted into the reference. This operator is equivalent to\\n  SAM's `I`.\\n* `DELETE`: The delete operator indicates that the read contains evidence of\\n  bases being deleted from the reference. This operator is equivalent to\\n  SAM's `D`.\\n* `SKIP`: The skip operator indicates that this read skips a long segment of\\n  the reference, but the bases have not been deleted. This operator is\\n  commonly used when working with RNA-seq data, where reads may skip long\\n  segments of the reference between exons. This operator is equivalent to\\n  SAM's 'N'.\\n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end\\n  of a read have not been considered during alignment. This may occur if the\\n  majority of a read maps, except for low quality bases at the start/end of\\n  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped\\n  will still be stored in the read.\\n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of\\n  a read have been omitted from this alignment. This may occur if this linear\\n  alignment is part of a chimeric alignment, or if the read has been trimmed\\n  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This\\n  operator is equivalent to SAM's 'H'.\\n* `PAD`: The pad operator indicates that there is padding in an alignment.\\n  This operator is equivalent to SAM's 'P'.\\n* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned\\n  sequence exactly matches the reference (e.g., all bases are equal to the\\n  reference bases). This operator is equivalent to SAM's '='.\\n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the\\n  aligned sequence is an alignment match to the reference, but a sequence\\n  mismatch (e.g., the bases are not equal to the reference). This can\\n  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.\",\"symbols\":[\"ALIGNMENT_MATCH\",\"INSERT\",\"DELETE\",\"SKIP\",\"CLIP_SOFT\",\"CLIP_HARD\",\"PAD\",\"SEQUENCE_MATCH\",\"SEQUENCE_MISMATCH\"]},{\"type\":\"record\",\"name\":\"CigarUnit\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A structure for an instance of a CIGAR operation.\",\"fields\":[{\"name\":\"operation\",\"type\":\"CigarOperation\",\"doc\":\"The operation type.\"}",",{\"name\":\"operationLength\",\"type\":\"long\",\"doc\":\"The number of bases that the operation runs for.\"},{\"name\":\"referenceSequence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)\\n  and deletions (`DELETE`). Filling this field replaces the MD tag.\\n  If the relevant information is not available, leave this field as `null`.\",\"default\":null}]},{\"type\":\"error\",\"name\":\"GAException\",\"doc\":\"A general exception type.\",\"fields\":[{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The error message\"},{\"name\":\"errorCode\",\"type\":\"int\",\"doc\":\"The numerical error code\",\"default\":-1}]},{\"type\":\"record\",\"name\":\"Reference\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `Reference` is a canonical assembled contig, intended to act as a\\nreference coordinate space for other genomic annotations. A single\\n`Reference` might represent the human chromosome 1, for instance.\\n\\n`Reference`s are designed to be immutable. When extending a `ReferenceSet` with\\nnew `Reference`s, the existing `References` should not be changed. Newly added\\n`Reference` sequences may be children of existing `Reference` sequences, but\\nexisting `Reference` sequences should not be made to be children of newly added\\n`Reference` sequences.\\n\\nAn API server that supports the \\\"graph\\\" mode must always set the `segment`\\nfield. An API server that supports the \\\"classic\\\" mode must always set the `id`\\nfield. New client and server implementations should prefer the \\\"graph\\\" mode.\",\"fields\":[{\"name\":\"segment\",\"type\":[\"null\",\"Segment\"],\"doc\":\"The `Segment` describing this `Reference`'s sequence in the `ReferenceSet`'s\\n  sequence graph.\\n\\n  The `Segment` will generally cover the entirety of the sequence, but may be\\n  shorter if only a subrange of a sequence is to be included in the\\n  `ReferenceSet`.\\n\\n  The sequence ID of the `Segment` is equal to ID of the `Reference`. The\\n  actual sequence bases for a `Reference` are available through the\\n  `getSequenceBases()` API call on this `Reference`'s sequence.\\n\\n  If the API server supports the \\\"graph\\\" mode, this field must not be null.\",\"default\":null},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The reference ID. Unique within the repository. A sequence with this ID\\n  exists, containing the reference's bases. If null, `segment` must be set, and\\n  the sequence ID field from `segment` is used.\\n\\n  If the API server supports the \\\"classic\\\" mode, this field must not be null.\",\"default\":null},{\"name\":\"length\",\"type\":\"long\",\"doc\":\"The length of this reference's sequence.\"},{\"name\":\"md5checksum\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The MD5 checksum uniquely representing this `Reference` and its position in\\n  the `ReferenceSet`'s sequence graph, as a lower-case hexadecimal string.\\n\\n  If `segment.startJoin` and `segment.endJoin` are both null, or `segment`\\n  itself is null, this is the MD5 of the upper-case sequence excluding all\\n  whitespace characters (this is equivalent to SQ:M5 in SAM).\\n\\n  Otherwise, this hash is to be computed as follows:\\n\\n  * Initialize a new MD5 hashing state.\\n\\n  * Add in the the MD5 of the upper-case sequence excluding all whitespace\\n  characters, as a lower-case hexadecimal string.\\n\\n  * If `segment.startJoin` is null, add in 32 '0' characters. Otherwise add in\\n  the `md5checksum` of the `Reference` indicated by `segment.startJoin`,\\n  `segment.startJoin.position` as a decimal string, and\\n  `segment.startJoin.strand` as either \\\"+\\\" or \\\"-\\\".\\n\\n  * If `segment.endJoin` is null, add in 32 '0' characters. Otherwise add in\\n  the `md5checksum` of the `Reference` indicated by `segment.endJoin`,\\n  `segment.endJoin.position` as a decimal string, and `segment.endJoin.strand`\\n  as either \\\"+\\\" or \\\"-\\\".\\n\\n  * Compute the digest and represent it as a lower-case hexadecimal string.\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of this reference. (e.g. '22') Also see the\\n  `names` field on the parent `ReferenceSet`.\"},{\"name\":\"sourceURI\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The URI from which the sequence was obtained.\\n  Specifies a FASTA format file/string with one name, sequence pair.\\n  In most cases, clients should call the `getSequenceBases()` or\\n  `getReferenceBases()` methods to obtain sequence bases for a `Reference`\\n  instead of attempting to retrieve this URI.\",\"default\":null},{\"name\":\"sourceAccessions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally\\n  with a version number, e.g. `GCF_000001405.26`.\"},{\"name\":\"isDerived\",\"type\":\"boolean\",\"doc\":\"A sequence X is said to be derived from source sequence Y, if X and Y\\n  are of the same length and the per-base sequence divergence at A/C/G/T bases\\n  is sufficiently small. Two sequences derived from the same official\\n  sequence share the same coordinates and annotations, and\\n  can be replaced with the official sequence for certain use cases.\",\"default\":false},{\"name\":\"sourceDivergence\",\"type\":[\"null\",\"float\"],\"doc\":\"The `sourceDivergence` is the fraction of non-indel bases that do not match the\\n  reference this record was derived from.\",\"default\":null},{\"name\":\"ncbiTaxonId\",\"type\":[\"null\",\"int\"],\"doc\":\"ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human).\",\"default\":null}]},{\"type\":\"record\",\"name\":\"ReferenceSet\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `ReferenceSet` is a set of `Reference`s which typically comprise a\\nreference assembly, such as `GRCh38`. A `ReferenceSet` defines a common\\ncoordinate space for comparing reference-aligned experimental data.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The reference set ID. Unique in the repository.\"},{\"name\":\"referenceIds\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"The IDs of the `Reference` objects that are part of this set.\\n\\n  This field should be left null if the set contains a very large number of\\n  `Reference`s. The `Reference`s in the set may also be obtained through a\\n  `searchReferences()` API call.\",\"default\":null},{\"name\":\"md5checksum\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Order-independent MD5 checksum which identifies this `ReferenceSet`. The\\n  checksum is computed by sorting all `reference.md5checksum` (for all\\n  `reference` in this set) in ascending lexicographic order, concatenating,\\n  and taking the MD5 of that value.\"},{\"name\":\"ncbiTaxonId\",\"type\":[\"null\",\"int\"],\"doc\":\"ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human) indicating\\n  the species which this assembly is intended to model. Note that contained\\n  `Reference`s may specify a different `ncbiTaxonId`, as assemblies may\\n  contain reference sequences which do not belong to the modeled species, e.g.\\n  EBV in a human reference genome.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional free text description of this reference set.\",\"default\":null},{\"name\":\"assemblyId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Public id of this reference set, such as `GRCh37`.\",\"default\":null},{\"name\":\"sourceURI\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Specifies a FASTA format file/string.\",\"default\":null},{\"name\":\"sourceAccessions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally\\n  with a version number, e.g. `NC_000001.11`.\"},{\"name\":\"isDerived\",\"type\":\"boolean\",\"doc\":\"A reference set may be derived from a source if it contains\\n  additional sequences, or some of the sequences within it are derived\\n  (see the definition of `isDerived` in `Reference`).\",\"default\":false}]},{\"type\":\"record\",\"name\":\"SearchReferenceSetsRequest\",\"doc\":\"This request maps to the body of `POST /referencesets/search`\\nas JSON.\",\"fields\":[{\"name\":\"md5checksums","\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If nonempty, return the reference sets which match any of the given\\n  `md5checksum`s. See `ReferenceSet::md5checksum` for details.\",\"default\":[]},{\"name\":\"accessions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If nonempty, return reference sets for which the accession\\n  matches this string. Best to give a version number (e.g. `GCF_000001405.26`).\\n  If only the main accession number is given then all records with\\n  that main accession will be returned, whichever version.\\n  Note that different versions will have different sequences.\",\"default\":[]},{\"name\":\"assemblyId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"If present, return reference sets for which the `assemblyId`\\n  contains this string.\",\"default\":null},{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n  If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchReferenceSetsResponse\",\"doc\":\"This is the response from `POST /referencesets/search`\\nexpressed as JSON.\",\"fields\":[{\"name\":\"referenceSets\",\"type\":{\"type\":\"array\",\"items\":\"org.ga4gh.models.ReferenceSet\"},\"doc\":\"The list of matching reference sets.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchReferencesRequest\",\"doc\":\"This request maps to the body of `POST /references/search`\\nas JSON.\",\"fields\":[{\"name\":\"referenceSetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"If present, return only references which belong to this reference set.\",\"default\":null},{\"name\":\"md5checksums\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If nonempty, return references which match any of the given `md5checksums`.\\n  See `Reference::md5checksum` for details.\",\"default\":[]},{\"name\":\"parentReferenceIds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If nonempty, return references that are joined onto references with one of the\\n  specified IDs.\",\"default\":[]},{\"name\":\"accessions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If nonempty, return references for which the accession\\n  matches this string. Best to give a version number e.g. `GCF_000001405.26`.\\n  If only the main accession number is given then all records with\\n  that main accession will be returned, whichever version.\\n  Note that different versions will have different sequences.\",\"default\":[]},{\"name\":\"referenceNames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If nonempty, return references that have one of the specified names. The name\\n  specified must match the reference's name exactly, and is case sensitive.\",\"default\":[]},{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n  If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SearchReferencesResponse\",\"doc\":\"This is the response from `POST /references/search` expressed as JSON.\",\"fields\":[{\"name\":\"references\",\"type\":{\"type\":\"array\",\"items\":\"org.ga4gh.models.Reference\"},\"doc\":\"The list of matching references.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"ListReferenceBasesRequest\",\"doc\":\"The query parameters for a request to `GET /references/{id}/bases`, for\\nexample:\\n\\n`GET /references/{id}/bases?start=100&end=200`\",\"fields\":[{\"name\":\"start\",\"type\":\"long\",\"doc\":\"The start position (0-based) of this query. Defaults to 0.\\n  Genomic positions are non-negative integers less than reference length.\\n  Requests spanning the join of circular genomes are represented as\\n  two requests one on each side of the join (position 0).\",\"default\":0},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"doc\":\"The end position (0-based, exclusive) of this query. Defaults\\n  to the length of this `Reference`.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"ListReferenceBasesResponse\",\"doc\":\"The response from `GET /references/{id}/bases` expressed as JSON.\",\"fields\":[{\"name\":\"offset\",\"type\":\"long\",\"doc\":\"The offset position (0-based) of the given `sequence` from the start of this\\n  `Reference`. This value will differ for each page in a paginated request.\",\"default\":0},{\"name\":\"sequence\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A substring of the bases that make up this reference. Bases are represented\\n  as IUPAC-IUB codes; this string matches the regexp `[ACGTMRWSYKVHDBN]*`.\"},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"GetSequenceBasesRequest\",\"doc\":\"The query parameters for a request to `GET /sequence/{id}`, for\\nexample:\\n\\n`GET /sequence/c95d4520-8c63-45f1-924d-6a9604a919fb?start=100&end=200`\",\"fields\":[{\"name\":\"start\",\"type\":\"long\",\"doc\":\"The start position (0-based) of this query. Defaults to 0.\\n  Genomic positions are non-negative integers less than segment length.\\n  Requests spanning the join of circular genomes are represented as\\n  two requests one on each side of the join (position 0).\",\"default\":0},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"doc\":\"The end position (0-based, exclusive) of this query. Defaults\\n  to the length of this `Segment`.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"GetSequenceBasesResponse\",\"doc\":\"The response from `GET /sequence/{id}` expressed as JSON.\",\"fields\":[{\"name\":\"offset\",\"type\":\"long\",\"doc\":\"The offset position (0-based) of the returned string in the sequence. This\\n  value will differ for each page in a paginated request.\",\"default\":0},{\"name\":\"sequence\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A substring of the sequence requested. Bases are represented as IUPAC-IUB\\n  codes; this string matches the regexp `[ACGTMRWSYKVHDBN]*`.\"},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in ","a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}],\"messages\":{\"sendsMode\":{\"doc\":\"**************  /mode/{mode}  ******************\",\"request\":[{\"name\":\"mode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"response\":\"boolean\",\"errors\":[\"GAException\"]},\"searchReferenceSets\":{\"doc\":\"Gets a list of `ReferenceSet` matching the search criteria.\\n\\n`POST /referencesets/search` must accept a JSON version of\\n`SearchReferenceSetsRequest` as the post body and will return a JSON\\nversion of `SearchReferenceSetsResponse`.\",\"request\":[{\"name\":\"request\",\"type\":\"SearchReferenceSetsRequest\"}],\"response\":\"SearchReferenceSetsResponse\",\"errors\":[\"GAException\"]},\"getReferenceSet\":{\"doc\":\"Gets a `ReferenceSet` by ID.\\n`GET /referencesets/{id}` will return a JSON version of `ReferenceSet`.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"response\":\"org.ga4gh.models.ReferenceSet\",\"errors\":[\"GAException\"]},\"searchReferences\":{\"doc\":\"Gets a list of `Reference` matching the search criteria.\\n\\n`POST /references/search` must accept a JSON version of\\n`SearchReferencesRequest` as the post body and will return a JSON\\nversion of `SearchReferencesResponse`.\",\"request\":[{\"name\":\"request\",\"type\":\"SearchReferencesRequest\"}],\"response\":\"SearchReferencesResponse\",\"errors\":[\"GAException\"]},\"getReference\":{\"doc\":\"Gets a `Reference` by ID.\\n`GET /references/{id}` will return a JSON version of `Reference`.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"response\":\"org.ga4gh.models.Reference\",\"errors\":[\"GAException\"]},\"getReferenceBases\":{\"doc\":\"Lists `Reference` bases by ID and optional range.\\n`GET /references/{id}/bases` will return a JSON version of\\n`ListReferenceBasesResponse`.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"request\",\"type\":\"ListReferenceBasesRequest\"}],\"response\":\"ListReferenceBasesResponse\",\"errors\":[\"GAException\"]},\"getSequenceBases\":{\"doc\":\"Lists bases by sequence ID and optional range. `GET /sequence/{id}` will return\\na JSON version of `GetSequenceBasesResponse`. Works for sequences with\\nassociated `Reference`s, as well as novel sequences that come with\\n`VariantSet`s.\",\"request\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"request\",\"type\":\"GetSequenceBasesRequest\"}],\"response\":\"GetSequenceBasesResponse\",\"errors\":[\"GAException\"]}}}");
  /** **************  /mode/{mode}  ****************** */
  boolean sendsMode(java.lang.String mode) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a list of `ReferenceSet` matching the search criteria.

`POST /referencesets/search` must accept a JSON version of
`SearchReferenceSetsRequest` as the post body and will return a JSON
version of `SearchReferenceSetsResponse`. */
  org.ga4gh.methods.SearchReferenceSetsResponse searchReferenceSets(org.ga4gh.methods.SearchReferenceSetsRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a `ReferenceSet` by ID.
`GET /referencesets/{id}` will return a JSON version of `ReferenceSet`. */
  org.ga4gh.models.ReferenceSet getReferenceSet(java.lang.String id) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a list of `Reference` matching the search criteria.

`POST /references/search` must accept a JSON version of
`SearchReferencesRequest` as the post body and will return a JSON
version of `SearchReferencesResponse`. */
  org.ga4gh.methods.SearchReferencesResponse searchReferences(org.ga4gh.methods.SearchReferencesRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Gets a `Reference` by ID.
`GET /references/{id}` will return a JSON version of `Reference`. */
  org.ga4gh.models.Reference getReference(java.lang.String id) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Lists `Reference` bases by ID and optional range.
`GET /references/{id}/bases` will return a JSON version of
`ListReferenceBasesResponse`. */
  org.ga4gh.methods.ListReferenceBasesResponse getReferenceBases(java.lang.String id, org.ga4gh.methods.ListReferenceBasesRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;
  /** Lists bases by sequence ID and optional range. `GET /sequence/{id}` will return
a JSON version of `GetSequenceBasesResponse`. Works for sequences with
associated `Reference`s, as well as novel sequences that come with
`VariantSet`s. */
  org.ga4gh.methods.GetSequenceBasesResponse getSequenceBases(java.lang.String id, org.ga4gh.methods.GetSequenceBasesRequest request) throws org.apache.avro.AvroRemoteException, org.ga4gh.methods.GAException;

  @SuppressWarnings("all")
  public interface Callback extends ReferenceMethods {
    public static final org.apache.avro.Protocol PROTOCOL = org.ga4gh.methods.ReferenceMethods.PROTOCOL;
    /** **************  /mode/{mode}  ****************** */
    void sendsMode(java.lang.String mode, org.apache.avro.ipc.Callback<java.lang.Boolean> callback) throws java.io.IOException;
    /** Gets a list of `ReferenceSet` matching the search criteria.

`POST /referencesets/search` must accept a JSON version of
`SearchReferenceSetsRequest` as the post body and will return a JSON
version of `SearchReferenceSetsResponse`. */
    void searchReferenceSets(org.ga4gh.methods.SearchReferenceSetsRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.SearchReferenceSetsResponse> callback) throws java.io.IOException;
    /** Gets a `ReferenceSet` by ID.
`GET /referencesets/{id}` will return a JSON version of `ReferenceSet`. */
    void getReferenceSet(java.lang.String id, org.apache.avro.ipc.Callback<org.ga4gh.models.ReferenceSet> callback) throws java.io.IOException;
    /** Gets a list of `Reference` matching the search criteria.

`POST /references/search` must accept a JSON version of
`SearchReferencesRequest` as the post body and will return a JSON
version of `SearchReferencesResponse`. */
    void searchReferences(org.ga4gh.methods.SearchReferencesRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.SearchReferencesResponse> callback) throws java.io.IOException;
    /** Gets a `Reference` by ID.
`GET /references/{id}` will return a JSON version of `Reference`. */
    void getReference(java.lang.String id, org.apache.avro.ipc.Callback<org.ga4gh.models.Reference> callback) throws java.io.IOException;
    /** Lists `Reference` bases by ID and optional range.
`GET /references/{id}/bases` will return a JSON version of
`ListReferenceBasesResponse`. */
    void getReferenceBases(java.lang.String id, org.ga4gh.methods.ListReferenceBasesRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.ListReferenceBasesResponse> callback) throws java.io.IOException;
    /** Lists bases by sequence ID and optional range. `GET /sequence/{id}` will return
a JSON version of `GetSequenceBasesResponse`. Works for sequences with
associated `Reference`s, as well as novel sequences that come with
`VariantSet`s. */
    void getSequenceBases(java.lang.String id, org.ga4gh.methods.GetSequenceBasesRequest request, org.apache.avro.ipc.Callback<org.ga4gh.methods.GetSequenceBasesResponse> callback) throws java.io.IOException;
  }
}