/*
 * Copyright 2015 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;  
@SuppressWarnings("all")
/** This is the response from `POST /allelecalls/search` expressed as JSON. */
@org.apache.avro.specific.AvroGenerated
public class SearchAlleleCallsResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchAlleleCallsResponse\",\"namespace\":\"org.ga4gh.methods\",\"doc\":\"This is the response from `POST /allelecalls/search` expressed as JSON.\",\"fields\":[{\"name\":\"alleleCalls\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AlleleCall\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An `AlleleCall` represents the determination of the copy number of a particular\\n`Allele`, possibly within a certain `Variant`.\\n\\nIt may include associated information such as quality and phasing.\\n\\nThe `Allele` copy numbers described by an `AlleleCall` must be consistent with\\nthose implied by the `genotype`s of any `Call`s in the same `CallSet`. If a\\nserver supports \\\"graph\\\" mode, it must provide `Variant`-associated `AlleleCall`s\\nfor any `Variant` with a `Call` in the `CallSet`.\",\"fields\":[{\"name\":\"callSetId\",\"type\":\"string\",\"doc\":\"The ID of the call set this `AlleleCall` belongs to.\"},{\"name\":\"alleleId\",\"type\":\"string\",\"doc\":\"The ID of the `Allele` that this `AlleleCall` is calling the copy number of.\"},{\"name\":\"variantId\",\"type\":[\"null\",\"string\"],\"doc\":\"The ID of the `Variant` that this `AlleleCall` belongs to.\\n\\n  The specified `Variant` must have this `AlleleCall`'s `Allele` as an option.\\n\\n  Only one `AlleleCall` may be associated with a particular `Variant`-`Allele`\\n  combination in a particular `CallSet`. So, one `AlleleCall` for this `Allele`\\n  may have a null `variantId`, and one additional `AlleleCall` can use this\\n  `Allele` for each `Variant` the `Allele` appears in.\"},{\"name\":\"totalCopies\",\"type\":\"double\",\"doc\":\"Gives the called copy number of the `Allele`. If `variantId` is null, this\\n  gives the total copy number of the `Allele`, including copies associated with\\n  `Variant`s. Otherwise, it is the copy number of this `Allele` in the specified\\n  `Variant`, and must agree with the `genotype` of the `Call` for that\\n  `Variant`, if any.\"},{\"name\":\"phaseset\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the phasing of the copies of this `Allele`. Each entry is associated\\n  with an instance of this `AlleleCall`'s `Allele`. Allele instances that are\\n  associated with the same `phaseset` string occur on the same molecule of DNA.\\n\\n  The number of entries should not exceed `totalCopies`.\"},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}},\"doc\":\"A map of additional allele call information.\",\"default\":{}}]}},\"doc\":\"The list of matching calls.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",\"string\"],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The list of matching calls. */
   private java.util.List<org.ga4gh.models.AlleleCall> alleleCalls;
  /** The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results. */
   private java.lang.CharSequence nextPageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchAlleleCallsResponse() {}

  /**
   * All-args constructor.
   */
  public SearchAlleleCallsResponse(java.util.List<org.ga4gh.models.AlleleCall> alleleCalls, java.lang.CharSequence nextPageToken) {
    this.alleleCalls = alleleCalls;
    this.nextPageToken = nextPageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return alleleCalls;
    case 1: return nextPageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: alleleCalls = (java.util.List<org.ga4gh.models.AlleleCall>)value$; break;
    case 1: nextPageToken = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'alleleCalls' field.
   * The list of matching calls.   */
  public java.util.List<org.ga4gh.models.AlleleCall> getAlleleCalls() {
    return alleleCalls;
  }

  /**
   * Sets the value of the 'alleleCalls' field.
   * The list of matching calls.   * @param value the value to set.
   */
  public void setAlleleCalls(java.util.List<org.ga4gh.models.AlleleCall> value) {
    this.alleleCalls = value;
  }

  /**
   * Gets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   */
  public java.lang.CharSequence getNextPageToken() {
    return nextPageToken;
  }

  /**
   * Sets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   * @param value the value to set.
   */
  public void setNextPageToken(java.lang.CharSequence value) {
    this.nextPageToken = value;
  }

  /** Creates a new SearchAlleleCallsResponse RecordBuilder */
  public static org.ga4gh.methods.SearchAlleleCallsResponse.Builder newBuilder() {
    return new org.ga4gh.methods.SearchAlleleCallsResponse.Builder();
  }
  
  /** Creates a new SearchAlleleCallsResponse RecordBuilder by copying an existing Builder */
  public static org.ga4gh.methods.SearchAlleleCallsResponse.Builder newBuilder(org.ga4gh.methods.SearchAlleleCallsResponse.Builder other) {
    return new org.ga4gh.methods.SearchAlleleCallsResponse.Builder(other);
  }
  
  /** Creates a new SearchAlleleCallsResponse RecordBuilder by copying an existing SearchAlleleCallsResponse instance */
  public static org.ga4gh.methods.SearchAlleleCallsResponse.Builder newBuilder(org.ga4gh.methods.SearchAlleleCallsResponse other) {
    return new org.ga4gh.methods.SearchAlleleCallsResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchAlleleCallsResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchAlleleCallsResponse>
    implements org.apache.avro.data.RecordBuilder<SearchAlleleCallsResponse> {

    private java.util.List<org.ga4gh.models.AlleleCall> alleleCalls;
    private java.lang.CharSequence nextPageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.methods.SearchAlleleCallsResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.methods.SearchAlleleCallsResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.alleleCalls)) {
        this.alleleCalls = data().deepCopy(fields()[0].schema(), other.alleleCalls);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchAlleleCallsResponse instance */
    private Builder(org.ga4gh.methods.SearchAlleleCallsResponse other) {
            super(org.ga4gh.methods.SearchAlleleCallsResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.alleleCalls)) {
        this.alleleCalls = data().deepCopy(fields()[0].schema(), other.alleleCalls);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'alleleCalls' field */
    public java.util.List<org.ga4gh.models.AlleleCall> getAlleleCalls() {
      return alleleCalls;
    }
    
    /** Sets the value of the 'alleleCalls' field */
    public org.ga4gh.methods.SearchAlleleCallsResponse.Builder setAlleleCalls(java.util.List<org.ga4gh.models.AlleleCall> value) {
      validate(fields()[0], value);
      this.alleleCalls = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'alleleCalls' field has been set */
    public boolean hasAlleleCalls() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'alleleCalls' field */
    public org.ga4gh.methods.SearchAlleleCallsResponse.Builder clearAlleleCalls() {
      alleleCalls = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nextPageToken' field */
    public java.lang.CharSequence getNextPageToken() {
      return nextPageToken;
    }
    
    /** Sets the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchAlleleCallsResponse.Builder setNextPageToken(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nextPageToken = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nextPageToken' field has been set */
    public boolean hasNextPageToken() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchAlleleCallsResponse.Builder clearNextPageToken() {
      nextPageToken = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SearchAlleleCallsResponse build() {
      try {
        SearchAlleleCallsResponse record = new SearchAlleleCallsResponse();
        record.alleleCalls = fieldSetFlags()[0] ? this.alleleCalls : (java.util.List<org.ga4gh.models.AlleleCall>) defaultValue(fields()[0]);
        record.nextPageToken = fieldSetFlags()[1] ? this.nextPageToken : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
