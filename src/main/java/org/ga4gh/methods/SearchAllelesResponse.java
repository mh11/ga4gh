/*
 * Copyright 2015 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;  
@SuppressWarnings("all")
/** This is the response from `POST /alleles/search` expressed as JSON. */
@org.apache.avro.specific.AvroGenerated
public class SearchAllelesResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchAllelesResponse\",\"namespace\":\"org.ga4gh.methods\",\"doc\":\"This is the response from `POST /alleles/search` expressed as JSON.\",\"fields\":[{\"name\":\"alleles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Allele\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"`Allele`s are the key component of the \\\"allelic\\\" model of variation: they are\\nsingle objects that are present in some copy number.\\n\\nAn `Allele` is a contiguous piece of sequence that we will want to say is\\npresent (in general at some copy number) or absent in a sample. Very often it\\nwill just be a single `Segment` covering the entirety of a novel sequence, but\\nit is also common for it to be a mix of `Segment`s on reference and novel\\nsequences, or in general to be any contiguous path through the augmented\\nsequence graph.\\n\\n`Allele`s belong to `VariantSet`s. `Allele`s can also be used to represent the\\nreference and alternate alleles of `Variant`s.\\n\\nNote that `Path`s cannot follow adjacencies not represented in the augmented\\nsequence graph. For example, if  an `Allele` that spans a novel deletion is\\nrequired, a new empty-string sequence should exist to describe that deletion\\nadjacency, with a `Segment` describing that sequence available through\\n`searchVariantSetSequences()` or `getVariantSetSequence()`.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The ID of this `Allele`. If this `Allele` is one `Segment` consisting of\\n  the entirety of a sequence, this is equal to the ID of that sequence.\"},{\"name\":\"variantSetId\",\"type\":\"string\",\"doc\":\"The ID of the variant set this allele belongs to.\"},{\"name\":\"path\",\"type\":{\"type\":\"record\",\"name\":\"Path\",\"doc\":\"A `Path` is an ordered list of `Segment`s. In general any contiguous path\\nthrough a sequence graph, with no novel adjacencies, can be represented by a\\n`Path`.\",\"fields\":[{\"name\":\"segments\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Segment\",\"doc\":\"A `Segment` is a range on a sequence, possibly including the joins at the\\nsequence's ends. It does not include base data. (The bases for a sequence are\\navailable through the `getSequenceBases()` API call.)\\n\\nIn the sequence \\\"GTGG\\\", the segment starting at index 1 on the forward strand\\nwith length 2 is the \\\"TG\\\" on the forward strand. The length-2 segment starting\\nat index 1 on the reverse strand is \\\"AC\\\", corresponding to the first two base\\npairs of the sequence, or the last two bases of the reverse complement.\",\"fields\":[{\"name\":\"start\",\"type\":{\"type\":\"record\",\"name\":\"Position\",\"doc\":\"A `Position` is a side of a base pair in some already known sequence. A\\n`Position` is represented by a sequence name or ID, a base number on that\\nsequence (0-based), and a `Strand` to indicate the left or right side.\\n\\nFor example, given the sequence \\\"GTGG\\\", the `Position` on that sequence at\\noffset 1 in the forward orientation would be the left side of the T/A base pair.\\nThe base at this `Position` is \\\"T\\\". Alternately, for offset 1 in the reverse\\norientation, the `Position` would be the right side of the T/A base pair, and\\nthe base at the `Position` is \\\"A\\\".\\n\\nOffsets added to a `Position` are interpreted as reading along its strand;\\nadding to a reverse strand position actually subtracts from its `position`\\nmember.\",\"fields\":[{\"name\":\"referenceName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the reference sequence in whatever reference set is being used.\\n  Does not generally include a \\\"chr\\\" prefix, so for example \\\"X\\\" would be used\\n  for the X chromosome.\\n\\n  If `sequenceId` is null, this must not be null.\",\"default\":null},{\"name\":\"sequenceId\",\"type\":[\"null\",\"string\"],\"doc\":\"The ID of the sequence on which the `Position` is located. This may be a\\n  `Reference` sequence, or a novel piece of sequence associated with a\\n  `VariantSet`.\\n\\n  If `referenceName` is null, this must not be null.\\n\\n  If the server supports the \\\"graph\\\" mode, this must not be null.\",\"default\":null},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"The 0-based offset from the start of the forward strand for that sequence.\\n  Genomic positions are non-negative integers less than sequence length.\"},{\"name\":\"strand\",\"type\":{\"type\":\"enum\",\"name\":\"Strand\",\"doc\":\"Indicates the DNA strand associate for some data item.\\n* `POS_STRAND`:  The postive (+) strand.\\n* `NEG_STRAND`: The negative (-) strand.\\n* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.\",\"symbols\":[\"POS_STRAND\",\"NEG_STRAND\",\"NO_STRAND\"]},\"doc\":\"Strand the position is associated with. `POS_STRAND` represents the forward\\n  strand, or equivalently the left side of a base, and `NEG_STRAND` represents\\n  the reverse strand, or equivalently the right side of a base.\"}]},\"doc\":\"The sequence ID and start index of this `Segment`. This base is always\\n  included in the segment, regardless of orientation.\"},{\"name\":\"length\",\"type\":\"long\",\"doc\":\"The length of this `Segment`'s sequence. If `start` is on the forward strand,\\n  the `Segment` contains the range [`start.position`, `start.position` +\\n  `length`). If `start` is on the reverse strand, the `Segment` contains the\\n  range (`start.position` - `length`, `start.position`]. This is equivalent to\\n  starting from the side indicated by `start`, and traversing through that base\\n  out to the specified length.\"},{\"name\":\"startJoin\",\"type\":[\"null\",\"Position\"],\"doc\":\"Start and end `Position`s where this `Segment` attaches to other sequences.\\n  Note that the segmentId for start and end might not be the same. The\\n  `Segment`s covering the sequences onto which this `Segment` is joined are\\n  called its \\\"parents\\\", while this segment is a \\\"child\\\".\\n\\n  Joins may occur on the outer sides of the terminal bases in a sequence: the\\n  left side of the base at index 0, and the right side of the base with maximum\\n  index. These are the \\\"terminal sides\\\" of the sequence. `startJoin` is the join\\n  on the side indicated by `start`, and may only be set if that side is a\\n  terminal side. Similarly, `endJoin` is the join on the opposite side of the\\n  piece of sequence selected by the segment, and may only be set if that side is\\n  a terminal side. The value of `startJoin` or `endJoin`, if set, is the side to\\n  which the corresponding side of this `Sequence` is connected.\",\"default\":null},{\"name\":\"endJoin\",\"type\":[\"null\",\"Position\"],\"default\":null}]}},\"doc\":\"We require that one of each consecutive pair of `Segment`s in a `Path` be\\n  joined onto the other. `Segment`s appear in the order in which they occur when\\n  walking the path from one end to the other.\",\"default\":[]}]},\"doc\":\"The ordered and oriented `Segment`s of DNA that this `Allele` represents.\\n  Note that a `Segment` in this `Path` that is 0-length represents the\\n  adjacency immediately before the named base.\\n\\n  `Segment`s on this `Path` are on either `Reference` sequences, or sequences\\n  available through the `getVariantSetSequence()` API call.\"}]}},\"doc\":\"The list of matching alleles. An `Allele` should be returned if a `Segment`\\n  in its `Path` overlaps with the specified range.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",\"string\"],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The list of matching alleles. An `Allele` should be returned if a `Segment`
  in its `Path` overlaps with the specified range. */
   private java.util.List<org.ga4gh.models.Allele> alleles;
  /** The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results. */
   private java.lang.CharSequence nextPageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchAllelesResponse() {}

  /**
   * All-args constructor.
   */
  public SearchAllelesResponse(java.util.List<org.ga4gh.models.Allele> alleles, java.lang.CharSequence nextPageToken) {
    this.alleles = alleles;
    this.nextPageToken = nextPageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return alleles;
    case 1: return nextPageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: alleles = (java.util.List<org.ga4gh.models.Allele>)value$; break;
    case 1: nextPageToken = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'alleles' field.
   * The list of matching alleles. An `Allele` should be returned if a `Segment`
  in its `Path` overlaps with the specified range.   */
  public java.util.List<org.ga4gh.models.Allele> getAlleles() {
    return alleles;
  }

  /**
   * Sets the value of the 'alleles' field.
   * The list of matching alleles. An `Allele` should be returned if a `Segment`
  in its `Path` overlaps with the specified range.   * @param value the value to set.
   */
  public void setAlleles(java.util.List<org.ga4gh.models.Allele> value) {
    this.alleles = value;
  }

  /**
   * Gets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   */
  public java.lang.CharSequence getNextPageToken() {
    return nextPageToken;
  }

  /**
   * Sets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   * @param value the value to set.
   */
  public void setNextPageToken(java.lang.CharSequence value) {
    this.nextPageToken = value;
  }

  /** Creates a new SearchAllelesResponse RecordBuilder */
  public static org.ga4gh.methods.SearchAllelesResponse.Builder newBuilder() {
    return new org.ga4gh.methods.SearchAllelesResponse.Builder();
  }
  
  /** Creates a new SearchAllelesResponse RecordBuilder by copying an existing Builder */
  public static org.ga4gh.methods.SearchAllelesResponse.Builder newBuilder(org.ga4gh.methods.SearchAllelesResponse.Builder other) {
    return new org.ga4gh.methods.SearchAllelesResponse.Builder(other);
  }
  
  /** Creates a new SearchAllelesResponse RecordBuilder by copying an existing SearchAllelesResponse instance */
  public static org.ga4gh.methods.SearchAllelesResponse.Builder newBuilder(org.ga4gh.methods.SearchAllelesResponse other) {
    return new org.ga4gh.methods.SearchAllelesResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchAllelesResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchAllelesResponse>
    implements org.apache.avro.data.RecordBuilder<SearchAllelesResponse> {

    private java.util.List<org.ga4gh.models.Allele> alleles;
    private java.lang.CharSequence nextPageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.methods.SearchAllelesResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.methods.SearchAllelesResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.alleles)) {
        this.alleles = data().deepCopy(fields()[0].schema(), other.alleles);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchAllelesResponse instance */
    private Builder(org.ga4gh.methods.SearchAllelesResponse other) {
            super(org.ga4gh.methods.SearchAllelesResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.alleles)) {
        this.alleles = data().deepCopy(fields()[0].schema(), other.alleles);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'alleles' field */
    public java.util.List<org.ga4gh.models.Allele> getAlleles() {
      return alleles;
    }
    
    /** Sets the value of the 'alleles' field */
    public org.ga4gh.methods.SearchAllelesResponse.Builder setAlleles(java.util.List<org.ga4gh.models.Allele> value) {
      validate(fields()[0], value);
      this.alleles = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'alleles' field has been set */
    public boolean hasAlleles() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'alleles' field */
    public org.ga4gh.methods.SearchAllelesResponse.Builder clearAlleles() {
      alleles = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nextPageToken' field */
    public java.lang.CharSequence getNextPageToken() {
      return nextPageToken;
    }
    
    /** Sets the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchAllelesResponse.Builder setNextPageToken(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nextPageToken = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nextPageToken' field has been set */
    public boolean hasNextPageToken() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchAllelesResponse.Builder clearNextPageToken() {
      nextPageToken = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SearchAllelesResponse build() {
      try {
        SearchAllelesResponse record = new SearchAllelesResponse();
        record.alleles = fieldSetFlags()[0] ? this.alleles : (java.util.List<org.ga4gh.models.Allele>) defaultValue(fields()[0]);
        record.nextPageToken = fieldSetFlags()[1] ? this.nextPageToken : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
