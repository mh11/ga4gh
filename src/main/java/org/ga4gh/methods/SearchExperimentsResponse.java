/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;  
@SuppressWarnings("all")
/** This is the response from `POST /experiments/search` expressed as JSON. */
@org.apache.avro.specific.AvroGenerated
public class SearchExperimentsResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchExperimentsResponse\",\"namespace\":\"org.ga4gh.methods\",\"doc\":\"This is the response from `POST /experiments/search` expressed as JSON.\",\"fields\":[{\"name\":\"experiments\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Experiment\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An experimental preparation of a `Sample`.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The experiment UUID. This is globally unique.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the experiment.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A description of the experiment.\",\"default\":null},{\"name\":\"created\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this experiment was created in milliseconds from the epoch.\",\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this experiment was last updated in milliseconds\\n  from the epoch.\",\"default\":null},{\"name\":\"runDate\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this experiment was performed in milliseconds\\n  from the epoch.\",\"default\":null},{\"name\":\"molecule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The molecule examined in this experiment. (e.g. genomics DNA, total RNA)\",\"default\":null},{\"name\":\"strategy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The experiment technique or strategy applied to the sample.\\n  (e.g. whole genome sequencing, RNA-seq, RIP-seq)\",\"default\":null},{\"name\":\"selection\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The method used to enrich the target. (e.g. immunoprecipitation, size\\n  fractionation, MNase digestion)\",\"default\":null},{\"name\":\"library\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the library used as part of this experiment.\",\"default\":null},{\"name\":\"libraryLayout\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The configuration of sequenced reads. (e.g. Single or Paired)\",\"default\":null},{\"name\":\"instrumentModel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The instrument model used as part of this experiment.\\n    This maps to sequencing technology in BAM.\"},{\"name\":\"instrumentDataFile\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The data file generated by the instrument.\\n  TODO: This isn't actually a file is it?\\n  Should this be `instrumentData` instead?\",\"default\":null},{\"name\":\"sequencingCenter\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The sequencing center used as part of this experiment.\"},{\"name\":\"platformUnit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The platform unit used as part of this experiment. This is a flowcell-barcode\\n  or slide unique identifier.\",\"default\":null},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional experiment information.\",\"default\":{}}]}},\"doc\":\"The list of matching experiments.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The list of matching experiments. */
   private java.util.List<org.ga4gh.models.Experiment> experiments;
  /** The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results. */
   private java.lang.String nextPageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchExperimentsResponse() {}

  /**
   * All-args constructor.
   */
  public SearchExperimentsResponse(java.util.List<org.ga4gh.models.Experiment> experiments, java.lang.String nextPageToken) {
    this.experiments = experiments;
    this.nextPageToken = nextPageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return experiments;
    case 1: return nextPageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: experiments = (java.util.List<org.ga4gh.models.Experiment>)value$; break;
    case 1: nextPageToken = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'experiments' field.
   * The list of matching experiments.   */
  public java.util.List<org.ga4gh.models.Experiment> getExperiments() {
    return experiments;
  }

  /**
   * Sets the value of the 'experiments' field.
   * The list of matching experiments.   * @param value the value to set.
   */
  public void setExperiments(java.util.List<org.ga4gh.models.Experiment> value) {
    this.experiments = value;
  }

  /**
   * Gets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   */
  public java.lang.String getNextPageToken() {
    return nextPageToken;
  }

  /**
   * Sets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   * @param value the value to set.
   */
  public void setNextPageToken(java.lang.String value) {
    this.nextPageToken = value;
  }

  /** Creates a new SearchExperimentsResponse RecordBuilder */
  public static org.ga4gh.methods.SearchExperimentsResponse.Builder newBuilder() {
    return new org.ga4gh.methods.SearchExperimentsResponse.Builder();
  }
  
  /** Creates a new SearchExperimentsResponse RecordBuilder by copying an existing Builder */
  public static org.ga4gh.methods.SearchExperimentsResponse.Builder newBuilder(org.ga4gh.methods.SearchExperimentsResponse.Builder other) {
    return new org.ga4gh.methods.SearchExperimentsResponse.Builder(other);
  }
  
  /** Creates a new SearchExperimentsResponse RecordBuilder by copying an existing SearchExperimentsResponse instance */
  public static org.ga4gh.methods.SearchExperimentsResponse.Builder newBuilder(org.ga4gh.methods.SearchExperimentsResponse other) {
    return new org.ga4gh.methods.SearchExperimentsResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchExperimentsResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchExperimentsResponse>
    implements org.apache.avro.data.RecordBuilder<SearchExperimentsResponse> {

    private java.util.List<org.ga4gh.models.Experiment> experiments;
    private java.lang.String nextPageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.methods.SearchExperimentsResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.methods.SearchExperimentsResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.experiments)) {
        this.experiments = data().deepCopy(fields()[0].schema(), other.experiments);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchExperimentsResponse instance */
    private Builder(org.ga4gh.methods.SearchExperimentsResponse other) {
            super(org.ga4gh.methods.SearchExperimentsResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.experiments)) {
        this.experiments = data().deepCopy(fields()[0].schema(), other.experiments);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'experiments' field */
    public java.util.List<org.ga4gh.models.Experiment> getExperiments() {
      return experiments;
    }
    
    /** Sets the value of the 'experiments' field */
    public org.ga4gh.methods.SearchExperimentsResponse.Builder setExperiments(java.util.List<org.ga4gh.models.Experiment> value) {
      validate(fields()[0], value);
      this.experiments = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'experiments' field has been set */
    public boolean hasExperiments() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'experiments' field */
    public org.ga4gh.methods.SearchExperimentsResponse.Builder clearExperiments() {
      experiments = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nextPageToken' field */
    public java.lang.String getNextPageToken() {
      return nextPageToken;
    }
    
    /** Sets the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchExperimentsResponse.Builder setNextPageToken(java.lang.String value) {
      validate(fields()[1], value);
      this.nextPageToken = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nextPageToken' field has been set */
    public boolean hasNextPageToken() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchExperimentsResponse.Builder clearNextPageToken() {
      nextPageToken = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SearchExperimentsResponse build() {
      try {
        SearchExperimentsResponse record = new SearchExperimentsResponse();
        record.experiments = fieldSetFlags()[0] ? this.experiments : (java.util.List<org.ga4gh.models.Experiment>) defaultValue(fields()[0]);
        record.nextPageToken = fieldSetFlags()[1] ? this.nextPageToken : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
