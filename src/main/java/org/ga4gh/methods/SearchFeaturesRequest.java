/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;  
@SuppressWarnings("all")
/** This request maps to the body of `POST /features/search` as JSON. */
@org.apache.avro.specific.AvroGenerated
public class SearchFeaturesRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchFeaturesRequest\",\"namespace\":\"org.ga4gh.methods\",\"doc\":\"This request maps to the body of `POST /features/search` as JSON.\",\"fields\":[{\"name\":\"featureSetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The annotation set to search within. Either `featureSetId` or\\n    `parentId` must be non-empty.\"},{\"name\":\"parentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Restricts the search to direct children of the given parent `feature`\\n    ID. Either `featureSetId` or `parentId` must be non-empty.\"},{\"name\":\"referenceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Only return features on the reference with this name \\n    (matched to literal reference name as imported from the GFF3).\"},{\"name\":\"start\",\"type\":\"long\",\"doc\":\"Required. The beginning of the window (0-based, inclusive) for which\\n    overlapping features should be returned.  Genomic positions are\\n    non-negative integers less than reference length.  Requests spanning the\\n    join of circular genomes are represented as two requests one on each side\\n    of the join (position 0).\"},{\"name\":\"end\",\"type\":\"long\",\"doc\":\"Required. The end of the window (0-based, exclusive) for which overlapping\\n    features should be returned.\"},{\"name\":\"featureTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"If specified, this query matches only annotations whose `featureType`\\n    matches one of the provided ontology terms.\",\"default\":[]},{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n    If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n    To get the next page of results, set this parameter to the value of\\n    `nextPageToken` from the previous response.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The annotation set to search within. Either `featureSetId` or
    `parentId` must be non-empty. */
   private java.lang.String featureSetId;
  /** Restricts the search to direct children of the given parent `feature`
    ID. Either `featureSetId` or `parentId` must be non-empty. */
   private java.lang.String parentId;
  /** Only return features on the reference with this name 
    (matched to literal reference name as imported from the GFF3). */
   private java.lang.String referenceName;
  /** Required. The beginning of the window (0-based, inclusive) for which
    overlapping features should be returned.  Genomic positions are
    non-negative integers less than reference length.  Requests spanning the
    join of circular genomes are represented as two requests one on each side
    of the join (position 0). */
   private long start;
  /** Required. The end of the window (0-based, exclusive) for which overlapping
    features should be returned. */
   private long end;
  /** If specified, this query matches only annotations whose `featureType`
    matches one of the provided ontology terms. */
   private java.util.List<java.lang.String> featureTypes;
  /** Specifies the maximum number of results to return in a single page.
    If unspecified, a system default will be used. */
   private java.lang.Integer pageSize;
  /** The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response. */
   private java.lang.String pageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchFeaturesRequest() {}

  /**
   * All-args constructor.
   */
  public SearchFeaturesRequest(java.lang.String featureSetId, java.lang.String parentId, java.lang.String referenceName, java.lang.Long start, java.lang.Long end, java.util.List<java.lang.String> featureTypes, java.lang.Integer pageSize, java.lang.String pageToken) {
    this.featureSetId = featureSetId;
    this.parentId = parentId;
    this.referenceName = referenceName;
    this.start = start;
    this.end = end;
    this.featureTypes = featureTypes;
    this.pageSize = pageSize;
    this.pageToken = pageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return featureSetId;
    case 1: return parentId;
    case 2: return referenceName;
    case 3: return start;
    case 4: return end;
    case 5: return featureTypes;
    case 6: return pageSize;
    case 7: return pageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: featureSetId = (java.lang.String)value$; break;
    case 1: parentId = (java.lang.String)value$; break;
    case 2: referenceName = (java.lang.String)value$; break;
    case 3: start = (java.lang.Long)value$; break;
    case 4: end = (java.lang.Long)value$; break;
    case 5: featureTypes = (java.util.List<java.lang.String>)value$; break;
    case 6: pageSize = (java.lang.Integer)value$; break;
    case 7: pageToken = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'featureSetId' field.
   * The annotation set to search within. Either `featureSetId` or
    `parentId` must be non-empty.   */
  public java.lang.String getFeatureSetId() {
    return featureSetId;
  }

  /**
   * Sets the value of the 'featureSetId' field.
   * The annotation set to search within. Either `featureSetId` or
    `parentId` must be non-empty.   * @param value the value to set.
   */
  public void setFeatureSetId(java.lang.String value) {
    this.featureSetId = value;
  }

  /**
   * Gets the value of the 'parentId' field.
   * Restricts the search to direct children of the given parent `feature`
    ID. Either `featureSetId` or `parentId` must be non-empty.   */
  public java.lang.String getParentId() {
    return parentId;
  }

  /**
   * Sets the value of the 'parentId' field.
   * Restricts the search to direct children of the given parent `feature`
    ID. Either `featureSetId` or `parentId` must be non-empty.   * @param value the value to set.
   */
  public void setParentId(java.lang.String value) {
    this.parentId = value;
  }

  /**
   * Gets the value of the 'referenceName' field.
   * Only return features on the reference with this name 
    (matched to literal reference name as imported from the GFF3).   */
  public java.lang.String getReferenceName() {
    return referenceName;
  }

  /**
   * Sets the value of the 'referenceName' field.
   * Only return features on the reference with this name 
    (matched to literal reference name as imported from the GFF3).   * @param value the value to set.
   */
  public void setReferenceName(java.lang.String value) {
    this.referenceName = value;
  }

  /**
   * Gets the value of the 'start' field.
   * Required. The beginning of the window (0-based, inclusive) for which
    overlapping features should be returned.  Genomic positions are
    non-negative integers less than reference length.  Requests spanning the
    join of circular genomes are represented as two requests one on each side
    of the join (position 0).   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * Required. The beginning of the window (0-based, inclusive) for which
    overlapping features should be returned.  Genomic positions are
    non-negative integers less than reference length.  Requests spanning the
    join of circular genomes are represented as two requests one on each side
    of the join (position 0).   * @param value the value to set.
   */
  public void setStart(java.lang.Long value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   * Required. The end of the window (0-based, exclusive) for which overlapping
    features should be returned.   */
  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * Required. The end of the window (0-based, exclusive) for which overlapping
    features should be returned.   * @param value the value to set.
   */
  public void setEnd(java.lang.Long value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'featureTypes' field.
   * If specified, this query matches only annotations whose `featureType`
    matches one of the provided ontology terms.   */
  public java.util.List<java.lang.String> getFeatureTypes() {
    return featureTypes;
  }

  /**
   * Sets the value of the 'featureTypes' field.
   * If specified, this query matches only annotations whose `featureType`
    matches one of the provided ontology terms.   * @param value the value to set.
   */
  public void setFeatureTypes(java.util.List<java.lang.String> value) {
    this.featureTypes = value;
  }

  /**
   * Gets the value of the 'pageSize' field.
   * Specifies the maximum number of results to return in a single page.
    If unspecified, a system default will be used.   */
  public java.lang.Integer getPageSize() {
    return pageSize;
  }

  /**
   * Sets the value of the 'pageSize' field.
   * Specifies the maximum number of results to return in a single page.
    If unspecified, a system default will be used.   * @param value the value to set.
   */
  public void setPageSize(java.lang.Integer value) {
    this.pageSize = value;
  }

  /**
   * Gets the value of the 'pageToken' field.
   * The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.   */
  public java.lang.String getPageToken() {
    return pageToken;
  }

  /**
   * Sets the value of the 'pageToken' field.
   * The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.   * @param value the value to set.
   */
  public void setPageToken(java.lang.String value) {
    this.pageToken = value;
  }

  /** Creates a new SearchFeaturesRequest RecordBuilder */
  public static org.ga4gh.methods.SearchFeaturesRequest.Builder newBuilder() {
    return new org.ga4gh.methods.SearchFeaturesRequest.Builder();
  }
  
  /** Creates a new SearchFeaturesRequest RecordBuilder by copying an existing Builder */
  public static org.ga4gh.methods.SearchFeaturesRequest.Builder newBuilder(org.ga4gh.methods.SearchFeaturesRequest.Builder other) {
    return new org.ga4gh.methods.SearchFeaturesRequest.Builder(other);
  }
  
  /** Creates a new SearchFeaturesRequest RecordBuilder by copying an existing SearchFeaturesRequest instance */
  public static org.ga4gh.methods.SearchFeaturesRequest.Builder newBuilder(org.ga4gh.methods.SearchFeaturesRequest other) {
    return new org.ga4gh.methods.SearchFeaturesRequest.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchFeaturesRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchFeaturesRequest>
    implements org.apache.avro.data.RecordBuilder<SearchFeaturesRequest> {

    private java.lang.String featureSetId;
    private java.lang.String parentId;
    private java.lang.String referenceName;
    private long start;
    private long end;
    private java.util.List<java.lang.String> featureTypes;
    private java.lang.Integer pageSize;
    private java.lang.String pageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.methods.SearchFeaturesRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.methods.SearchFeaturesRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.featureSetId)) {
        this.featureSetId = data().deepCopy(fields()[0].schema(), other.featureSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[2].schema(), other.referenceName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start)) {
        this.start = data().deepCopy(fields()[3].schema(), other.start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end)) {
        this.end = data().deepCopy(fields()[4].schema(), other.end);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.featureTypes)) {
        this.featureTypes = data().deepCopy(fields()[5].schema(), other.featureTypes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pageSize)) {
        this.pageSize = data().deepCopy(fields()[6].schema(), other.pageSize);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pageToken)) {
        this.pageToken = data().deepCopy(fields()[7].schema(), other.pageToken);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchFeaturesRequest instance */
    private Builder(org.ga4gh.methods.SearchFeaturesRequest other) {
            super(org.ga4gh.methods.SearchFeaturesRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.featureSetId)) {
        this.featureSetId = data().deepCopy(fields()[0].schema(), other.featureSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[2].schema(), other.referenceName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start)) {
        this.start = data().deepCopy(fields()[3].schema(), other.start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end)) {
        this.end = data().deepCopy(fields()[4].schema(), other.end);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.featureTypes)) {
        this.featureTypes = data().deepCopy(fields()[5].schema(), other.featureTypes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pageSize)) {
        this.pageSize = data().deepCopy(fields()[6].schema(), other.pageSize);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pageToken)) {
        this.pageToken = data().deepCopy(fields()[7].schema(), other.pageToken);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'featureSetId' field */
    public java.lang.String getFeatureSetId() {
      return featureSetId;
    }
    
    /** Sets the value of the 'featureSetId' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setFeatureSetId(java.lang.String value) {
      validate(fields()[0], value);
      this.featureSetId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'featureSetId' field has been set */
    public boolean hasFeatureSetId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'featureSetId' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearFeatureSetId() {
      featureSetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'parentId' field */
    public java.lang.String getParentId() {
      return parentId;
    }
    
    /** Sets the value of the 'parentId' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setParentId(java.lang.String value) {
      validate(fields()[1], value);
      this.parentId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'parentId' field has been set */
    public boolean hasParentId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'parentId' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearParentId() {
      parentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'referenceName' field */
    public java.lang.String getReferenceName() {
      return referenceName;
    }
    
    /** Sets the value of the 'referenceName' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setReferenceName(java.lang.String value) {
      validate(fields()[2], value);
      this.referenceName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceName' field has been set */
    public boolean hasReferenceName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'referenceName' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearReferenceName() {
      referenceName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Long getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setStart(long value) {
      validate(fields()[3], value);
      this.start = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'start' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearStart() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Long getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setEnd(long value) {
      validate(fields()[4], value);
      this.end = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'end' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearEnd() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'featureTypes' field */
    public java.util.List<java.lang.String> getFeatureTypes() {
      return featureTypes;
    }
    
    /** Sets the value of the 'featureTypes' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setFeatureTypes(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.featureTypes = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'featureTypes' field has been set */
    public boolean hasFeatureTypes() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'featureTypes' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearFeatureTypes() {
      featureTypes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'pageSize' field */
    public java.lang.Integer getPageSize() {
      return pageSize;
    }
    
    /** Sets the value of the 'pageSize' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setPageSize(java.lang.Integer value) {
      validate(fields()[6], value);
      this.pageSize = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'pageSize' field has been set */
    public boolean hasPageSize() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'pageSize' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearPageSize() {
      pageSize = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'pageToken' field */
    public java.lang.String getPageToken() {
      return pageToken;
    }
    
    /** Sets the value of the 'pageToken' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder setPageToken(java.lang.String value) {
      validate(fields()[7], value);
      this.pageToken = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'pageToken' field has been set */
    public boolean hasPageToken() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'pageToken' field */
    public org.ga4gh.methods.SearchFeaturesRequest.Builder clearPageToken() {
      pageToken = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public SearchFeaturesRequest build() {
      try {
        SearchFeaturesRequest record = new SearchFeaturesRequest();
        record.featureSetId = fieldSetFlags()[0] ? this.featureSetId : (java.lang.String) defaultValue(fields()[0]);
        record.parentId = fieldSetFlags()[1] ? this.parentId : (java.lang.String) defaultValue(fields()[1]);
        record.referenceName = fieldSetFlags()[2] ? this.referenceName : (java.lang.String) defaultValue(fields()[2]);
        record.start = fieldSetFlags()[3] ? this.start : (java.lang.Long) defaultValue(fields()[3]);
        record.end = fieldSetFlags()[4] ? this.end : (java.lang.Long) defaultValue(fields()[4]);
        record.featureTypes = fieldSetFlags()[5] ? this.featureTypes : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        record.pageSize = fieldSetFlags()[6] ? this.pageSize : (java.lang.Integer) defaultValue(fields()[6]);
        record.pageToken = fieldSetFlags()[7] ? this.pageToken : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
