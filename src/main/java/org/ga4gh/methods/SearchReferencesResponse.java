/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;  
@SuppressWarnings("all")
/** This is the response from `POST /references/search` expressed as JSON. */
@org.apache.avro.specific.AvroGenerated
public class SearchReferencesResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchReferencesResponse\",\"namespace\":\"org.ga4gh.methods\",\"doc\":\"This is the response from `POST /references/search` expressed as JSON.\",\"fields\":[{\"name\":\"references\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Reference\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A `Reference` is a canonical assembled contig, intended to act as a\\nreference coordinate space for other genomic annotations. A single\\n`Reference` might represent the human chromosome 1, for instance.\\n\\n`Reference`s are designed to be immutable. When extending a `ReferenceSet` with\\nnew `Reference`s, the existing `References` should not be changed. Newly added\\n`Reference` sequences may be children of existing `Reference` sequences, but\\nexisting `Reference` sequences should not be made to be children of newly added\\n`Reference` sequences.\\n\\nAn API server that supports the \\\"graph\\\" mode must always set the `segment`\\nfield. An API server that supports the \\\"classic\\\" mode must always set the `id`\\nfield. New client and server implementations should prefer the \\\"graph\\\" mode.\",\"fields\":[{\"name\":\"segment\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Segment\",\"doc\":\"A `Segment` is a range on a sequence, possibly including the joins at the\\nsequence's ends. It does not include base data. (The bases for a sequence are\\navailable through the `getSequenceBases()` API call.)\\n\\nIn the sequence \\\"GTGG\\\", the segment starting at index 1 on the forward strand\\nwith length 2 is the \\\"TG\\\" on the forward strand. The length-2 segment starting\\nat index 1 on the reverse strand is \\\"AC\\\", corresponding to the first two base\\npairs of the sequence, or the last two bases of the reverse complement.\",\"fields\":[{\"name\":\"start\",\"type\":{\"type\":\"record\",\"name\":\"Position\",\"doc\":\"A `Position` is a side of a base pair in some already known sequence. A\\n`Position` is represented by a sequence name or ID, a base number on that\\nsequence (0-based), and a `Strand` to indicate the left or right side.\\n\\nFor example, given the sequence \\\"GTGG\\\", the `Position` on that sequence at\\noffset 1 in the forward orientation would be the left side of the T/A base pair.\\nThe base at this `Position` is \\\"T\\\". Alternately, for offset 1 in the reverse\\norientation, the `Position` would be the right side of the T/A base pair, and\\nthe base at the `Position` is \\\"A\\\".\\n\\nOffsets added to a `Position` are interpreted as reading along its strand;\\nadding to a reverse strand position actually subtracts from its `position`\\nmember.\",\"fields\":[{\"name\":\"referenceName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the reference sequence in whatever reference set is being used.\\n  Does not generally include a \\\"chr\\\" prefix, so for example \\\"X\\\" would be used\\n  for the X chromosome.\\n\\n  If `sequenceId` is null, this must not be null.\",\"default\":null},{\"name\":\"sequenceId\",\"type\":[\"null\",\"string\"],\"doc\":\"The ID of the sequence on which the `Position` is located. This may be a\\n  `Reference` sequence, or a novel piece of sequence associated with a\\n  `VariantSet`.\\n\\n  If `referenceName` is null, this must not be null.\\n\\n  If the server supports the \\\"graph\\\" mode, this must not be null.\",\"default\":null},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"The 0-based offset from the start of the forward strand for that sequence.\\n  Genomic positions are non-negative integers less than sequence length.\"},{\"name\":\"strand\",\"type\":{\"type\":\"enum\",\"name\":\"Strand\",\"doc\":\"Indicates the DNA strand associate for some data item.\\n* `POS_STRAND`:  The postive (+) strand.\\n* `NEG_STRAND`: The negative (-) strand.\\n* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.\",\"symbols\":[\"POS_STRAND\",\"NEG_STRAND\",\"NO_STRAND\"]},\"doc\":\"Strand the position is associated with. `POS_STRAND` represents the forward\\n  strand, or equivalently the left side of a base, and `NEG_STRAND` represents\\n  the reverse strand, or equivalently the right side of a base.\"}]},\"doc\":\"The sequence ID and start index of this `Segment`. This base is always\\n  included in the segment, regardless of orientation.\"},{\"name\":\"length\",\"type\":\"long\",\"doc\":\"The length of this `Segment`'s sequence. If `start` is on the forward strand,\\n  the `Segment` contains the range [`start.position`, `start.position` +\\n  `length`). If `start` is on the reverse strand, the `Segment` contains the\\n  range (`start.position` - `length`, `start.position`]. This is equivalent to\\n  starting from the side indicated by `start`, and traversing through that base\\n  out to the specified length.\"},{\"name\":\"startJoin\",\"type\":[\"null\",\"Position\"],\"doc\":\"Start and end `Position`s where this `Segment` attaches to other sequences.\\n  Note that the segmentId for start and end might not be the same. The\\n  `Segment`s covering the sequences onto which this `Segment` is joined are\\n  called its \\\"parents\\\", while this segment is a \\\"child\\\".\\n\\n  Joins may occur on the outer sides of the terminal bases in a sequence: the\\n  left side of the base at index 0, and the right side of the base with maximum\\n  index. These are the \\\"terminal sides\\\" of the sequence. `startJoin` is the join\\n  on the side indicated by `start`, and may only be set if that side is a\\n  terminal side. Similarly, `endJoin` is the join on the opposite side of the\\n  piece of sequence selected by the segment, and may only be set if that side is\\n  a terminal side. The value of `startJoin` or `endJoin`, if set, is the side to\\n  which the corresponding side of this `Sequence` is connected.\",\"default\":null},{\"name\":\"endJoin\",\"type\":[\"null\",\"Position\"],\"default\":null}]}],\"doc\":\"The `Segment` describing this `Reference`'s sequence in the `ReferenceSet`'s\\n  sequence graph.\\n\\n  The `Segment` will generally cover the entirety of the sequence, but may be\\n  shorter if only a subrange of a sequence is to be included in the\\n  `ReferenceSet`.\\n\\n  The sequence ID of the `Segment` is equal to ID of the `Reference`. The\\n  actual sequence bases for a `Reference` are available through the\\n  `getSequenceBases()` API call on this `Reference`'s sequence.\\n\\n  If the API server supports the \\\"graph\\\" mode, this field must not be null.\",\"default\":null},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"The reference ID. Unique within the repository. A sequence with this ID\\n  exists, containing the reference's bases. If null, `segment` must be set, and\\n  the sequence ID field from `segment` is used.\\n\\n  If the API server supports the \\\"classic\\\" mode, this field must not be null.\",\"default\":null},{\"name\":\"length\",\"type\":\"long\",\"doc\":\"The length of this reference's sequence.\"},{\"name\":\"md5checksum\",\"type\":\"string\",\"doc\":\"The MD5 checksum uniquely representing this `Reference` and its position in\\n  the `ReferenceSet`'s sequence graph, as a lower-case hexadecimal string.\\n\\n  If `segment.startJoin` and `segment.endJoin` are both null, or `segment`\\n  itself is null, this is the MD5 of the upper-case sequence excluding all\\n  whitespace characters (this is equivalent to SQ:M5 in SAM).\\n\\n  Otherwise, this hash is to be computed as follows:\\n\\n  * Initialize a new MD5 hashing state.\\n\\n  * Add in the the MD5 of the upper-case sequence excluding all whitespace\\n  characters, as a lower-case hexadecimal string.\\n\\n  * If `segment.startJoin` is null, add in 32 '0' characters. Otherwise add in\\n  the `md5checksum` of the `Reference` indicated by `segment.startJoin`,\\n  `segment.startJoin.position` as a decimal string, and\\n  `segment.startJoin.strand` as either \\\"+\\\" or \\\"-\\\".\\n\\n  * If `segment.endJoin` is null, add in 32 '0' characters. Otherwise add in\\n  the `md5checksum` of the `Reference` indicated by `segment.endJoin`,\\n  `segment.endJoin.position` as a decimal string, and `segment.endJoin.strand`\\n  as either \\\"+\\\" or \\\"-\\\".\\n\\n  * Compute the digest and represent it as a lower-case hexadecimal string.\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of this reference. (e.g. '22') Also see the\\n  `names` field on the parent `ReferenceSet`.\"},{\"name\":\"sourceURI\",\"type\":[\"null\",\"string\"],\"doc\":\"The URI from which the sequence was obtained.\\n  Specifies a FASTA format file/string with one name, sequence pair.\\n  In most ","cases, clients should call the `getSequenceBases()` or\\n  `getReferenceBases()` methods to obtain sequence bases for a `Reference`\\n  instead of attempting to retrieve this URI.\",\"default\":null},{\"name\":\"sourceAccessions\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally\\n  with a version number, e.g. `GCF_000001405.26`.\"},{\"name\":\"isDerived\",\"type\":\"boolean\",\"doc\":\"A sequence X is said to be derived from source sequence Y, if X and Y\\n  are of the same length and the per-base sequence divergence at A/C/G/T bases\\n  is sufficiently small. Two sequences derived from the same official\\n  sequence share the same coordinates and annotations, and\\n  can be replaced with the official sequence for certain use cases.\",\"default\":false},{\"name\":\"sourceDivergence\",\"type\":[\"null\",\"float\"],\"doc\":\"The `sourceDivergence` is the fraction of non-indel bases that do not match the\\n  reference this record was derived from.\",\"default\":null},{\"name\":\"ncbiTaxonId\",\"type\":[\"null\",\"int\"],\"doc\":\"ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human).\",\"default\":null}]}},\"doc\":\"The list of matching references.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",\"string\"],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The list of matching references. */
   private java.util.List<org.ga4gh.models.Reference> references;
  /** The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results. */
   private java.lang.CharSequence nextPageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchReferencesResponse() {}

  /**
   * All-args constructor.
   */
  public SearchReferencesResponse(java.util.List<org.ga4gh.models.Reference> references, java.lang.CharSequence nextPageToken) {
    this.references = references;
    this.nextPageToken = nextPageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return references;
    case 1: return nextPageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: references = (java.util.List<org.ga4gh.models.Reference>)value$; break;
    case 1: nextPageToken = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'references' field.
   * The list of matching references.   */
  public java.util.List<org.ga4gh.models.Reference> getReferences() {
    return references;
  }

  /**
   * Sets the value of the 'references' field.
   * The list of matching references.   * @param value the value to set.
   */
  public void setReferences(java.util.List<org.ga4gh.models.Reference> value) {
    this.references = value;
  }

  /**
   * Gets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   */
  public java.lang.CharSequence getNextPageToken() {
    return nextPageToken;
  }

  /**
   * Sets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   * @param value the value to set.
   */
  public void setNextPageToken(java.lang.CharSequence value) {
    this.nextPageToken = value;
  }

  /** Creates a new SearchReferencesResponse RecordBuilder */
  public static org.ga4gh.methods.SearchReferencesResponse.Builder newBuilder() {
    return new org.ga4gh.methods.SearchReferencesResponse.Builder();
  }
  
  /** Creates a new SearchReferencesResponse RecordBuilder by copying an existing Builder */
  public static org.ga4gh.methods.SearchReferencesResponse.Builder newBuilder(org.ga4gh.methods.SearchReferencesResponse.Builder other) {
    return new org.ga4gh.methods.SearchReferencesResponse.Builder(other);
  }
  
  /** Creates a new SearchReferencesResponse RecordBuilder by copying an existing SearchReferencesResponse instance */
  public static org.ga4gh.methods.SearchReferencesResponse.Builder newBuilder(org.ga4gh.methods.SearchReferencesResponse other) {
    return new org.ga4gh.methods.SearchReferencesResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchReferencesResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchReferencesResponse>
    implements org.apache.avro.data.RecordBuilder<SearchReferencesResponse> {

    private java.util.List<org.ga4gh.models.Reference> references;
    private java.lang.CharSequence nextPageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.methods.SearchReferencesResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.methods.SearchReferencesResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.references)) {
        this.references = data().deepCopy(fields()[0].schema(), other.references);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchReferencesResponse instance */
    private Builder(org.ga4gh.methods.SearchReferencesResponse other) {
            super(org.ga4gh.methods.SearchReferencesResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.references)) {
        this.references = data().deepCopy(fields()[0].schema(), other.references);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'references' field */
    public java.util.List<org.ga4gh.models.Reference> getReferences() {
      return references;
    }
    
    /** Sets the value of the 'references' field */
    public org.ga4gh.methods.SearchReferencesResponse.Builder setReferences(java.util.List<org.ga4gh.models.Reference> value) {
      validate(fields()[0], value);
      this.references = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'references' field has been set */
    public boolean hasReferences() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'references' field */
    public org.ga4gh.methods.SearchReferencesResponse.Builder clearReferences() {
      references = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nextPageToken' field */
    public java.lang.CharSequence getNextPageToken() {
      return nextPageToken;
    }
    
    /** Sets the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchReferencesResponse.Builder setNextPageToken(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nextPageToken = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nextPageToken' field has been set */
    public boolean hasNextPageToken() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nextPageToken' field */
    public org.ga4gh.methods.SearchReferencesResponse.Builder clearNextPageToken() {
      nextPageToken = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SearchReferencesResponse build() {
      try {
        SearchReferencesResponse record = new SearchReferencesResponse();
        record.references = fieldSetFlags()[0] ? this.references : (java.util.List<org.ga4gh.models.Reference>) defaultValue(fields()[0]);
        record.nextPageToken = fieldSetFlags()[1] ? this.nextPageToken : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
