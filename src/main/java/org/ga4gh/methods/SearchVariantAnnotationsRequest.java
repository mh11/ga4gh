/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.methods;  
@SuppressWarnings("all")
/** This request maps to the body of `POST /variantannotations/search` as JSON */
@org.apache.avro.specific.AvroGenerated
public class SearchVariantAnnotationsRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchVariantAnnotationsRequest\",\"namespace\":\"org.ga4gh.methods\",\"doc\":\"This request maps to the body of `POST /variantannotations/search` as JSON\",\"fields\":[{\"name\":\"variantAnnotationSetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Required. The ID of the variant annotation set to search over.\"},{\"name\":\"referenceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only return variants with reference alleles on the reference with this\\n  name. One of this field or `referenceId` or `features` is required.\\n  (case-sensitive, exact match)\",\"default\":null},{\"name\":\"referenceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only return variants with reference alleles on the reference with this\\n  ID. One of this field or `referenceName` or `features` is required.\",\"default\":null},{\"name\":\"start\",\"type\":\"long\",\"doc\":\"Required if referenceName or referenceId supplied.\\n  The beginning of the window (0-based, inclusive) for which variants with\\n  overlapping reference alleles should be returned.\\n  Genomic positions are non-negative integers less than reference length.\\n  Requests spanning the join of circular genomes are represented as\\n  two requests one on each side of the join (position 0).\"},{\"name\":\"end\",\"type\":\"long\",\"doc\":\"Required if referenceName or referenceId supplied.\\n  The end of the window (0-based, exclusive) for which variants with\\n  overlapping reference alleles should be returned.\"},{\"name\":\"effects\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OntologyTerm\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An ontology term describing an attribute. (e.g. the phenotype attribute\\n  'polydactyly' from HPO)\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Ontology source identifier - the identifier, a CURIE (preferred) or\\n  PURL for an ontology source e.g. http://purl.obolibrary.org/obo/hp.obo\\n  It differs from the standard GA4GH schema's :ref:`id <apidesign_object_ids>`\\n  in that it is a URI pointing to an information resource outside of the scope\\n  of the schema or its resource implementation.\"},{\"name\":\"term\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ontology term - the representation the id is pointing to.\",\"default\":null},{\"name\":\"sourceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ontology source name - the name of ontology from which the term is obtained\\n  e.g. 'Human Phenotype Ontology'\",\"default\":null},{\"name\":\"sourceVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ontology source version - the version of the ontology from which the\\n  OntologyTerm is obtained; e.g. 2.6.1.\\n  There is no standard for ontology versioning and some frequently\\n  released ontologies may use a datestamp, or build number.\",\"default\":null}]}}],\"doc\":\"This filter allows variant, transcript combinations to be extracted by effect\\n  type(s).\\n  Only return variant annotations including any of these effects and only return\\n  transcript effects including any of these effects. Exact matching across all\\n  fields of the Sequence Ontology OntologyTerm is required.\\n  (A transcript effect may have multiple SO effects which will all be reported.)\\n  If null, return all variant annotations.\",\"default\":null},{\"name\":\"pageSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Specifies the maximum number of results to return in a single page.\\n  If unspecified, a system default will be used.\",\"default\":null},{\"name\":\"pageToken\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  To get the next page of results, set this parameter to the value of\\n  `nextPageToken` from the previous response.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Required. The ID of the variant annotation set to search over. */
   private java.lang.String variantAnnotationSetId;
  /** Only return variants with reference alleles on the reference with this
  name. One of this field or `referenceId` or `features` is required.
  (case-sensitive, exact match) */
   private java.lang.String referenceName;
  /** Only return variants with reference alleles on the reference with this
  ID. One of this field or `referenceName` or `features` is required. */
   private java.lang.String referenceId;
  /** Required if referenceName or referenceId supplied.
  The beginning of the window (0-based, inclusive) for which variants with
  overlapping reference alleles should be returned.
  Genomic positions are non-negative integers less than reference length.
  Requests spanning the join of circular genomes are represented as
  two requests one on each side of the join (position 0). */
   private long start;
  /** Required if referenceName or referenceId supplied.
  The end of the window (0-based, exclusive) for which variants with
  overlapping reference alleles should be returned. */
   private long end;
  /** This filter allows variant, transcript combinations to be extracted by effect
  type(s).
  Only return variant annotations including any of these effects and only return
  transcript effects including any of these effects. Exact matching across all
  fields of the Sequence Ontology OntologyTerm is required.
  (A transcript effect may have multiple SO effects which will all be reported.)
  If null, return all variant annotations. */
   private java.util.List<org.ga4gh.models.OntologyTerm> effects;
  /** Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used. */
   private java.lang.Integer pageSize;
  /** The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response. */
   private java.lang.String pageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchVariantAnnotationsRequest() {}

  /**
   * All-args constructor.
   */
  public SearchVariantAnnotationsRequest(java.lang.String variantAnnotationSetId, java.lang.String referenceName, java.lang.String referenceId, java.lang.Long start, java.lang.Long end, java.util.List<org.ga4gh.models.OntologyTerm> effects, java.lang.Integer pageSize, java.lang.String pageToken) {
    this.variantAnnotationSetId = variantAnnotationSetId;
    this.referenceName = referenceName;
    this.referenceId = referenceId;
    this.start = start;
    this.end = end;
    this.effects = effects;
    this.pageSize = pageSize;
    this.pageToken = pageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variantAnnotationSetId;
    case 1: return referenceName;
    case 2: return referenceId;
    case 3: return start;
    case 4: return end;
    case 5: return effects;
    case 6: return pageSize;
    case 7: return pageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variantAnnotationSetId = (java.lang.String)value$; break;
    case 1: referenceName = (java.lang.String)value$; break;
    case 2: referenceId = (java.lang.String)value$; break;
    case 3: start = (java.lang.Long)value$; break;
    case 4: end = (java.lang.Long)value$; break;
    case 5: effects = (java.util.List<org.ga4gh.models.OntologyTerm>)value$; break;
    case 6: pageSize = (java.lang.Integer)value$; break;
    case 7: pageToken = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variantAnnotationSetId' field.
   * Required. The ID of the variant annotation set to search over.   */
  public java.lang.String getVariantAnnotationSetId() {
    return variantAnnotationSetId;
  }

  /**
   * Sets the value of the 'variantAnnotationSetId' field.
   * Required. The ID of the variant annotation set to search over.   * @param value the value to set.
   */
  public void setVariantAnnotationSetId(java.lang.String value) {
    this.variantAnnotationSetId = value;
  }

  /**
   * Gets the value of the 'referenceName' field.
   * Only return variants with reference alleles on the reference with this
  name. One of this field or `referenceId` or `features` is required.
  (case-sensitive, exact match)   */
  public java.lang.String getReferenceName() {
    return referenceName;
  }

  /**
   * Sets the value of the 'referenceName' field.
   * Only return variants with reference alleles on the reference with this
  name. One of this field or `referenceId` or `features` is required.
  (case-sensitive, exact match)   * @param value the value to set.
   */
  public void setReferenceName(java.lang.String value) {
    this.referenceName = value;
  }

  /**
   * Gets the value of the 'referenceId' field.
   * Only return variants with reference alleles on the reference with this
  ID. One of this field or `referenceName` or `features` is required.   */
  public java.lang.String getReferenceId() {
    return referenceId;
  }

  /**
   * Sets the value of the 'referenceId' field.
   * Only return variants with reference alleles on the reference with this
  ID. One of this field or `referenceName` or `features` is required.   * @param value the value to set.
   */
  public void setReferenceId(java.lang.String value) {
    this.referenceId = value;
  }

  /**
   * Gets the value of the 'start' field.
   * Required if referenceName or referenceId supplied.
  The beginning of the window (0-based, inclusive) for which variants with
  overlapping reference alleles should be returned.
  Genomic positions are non-negative integers less than reference length.
  Requests spanning the join of circular genomes are represented as
  two requests one on each side of the join (position 0).   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * Required if referenceName or referenceId supplied.
  The beginning of the window (0-based, inclusive) for which variants with
  overlapping reference alleles should be returned.
  Genomic positions are non-negative integers less than reference length.
  Requests spanning the join of circular genomes are represented as
  two requests one on each side of the join (position 0).   * @param value the value to set.
   */
  public void setStart(java.lang.Long value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   * Required if referenceName or referenceId supplied.
  The end of the window (0-based, exclusive) for which variants with
  overlapping reference alleles should be returned.   */
  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * Required if referenceName or referenceId supplied.
  The end of the window (0-based, exclusive) for which variants with
  overlapping reference alleles should be returned.   * @param value the value to set.
   */
  public void setEnd(java.lang.Long value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'effects' field.
   * This filter allows variant, transcript combinations to be extracted by effect
  type(s).
  Only return variant annotations including any of these effects and only return
  transcript effects including any of these effects. Exact matching across all
  fields of the Sequence Ontology OntologyTerm is required.
  (A transcript effect may have multiple SO effects which will all be reported.)
  If null, return all variant annotations.   */
  public java.util.List<org.ga4gh.models.OntologyTerm> getEffects() {
    return effects;
  }

  /**
   * Sets the value of the 'effects' field.
   * This filter allows variant, transcript combinations to be extracted by effect
  type(s).
  Only return variant annotations including any of these effects and only return
  transcript effects including any of these effects. Exact matching across all
  fields of the Sequence Ontology OntologyTerm is required.
  (A transcript effect may have multiple SO effects which will all be reported.)
  If null, return all variant annotations.   * @param value the value to set.
   */
  public void setEffects(java.util.List<org.ga4gh.models.OntologyTerm> value) {
    this.effects = value;
  }

  /**
   * Gets the value of the 'pageSize' field.
   * Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used.   */
  public java.lang.Integer getPageSize() {
    return pageSize;
  }

  /**
   * Sets the value of the 'pageSize' field.
   * Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used.   * @param value the value to set.
   */
  public void setPageSize(java.lang.Integer value) {
    this.pageSize = value;
  }

  /**
   * Gets the value of the 'pageToken' field.
   * The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.   */
  public java.lang.String getPageToken() {
    return pageToken;
  }

  /**
   * Sets the value of the 'pageToken' field.
   * The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.   * @param value the value to set.
   */
  public void setPageToken(java.lang.String value) {
    this.pageToken = value;
  }

  /** Creates a new SearchVariantAnnotationsRequest RecordBuilder */
  public static org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder newBuilder() {
    return new org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder();
  }
  
  /** Creates a new SearchVariantAnnotationsRequest RecordBuilder by copying an existing Builder */
  public static org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder newBuilder(org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder other) {
    return new org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder(other);
  }
  
  /** Creates a new SearchVariantAnnotationsRequest RecordBuilder by copying an existing SearchVariantAnnotationsRequest instance */
  public static org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder newBuilder(org.ga4gh.methods.SearchVariantAnnotationsRequest other) {
    return new org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchVariantAnnotationsRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchVariantAnnotationsRequest>
    implements org.apache.avro.data.RecordBuilder<SearchVariantAnnotationsRequest> {

    private java.lang.String variantAnnotationSetId;
    private java.lang.String referenceName;
    private java.lang.String referenceId;
    private long start;
    private long end;
    private java.util.List<org.ga4gh.models.OntologyTerm> effects;
    private java.lang.Integer pageSize;
    private java.lang.String pageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.methods.SearchVariantAnnotationsRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variantAnnotationSetId)) {
        this.variantAnnotationSetId = data().deepCopy(fields()[0].schema(), other.variantAnnotationSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[1].schema(), other.referenceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceId)) {
        this.referenceId = data().deepCopy(fields()[2].schema(), other.referenceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start)) {
        this.start = data().deepCopy(fields()[3].schema(), other.start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end)) {
        this.end = data().deepCopy(fields()[4].schema(), other.end);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.effects)) {
        this.effects = data().deepCopy(fields()[5].schema(), other.effects);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pageSize)) {
        this.pageSize = data().deepCopy(fields()[6].schema(), other.pageSize);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pageToken)) {
        this.pageToken = data().deepCopy(fields()[7].schema(), other.pageToken);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchVariantAnnotationsRequest instance */
    private Builder(org.ga4gh.methods.SearchVariantAnnotationsRequest other) {
            super(org.ga4gh.methods.SearchVariantAnnotationsRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.variantAnnotationSetId)) {
        this.variantAnnotationSetId = data().deepCopy(fields()[0].schema(), other.variantAnnotationSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[1].schema(), other.referenceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceId)) {
        this.referenceId = data().deepCopy(fields()[2].schema(), other.referenceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start)) {
        this.start = data().deepCopy(fields()[3].schema(), other.start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end)) {
        this.end = data().deepCopy(fields()[4].schema(), other.end);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.effects)) {
        this.effects = data().deepCopy(fields()[5].schema(), other.effects);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pageSize)) {
        this.pageSize = data().deepCopy(fields()[6].schema(), other.pageSize);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pageToken)) {
        this.pageToken = data().deepCopy(fields()[7].schema(), other.pageToken);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'variantAnnotationSetId' field */
    public java.lang.String getVariantAnnotationSetId() {
      return variantAnnotationSetId;
    }
    
    /** Sets the value of the 'variantAnnotationSetId' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setVariantAnnotationSetId(java.lang.String value) {
      validate(fields()[0], value);
      this.variantAnnotationSetId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variantAnnotationSetId' field has been set */
    public boolean hasVariantAnnotationSetId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variantAnnotationSetId' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearVariantAnnotationSetId() {
      variantAnnotationSetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'referenceName' field */
    public java.lang.String getReferenceName() {
      return referenceName;
    }
    
    /** Sets the value of the 'referenceName' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setReferenceName(java.lang.String value) {
      validate(fields()[1], value);
      this.referenceName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceName' field has been set */
    public boolean hasReferenceName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'referenceName' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearReferenceName() {
      referenceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'referenceId' field */
    public java.lang.String getReferenceId() {
      return referenceId;
    }
    
    /** Sets the value of the 'referenceId' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setReferenceId(java.lang.String value) {
      validate(fields()[2], value);
      this.referenceId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceId' field has been set */
    public boolean hasReferenceId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'referenceId' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearReferenceId() {
      referenceId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Long getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setStart(long value) {
      validate(fields()[3], value);
      this.start = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'start' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearStart() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Long getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setEnd(long value) {
      validate(fields()[4], value);
      this.end = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'end' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearEnd() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'effects' field */
    public java.util.List<org.ga4gh.models.OntologyTerm> getEffects() {
      return effects;
    }
    
    /** Sets the value of the 'effects' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setEffects(java.util.List<org.ga4gh.models.OntologyTerm> value) {
      validate(fields()[5], value);
      this.effects = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'effects' field has been set */
    public boolean hasEffects() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'effects' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearEffects() {
      effects = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'pageSize' field */
    public java.lang.Integer getPageSize() {
      return pageSize;
    }
    
    /** Sets the value of the 'pageSize' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setPageSize(java.lang.Integer value) {
      validate(fields()[6], value);
      this.pageSize = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'pageSize' field has been set */
    public boolean hasPageSize() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'pageSize' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearPageSize() {
      pageSize = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'pageToken' field */
    public java.lang.String getPageToken() {
      return pageToken;
    }
    
    /** Sets the value of the 'pageToken' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder setPageToken(java.lang.String value) {
      validate(fields()[7], value);
      this.pageToken = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'pageToken' field has been set */
    public boolean hasPageToken() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'pageToken' field */
    public org.ga4gh.methods.SearchVariantAnnotationsRequest.Builder clearPageToken() {
      pageToken = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public SearchVariantAnnotationsRequest build() {
      try {
        SearchVariantAnnotationsRequest record = new SearchVariantAnnotationsRequest();
        record.variantAnnotationSetId = fieldSetFlags()[0] ? this.variantAnnotationSetId : (java.lang.String) defaultValue(fields()[0]);
        record.referenceName = fieldSetFlags()[1] ? this.referenceName : (java.lang.String) defaultValue(fields()[1]);
        record.referenceId = fieldSetFlags()[2] ? this.referenceId : (java.lang.String) defaultValue(fields()[2]);
        record.start = fieldSetFlags()[3] ? this.start : (java.lang.Long) defaultValue(fields()[3]);
        record.end = fieldSetFlags()[4] ? this.end : (java.lang.Long) defaultValue(fields()[4]);
        record.effects = fieldSetFlags()[5] ? this.effects : (java.util.List<org.ga4gh.models.OntologyTerm>) defaultValue(fields()[5]);
        record.pageSize = fieldSetFlags()[6] ? this.pageSize : (java.lang.Integer) defaultValue(fields()[6]);
        record.pageToken = fieldSetFlags()[7] ? this.pageToken : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
