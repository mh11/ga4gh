/*
 * Copyright 2015 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** An `AlleleCall` represents the determination of the copy number of a particular
`Allele`, possibly within a certain `Variant`.

It may include associated information such as quality and phasing.

The `Allele` copy numbers described by an `AlleleCall` must be consistent with
those implied by the `genotype`s of any `Call`s in the same `CallSet`. If a
server supports "graph" mode, it must provide `Variant`-associated `AlleleCall`s
for any `Variant` with a `Call` in the `CallSet`. */
@org.apache.avro.specific.AvroGenerated
public class AlleleCall extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlleleCall\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An `AlleleCall` represents the determination of the copy number of a particular\\n`Allele`, possibly within a certain `Variant`.\\n\\nIt may include associated information such as quality and phasing.\\n\\nThe `Allele` copy numbers described by an `AlleleCall` must be consistent with\\nthose implied by the `genotype`s of any `Call`s in the same `CallSet`. If a\\nserver supports \\\"graph\\\" mode, it must provide `Variant`-associated `AlleleCall`s\\nfor any `Variant` with a `Call` in the `CallSet`.\",\"fields\":[{\"name\":\"callSetId\",\"type\":\"string\",\"doc\":\"The ID of the call set this `AlleleCall` belongs to.\"},{\"name\":\"alleleId\",\"type\":\"string\",\"doc\":\"The ID of the `Allele` that this `AlleleCall` is calling the copy number of.\"},{\"name\":\"variantId\",\"type\":[\"null\",\"string\"],\"doc\":\"The ID of the `Variant` that this `AlleleCall` belongs to.\\n\\n  The specified `Variant` must have this `AlleleCall`'s `Allele` as an option.\\n\\n  Only one `AlleleCall` may be associated with a particular `Variant`-`Allele`\\n  combination in a particular `CallSet`. So, one `AlleleCall` for this `Allele`\\n  may have a null `variantId`, and one additional `AlleleCall` can use this\\n  `Allele` for each `Variant` the `Allele` appears in.\"},{\"name\":\"totalCopies\",\"type\":\"double\",\"doc\":\"Gives the called copy number of the `Allele`. If `variantId` is null, this\\n  gives the total copy number of the `Allele`, including copies associated with\\n  `Variant`s. Otherwise, it is the copy number of this `Allele` in the specified\\n  `Variant`, and must agree with the `genotype` of the `Call` for that\\n  `Variant`, if any.\"},{\"name\":\"phaseset\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Defines the phasing of the copies of this `Allele`. Each entry is associated\\n  with an instance of this `AlleleCall`'s `Allele`. Allele instances that are\\n  associated with the same `phaseset` string occur on the same molecule of DNA.\\n\\n  The number of entries should not exceed `totalCopies`.\"},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}},\"doc\":\"A map of additional allele call information.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The ID of the call set this `AlleleCall` belongs to. */
   private java.lang.CharSequence callSetId;
  /** The ID of the `Allele` that this `AlleleCall` is calling the copy number of. */
   private java.lang.CharSequence alleleId;
  /** The ID of the `Variant` that this `AlleleCall` belongs to.

  The specified `Variant` must have this `AlleleCall`'s `Allele` as an option.

  Only one `AlleleCall` may be associated with a particular `Variant`-`Allele`
  combination in a particular `CallSet`. So, one `AlleleCall` for this `Allele`
  may have a null `variantId`, and one additional `AlleleCall` can use this
  `Allele` for each `Variant` the `Allele` appears in. */
   private java.lang.CharSequence variantId;
  /** Gives the called copy number of the `Allele`. If `variantId` is null, this
  gives the total copy number of the `Allele`, including copies associated with
  `Variant`s. Otherwise, it is the copy number of this `Allele` in the specified
  `Variant`, and must agree with the `genotype` of the `Call` for that
  `Variant`, if any. */
   private double totalCopies;
  /** Defines the phasing of the copies of this `Allele`. Each entry is associated
  with an instance of this `AlleleCall`'s `Allele`. Allele instances that are
  associated with the same `phaseset` string occur on the same molecule of DNA.

  The number of entries should not exceed `totalCopies`. */
   private java.util.List<java.lang.CharSequence> phaseset;
  /** A map of additional allele call information. */
   private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AlleleCall() {}

  /**
   * All-args constructor.
   */
  public AlleleCall(java.lang.CharSequence callSetId, java.lang.CharSequence alleleId, java.lang.CharSequence variantId, java.lang.Double totalCopies, java.util.List<java.lang.CharSequence> phaseset, java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> info) {
    this.callSetId = callSetId;
    this.alleleId = alleleId;
    this.variantId = variantId;
    this.totalCopies = totalCopies;
    this.phaseset = phaseset;
    this.info = info;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return callSetId;
    case 1: return alleleId;
    case 2: return variantId;
    case 3: return totalCopies;
    case 4: return phaseset;
    case 5: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: callSetId = (java.lang.CharSequence)value$; break;
    case 1: alleleId = (java.lang.CharSequence)value$; break;
    case 2: variantId = (java.lang.CharSequence)value$; break;
    case 3: totalCopies = (java.lang.Double)value$; break;
    case 4: phaseset = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: info = (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'callSetId' field.
   * The ID of the call set this `AlleleCall` belongs to.   */
  public java.lang.CharSequence getCallSetId() {
    return callSetId;
  }

  /**
   * Sets the value of the 'callSetId' field.
   * The ID of the call set this `AlleleCall` belongs to.   * @param value the value to set.
   */
  public void setCallSetId(java.lang.CharSequence value) {
    this.callSetId = value;
  }

  /**
   * Gets the value of the 'alleleId' field.
   * The ID of the `Allele` that this `AlleleCall` is calling the copy number of.   */
  public java.lang.CharSequence getAlleleId() {
    return alleleId;
  }

  /**
   * Sets the value of the 'alleleId' field.
   * The ID of the `Allele` that this `AlleleCall` is calling the copy number of.   * @param value the value to set.
   */
  public void setAlleleId(java.lang.CharSequence value) {
    this.alleleId = value;
  }

  /**
   * Gets the value of the 'variantId' field.
   * The ID of the `Variant` that this `AlleleCall` belongs to.

  The specified `Variant` must have this `AlleleCall`'s `Allele` as an option.

  Only one `AlleleCall` may be associated with a particular `Variant`-`Allele`
  combination in a particular `CallSet`. So, one `AlleleCall` for this `Allele`
  may have a null `variantId`, and one additional `AlleleCall` can use this
  `Allele` for each `Variant` the `Allele` appears in.   */
  public java.lang.CharSequence getVariantId() {
    return variantId;
  }

  /**
   * Sets the value of the 'variantId' field.
   * The ID of the `Variant` that this `AlleleCall` belongs to.

  The specified `Variant` must have this `AlleleCall`'s `Allele` as an option.

  Only one `AlleleCall` may be associated with a particular `Variant`-`Allele`
  combination in a particular `CallSet`. So, one `AlleleCall` for this `Allele`
  may have a null `variantId`, and one additional `AlleleCall` can use this
  `Allele` for each `Variant` the `Allele` appears in.   * @param value the value to set.
   */
  public void setVariantId(java.lang.CharSequence value) {
    this.variantId = value;
  }

  /**
   * Gets the value of the 'totalCopies' field.
   * Gives the called copy number of the `Allele`. If `variantId` is null, this
  gives the total copy number of the `Allele`, including copies associated with
  `Variant`s. Otherwise, it is the copy number of this `Allele` in the specified
  `Variant`, and must agree with the `genotype` of the `Call` for that
  `Variant`, if any.   */
  public java.lang.Double getTotalCopies() {
    return totalCopies;
  }

  /**
   * Sets the value of the 'totalCopies' field.
   * Gives the called copy number of the `Allele`. If `variantId` is null, this
  gives the total copy number of the `Allele`, including copies associated with
  `Variant`s. Otherwise, it is the copy number of this `Allele` in the specified
  `Variant`, and must agree with the `genotype` of the `Call` for that
  `Variant`, if any.   * @param value the value to set.
   */
  public void setTotalCopies(java.lang.Double value) {
    this.totalCopies = value;
  }

  /**
   * Gets the value of the 'phaseset' field.
   * Defines the phasing of the copies of this `Allele`. Each entry is associated
  with an instance of this `AlleleCall`'s `Allele`. Allele instances that are
  associated with the same `phaseset` string occur on the same molecule of DNA.

  The number of entries should not exceed `totalCopies`.   */
  public java.util.List<java.lang.CharSequence> getPhaseset() {
    return phaseset;
  }

  /**
   * Sets the value of the 'phaseset' field.
   * Defines the phasing of the copies of this `Allele`. Each entry is associated
  with an instance of this `AlleleCall`'s `Allele`. Allele instances that are
  associated with the same `phaseset` string occur on the same molecule of DNA.

  The number of entries should not exceed `totalCopies`.   * @param value the value to set.
   */
  public void setPhaseset(java.util.List<java.lang.CharSequence> value) {
    this.phaseset = value;
  }

  /**
   * Gets the value of the 'info' field.
   * A map of additional allele call information.   */
  public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * A map of additional allele call information.   * @param value the value to set.
   */
  public void setInfo(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> value) {
    this.info = value;
  }

  /** Creates a new AlleleCall RecordBuilder */
  public static org.ga4gh.models.AlleleCall.Builder newBuilder() {
    return new org.ga4gh.models.AlleleCall.Builder();
  }
  
  /** Creates a new AlleleCall RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.AlleleCall.Builder newBuilder(org.ga4gh.models.AlleleCall.Builder other) {
    return new org.ga4gh.models.AlleleCall.Builder(other);
  }
  
  /** Creates a new AlleleCall RecordBuilder by copying an existing AlleleCall instance */
  public static org.ga4gh.models.AlleleCall.Builder newBuilder(org.ga4gh.models.AlleleCall other) {
    return new org.ga4gh.models.AlleleCall.Builder(other);
  }
  
  /**
   * RecordBuilder for AlleleCall instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlleleCall>
    implements org.apache.avro.data.RecordBuilder<AlleleCall> {

    private java.lang.CharSequence callSetId;
    private java.lang.CharSequence alleleId;
    private java.lang.CharSequence variantId;
    private double totalCopies;
    private java.util.List<java.lang.CharSequence> phaseset;
    private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> info;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.AlleleCall.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.AlleleCall.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.callSetId)) {
        this.callSetId = data().deepCopy(fields()[0].schema(), other.callSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alleleId)) {
        this.alleleId = data().deepCopy(fields()[1].schema(), other.alleleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.variantId)) {
        this.variantId = data().deepCopy(fields()[2].schema(), other.variantId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalCopies)) {
        this.totalCopies = data().deepCopy(fields()[3].schema(), other.totalCopies);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phaseset)) {
        this.phaseset = data().deepCopy(fields()[4].schema(), other.phaseset);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.info)) {
        this.info = data().deepCopy(fields()[5].schema(), other.info);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AlleleCall instance */
    private Builder(org.ga4gh.models.AlleleCall other) {
            super(org.ga4gh.models.AlleleCall.SCHEMA$);
      if (isValidValue(fields()[0], other.callSetId)) {
        this.callSetId = data().deepCopy(fields()[0].schema(), other.callSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alleleId)) {
        this.alleleId = data().deepCopy(fields()[1].schema(), other.alleleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.variantId)) {
        this.variantId = data().deepCopy(fields()[2].schema(), other.variantId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalCopies)) {
        this.totalCopies = data().deepCopy(fields()[3].schema(), other.totalCopies);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phaseset)) {
        this.phaseset = data().deepCopy(fields()[4].schema(), other.phaseset);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.info)) {
        this.info = data().deepCopy(fields()[5].schema(), other.info);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'callSetId' field */
    public java.lang.CharSequence getCallSetId() {
      return callSetId;
    }
    
    /** Sets the value of the 'callSetId' field */
    public org.ga4gh.models.AlleleCall.Builder setCallSetId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.callSetId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'callSetId' field has been set */
    public boolean hasCallSetId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'callSetId' field */
    public org.ga4gh.models.AlleleCall.Builder clearCallSetId() {
      callSetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'alleleId' field */
    public java.lang.CharSequence getAlleleId() {
      return alleleId;
    }
    
    /** Sets the value of the 'alleleId' field */
    public org.ga4gh.models.AlleleCall.Builder setAlleleId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.alleleId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'alleleId' field has been set */
    public boolean hasAlleleId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'alleleId' field */
    public org.ga4gh.models.AlleleCall.Builder clearAlleleId() {
      alleleId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'variantId' field */
    public java.lang.CharSequence getVariantId() {
      return variantId;
    }
    
    /** Sets the value of the 'variantId' field */
    public org.ga4gh.models.AlleleCall.Builder setVariantId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.variantId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'variantId' field has been set */
    public boolean hasVariantId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'variantId' field */
    public org.ga4gh.models.AlleleCall.Builder clearVariantId() {
      variantId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'totalCopies' field */
    public java.lang.Double getTotalCopies() {
      return totalCopies;
    }
    
    /** Sets the value of the 'totalCopies' field */
    public org.ga4gh.models.AlleleCall.Builder setTotalCopies(double value) {
      validate(fields()[3], value);
      this.totalCopies = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'totalCopies' field has been set */
    public boolean hasTotalCopies() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'totalCopies' field */
    public org.ga4gh.models.AlleleCall.Builder clearTotalCopies() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'phaseset' field */
    public java.util.List<java.lang.CharSequence> getPhaseset() {
      return phaseset;
    }
    
    /** Sets the value of the 'phaseset' field */
    public org.ga4gh.models.AlleleCall.Builder setPhaseset(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.phaseset = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'phaseset' field has been set */
    public boolean hasPhaseset() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'phaseset' field */
    public org.ga4gh.models.AlleleCall.Builder clearPhaseset() {
      phaseset = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'info' field */
    public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> getInfo() {
      return info;
    }
    
    /** Sets the value of the 'info' field */
    public org.ga4gh.models.AlleleCall.Builder setInfo(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> value) {
      validate(fields()[5], value);
      this.info = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'info' field */
    public org.ga4gh.models.AlleleCall.Builder clearInfo() {
      info = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AlleleCall build() {
      try {
        AlleleCall record = new AlleleCall();
        record.callSetId = fieldSetFlags()[0] ? this.callSetId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.alleleId = fieldSetFlags()[1] ? this.alleleId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.variantId = fieldSetFlags()[2] ? this.variantId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.totalCopies = fieldSetFlags()[3] ? this.totalCopies : (java.lang.Double) defaultValue(fields()[3]);
        record.phaseset = fieldSetFlags()[4] ? this.phaseset : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.info = fieldSetFlags()[5] ? this.info : (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
