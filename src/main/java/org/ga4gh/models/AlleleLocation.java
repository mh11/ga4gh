/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** An allele location record holds the location of an allele relative to a
non-genomic coordinate system such as a CDS or protein and holds the
reference and alternate sequence where appropriate */
@org.apache.avro.specific.AvroGenerated
public class AlleleLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlleleLocation\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An allele location record holds the location of an allele relative to a\\nnon-genomic coordinate system such as a CDS or protein and holds the\\nreference and alternate sequence where appropriate\",\"fields\":[{\"name\":\"start\",\"type\":\"int\",\"doc\":\"Relative start position of the allele in this coordinate system\"},{\"name\":\"end\",\"type\":[\"null\",\"int\"],\"doc\":\"Relative end position of the allele in this coordinate system\",\"default\":null},{\"name\":\"referenceSequence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Reference sequence in feature (this should be the codon at CDS level)\",\"default\":null},{\"name\":\"alternateSequence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Alternate sequence in feature (this should be the codon at CDS level)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Relative start position of the allele in this coordinate system */
   private int start;
  /** Relative end position of the allele in this coordinate system */
   private java.lang.Integer end;
  /** Reference sequence in feature (this should be the codon at CDS level) */
   private java.lang.String referenceSequence;
  /** Alternate sequence in feature (this should be the codon at CDS level) */
   private java.lang.String alternateSequence;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AlleleLocation() {}

  /**
   * All-args constructor.
   */
  public AlleleLocation(java.lang.Integer start, java.lang.Integer end, java.lang.String referenceSequence, java.lang.String alternateSequence) {
    this.start = start;
    this.end = end;
    this.referenceSequence = referenceSequence;
    this.alternateSequence = alternateSequence;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return start;
    case 1: return end;
    case 2: return referenceSequence;
    case 3: return alternateSequence;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: start = (java.lang.Integer)value$; break;
    case 1: end = (java.lang.Integer)value$; break;
    case 2: referenceSequence = (java.lang.String)value$; break;
    case 3: alternateSequence = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'start' field.
   * Relative start position of the allele in this coordinate system   */
  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * Relative start position of the allele in this coordinate system   * @param value the value to set.
   */
  public void setStart(java.lang.Integer value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   * Relative end position of the allele in this coordinate system   */
  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * Relative end position of the allele in this coordinate system   * @param value the value to set.
   */
  public void setEnd(java.lang.Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'referenceSequence' field.
   * Reference sequence in feature (this should be the codon at CDS level)   */
  public java.lang.String getReferenceSequence() {
    return referenceSequence;
  }

  /**
   * Sets the value of the 'referenceSequence' field.
   * Reference sequence in feature (this should be the codon at CDS level)   * @param value the value to set.
   */
  public void setReferenceSequence(java.lang.String value) {
    this.referenceSequence = value;
  }

  /**
   * Gets the value of the 'alternateSequence' field.
   * Alternate sequence in feature (this should be the codon at CDS level)   */
  public java.lang.String getAlternateSequence() {
    return alternateSequence;
  }

  /**
   * Sets the value of the 'alternateSequence' field.
   * Alternate sequence in feature (this should be the codon at CDS level)   * @param value the value to set.
   */
  public void setAlternateSequence(java.lang.String value) {
    this.alternateSequence = value;
  }

  /** Creates a new AlleleLocation RecordBuilder */
  public static org.ga4gh.models.AlleleLocation.Builder newBuilder() {
    return new org.ga4gh.models.AlleleLocation.Builder();
  }
  
  /** Creates a new AlleleLocation RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.AlleleLocation.Builder newBuilder(org.ga4gh.models.AlleleLocation.Builder other) {
    return new org.ga4gh.models.AlleleLocation.Builder(other);
  }
  
  /** Creates a new AlleleLocation RecordBuilder by copying an existing AlleleLocation instance */
  public static org.ga4gh.models.AlleleLocation.Builder newBuilder(org.ga4gh.models.AlleleLocation other) {
    return new org.ga4gh.models.AlleleLocation.Builder(other);
  }
  
  /**
   * RecordBuilder for AlleleLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlleleLocation>
    implements org.apache.avro.data.RecordBuilder<AlleleLocation> {

    private int start;
    private java.lang.Integer end;
    private java.lang.String referenceSequence;
    private java.lang.String alternateSequence;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.AlleleLocation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.AlleleLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.start)) {
        this.start = data().deepCopy(fields()[0].schema(), other.start);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceSequence)) {
        this.referenceSequence = data().deepCopy(fields()[2].schema(), other.referenceSequence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternateSequence)) {
        this.alternateSequence = data().deepCopy(fields()[3].schema(), other.alternateSequence);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AlleleLocation instance */
    private Builder(org.ga4gh.models.AlleleLocation other) {
            super(org.ga4gh.models.AlleleLocation.SCHEMA$);
      if (isValidValue(fields()[0], other.start)) {
        this.start = data().deepCopy(fields()[0].schema(), other.start);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceSequence)) {
        this.referenceSequence = data().deepCopy(fields()[2].schema(), other.referenceSequence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternateSequence)) {
        this.alternateSequence = data().deepCopy(fields()[3].schema(), other.alternateSequence);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'start' field */
    public java.lang.Integer getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.ga4gh.models.AlleleLocation.Builder setStart(int value) {
      validate(fields()[0], value);
      this.start = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'start' field */
    public org.ga4gh.models.AlleleLocation.Builder clearStart() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Integer getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.ga4gh.models.AlleleLocation.Builder setEnd(java.lang.Integer value) {
      validate(fields()[1], value);
      this.end = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'end' field */
    public org.ga4gh.models.AlleleLocation.Builder clearEnd() {
      end = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'referenceSequence' field */
    public java.lang.String getReferenceSequence() {
      return referenceSequence;
    }
    
    /** Sets the value of the 'referenceSequence' field */
    public org.ga4gh.models.AlleleLocation.Builder setReferenceSequence(java.lang.String value) {
      validate(fields()[2], value);
      this.referenceSequence = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceSequence' field has been set */
    public boolean hasReferenceSequence() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'referenceSequence' field */
    public org.ga4gh.models.AlleleLocation.Builder clearReferenceSequence() {
      referenceSequence = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'alternateSequence' field */
    public java.lang.String getAlternateSequence() {
      return alternateSequence;
    }
    
    /** Sets the value of the 'alternateSequence' field */
    public org.ga4gh.models.AlleleLocation.Builder setAlternateSequence(java.lang.String value) {
      validate(fields()[3], value);
      this.alternateSequence = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'alternateSequence' field has been set */
    public boolean hasAlternateSequence() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'alternateSequence' field */
    public org.ga4gh.models.AlleleLocation.Builder clearAlternateSequence() {
      alternateSequence = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AlleleLocation build() {
      try {
        AlleleLocation record = new AlleleLocation();
        record.start = fieldSetFlags()[0] ? this.start : (java.lang.Integer) defaultValue(fields()[0]);
        record.end = fieldSetFlags()[1] ? this.end : (java.lang.Integer) defaultValue(fields()[1]);
        record.referenceSequence = fieldSetFlags()[2] ? this.referenceSequence : (java.lang.String) defaultValue(fields()[2]);
        record.alternateSequence = fieldSetFlags()[3] ? this.alternateSequence : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
