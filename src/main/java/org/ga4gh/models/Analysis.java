/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** An analysis contains an interpretation of one or several experiments.
(e.g. SNVs, copy number variations, methylation status) together with
information about the methodology used. */
@org.apache.avro.specific.AvroGenerated
public class Analysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Analysis\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An analysis contains an interpretation of one or several experiments.\\n(e.g. SNVs, copy number variations, methylation status) together with\\ninformation about the methodology used.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Formats of id | name | description | accessions are described in the\\n  documentation on general attributes and formats.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The time at which this record was created. \\n  Format: :ref:`ISO 8601 <metadata_date_time>`\",\"default\":null},{\"name\":\"updateDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The time at which this record was last updated.\\n  Format: :ref:`ISO 8601 <metadata_date_time>`\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of analysis.\",\"default\":null},{\"name\":\"software\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The software run to generate this analysis.\",\"default\":[]},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional analysis information.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Formats of id | name | description | accessions are described in the
  documentation on general attributes and formats. */
   private java.lang.String id;
   private java.lang.String name;
   private java.lang.String description;
  /** The time at which this record was created. 
  Format: :ref:`ISO 8601 <metadata_date_time>` */
   private java.lang.String createDateTime;
  /** The time at which this record was last updated.
  Format: :ref:`ISO 8601 <metadata_date_time>` */
   private java.lang.String updateDateTime;
  /** The type of analysis. */
   private java.lang.String type;
  /** The software run to generate this analysis. */
   private java.util.List<java.lang.String> software;
  /** A map of additional analysis information. */
   private java.util.Map<java.lang.String,java.util.List<java.lang.String>> info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Analysis() {}

  /**
   * All-args constructor.
   */
  public Analysis(java.lang.String id, java.lang.String name, java.lang.String description, java.lang.String createDateTime, java.lang.String updateDateTime, java.lang.String type, java.util.List<java.lang.String> software, java.util.Map<java.lang.String,java.util.List<java.lang.String>> info) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.createDateTime = createDateTime;
    this.updateDateTime = updateDateTime;
    this.type = type;
    this.software = software;
    this.info = info;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return createDateTime;
    case 4: return updateDateTime;
    case 5: return type;
    case 6: return software;
    case 7: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: createDateTime = (java.lang.String)value$; break;
    case 4: updateDateTime = (java.lang.String)value$; break;
    case 5: type = (java.lang.String)value$; break;
    case 6: software = (java.util.List<java.lang.String>)value$; break;
    case 7: info = (java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * Formats of id | name | description | accessions are described in the
  documentation on general attributes and formats.   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Formats of id | name | description | accessions are described in the
  documentation on general attributes and formats.   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'createDateTime' field.
   * The time at which this record was created. 
  Format: :ref:`ISO 8601 <metadata_date_time>`   */
  public java.lang.String getCreateDateTime() {
    return createDateTime;
  }

  /**
   * Sets the value of the 'createDateTime' field.
   * The time at which this record was created. 
  Format: :ref:`ISO 8601 <metadata_date_time>`   * @param value the value to set.
   */
  public void setCreateDateTime(java.lang.String value) {
    this.createDateTime = value;
  }

  /**
   * Gets the value of the 'updateDateTime' field.
   * The time at which this record was last updated.
  Format: :ref:`ISO 8601 <metadata_date_time>`   */
  public java.lang.String getUpdateDateTime() {
    return updateDateTime;
  }

  /**
   * Sets the value of the 'updateDateTime' field.
   * The time at which this record was last updated.
  Format: :ref:`ISO 8601 <metadata_date_time>`   * @param value the value to set.
   */
  public void setUpdateDateTime(java.lang.String value) {
    this.updateDateTime = value;
  }

  /**
   * Gets the value of the 'type' field.
   * The type of analysis.   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of analysis.   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'software' field.
   * The software run to generate this analysis.   */
  public java.util.List<java.lang.String> getSoftware() {
    return software;
  }

  /**
   * Sets the value of the 'software' field.
   * The software run to generate this analysis.   * @param value the value to set.
   */
  public void setSoftware(java.util.List<java.lang.String> value) {
    this.software = value;
  }

  /**
   * Gets the value of the 'info' field.
   * A map of additional analysis information.   */
  public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * A map of additional analysis information.   * @param value the value to set.
   */
  public void setInfo(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
    this.info = value;
  }

  /** Creates a new Analysis RecordBuilder */
  public static org.ga4gh.models.Analysis.Builder newBuilder() {
    return new org.ga4gh.models.Analysis.Builder();
  }
  
  /** Creates a new Analysis RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.Analysis.Builder newBuilder(org.ga4gh.models.Analysis.Builder other) {
    return new org.ga4gh.models.Analysis.Builder(other);
  }
  
  /** Creates a new Analysis RecordBuilder by copying an existing Analysis instance */
  public static org.ga4gh.models.Analysis.Builder newBuilder(org.ga4gh.models.Analysis other) {
    return new org.ga4gh.models.Analysis.Builder(other);
  }
  
  /**
   * RecordBuilder for Analysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Analysis>
    implements org.apache.avro.data.RecordBuilder<Analysis> {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String description;
    private java.lang.String createDateTime;
    private java.lang.String updateDateTime;
    private java.lang.String type;
    private java.util.List<java.lang.String> software;
    private java.util.Map<java.lang.String,java.util.List<java.lang.String>> info;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.Analysis.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.Analysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDateTime)) {
        this.createDateTime = data().deepCopy(fields()[3].schema(), other.createDateTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updateDateTime)) {
        this.updateDateTime = data().deepCopy(fields()[4].schema(), other.updateDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.software)) {
        this.software = data().deepCopy(fields()[6].schema(), other.software);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.info)) {
        this.info = data().deepCopy(fields()[7].schema(), other.info);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Analysis instance */
    private Builder(org.ga4gh.models.Analysis other) {
            super(org.ga4gh.models.Analysis.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDateTime)) {
        this.createDateTime = data().deepCopy(fields()[3].schema(), other.createDateTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updateDateTime)) {
        this.updateDateTime = data().deepCopy(fields()[4].schema(), other.updateDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.software)) {
        this.software = data().deepCopy(fields()[6].schema(), other.software);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.info)) {
        this.info = data().deepCopy(fields()[7].schema(), other.info);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.models.Analysis.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.models.Analysis.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ga4gh.models.Analysis.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public org.ga4gh.models.Analysis.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ga4gh.models.Analysis.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public org.ga4gh.models.Analysis.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'createDateTime' field */
    public java.lang.String getCreateDateTime() {
      return createDateTime;
    }
    
    /** Sets the value of the 'createDateTime' field */
    public org.ga4gh.models.Analysis.Builder setCreateDateTime(java.lang.String value) {
      validate(fields()[3], value);
      this.createDateTime = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'createDateTime' field has been set */
    public boolean hasCreateDateTime() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'createDateTime' field */
    public org.ga4gh.models.Analysis.Builder clearCreateDateTime() {
      createDateTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'updateDateTime' field */
    public java.lang.String getUpdateDateTime() {
      return updateDateTime;
    }
    
    /** Sets the value of the 'updateDateTime' field */
    public org.ga4gh.models.Analysis.Builder setUpdateDateTime(java.lang.String value) {
      validate(fields()[4], value);
      this.updateDateTime = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'updateDateTime' field has been set */
    public boolean hasUpdateDateTime() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'updateDateTime' field */
    public org.ga4gh.models.Analysis.Builder clearUpdateDateTime() {
      updateDateTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.ga4gh.models.Analysis.Builder setType(java.lang.String value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'type' field */
    public org.ga4gh.models.Analysis.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'software' field */
    public java.util.List<java.lang.String> getSoftware() {
      return software;
    }
    
    /** Sets the value of the 'software' field */
    public org.ga4gh.models.Analysis.Builder setSoftware(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.software = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'software' field has been set */
    public boolean hasSoftware() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'software' field */
    public org.ga4gh.models.Analysis.Builder clearSoftware() {
      software = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'info' field */
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getInfo() {
      return info;
    }
    
    /** Sets the value of the 'info' field */
    public org.ga4gh.models.Analysis.Builder setInfo(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
      validate(fields()[7], value);
      this.info = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'info' field */
    public org.ga4gh.models.Analysis.Builder clearInfo() {
      info = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Analysis build() {
      try {
        Analysis record = new Analysis();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.createDateTime = fieldSetFlags()[3] ? this.createDateTime : (java.lang.String) defaultValue(fields()[3]);
        record.updateDateTime = fieldSetFlags()[4] ? this.updateDateTime : (java.lang.String) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (java.lang.String) defaultValue(fields()[5]);
        record.software = fieldSetFlags()[6] ? this.software : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        record.info = fieldSetFlags()[7] ? this.info : (java.util.Map<java.lang.String,java.util.List<java.lang.String>>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
