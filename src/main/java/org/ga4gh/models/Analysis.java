/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** An analysis contains an interpretation of one or several experiments.
(e.g. SNVs, copy number variations, methylation status) together with
information about the methodology used. */
@org.apache.avro.specific.AvroGenerated
public class Analysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Analysis\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An analysis contains an interpretation of one or several experiments.\\n(e.g. SNVs, copy number variations, methylation status) together with\\ninformation about the methodology used.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The analysis UUID. This is globally unique.\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the analysis.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"A description of the analysis.\",\"default\":null},{\"name\":\"created\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this analysis was created in milliseconds from the epoch.\",\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this analysis was last updated in milliseconds\\n  from the epoch.\",\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The type of analysis.\",\"default\":null},{\"name\":\"software\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The software run to generate this analysis.\",\"default\":null},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}},\"doc\":\"A map of additional analysis information.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The analysis UUID. This is globally unique. */
   private java.lang.CharSequence id;
  /** The name of the analysis. */
   private java.lang.CharSequence name;
  /** A description of the analysis. */
   private java.lang.CharSequence description;
  /** The time at which this analysis was created in milliseconds from the epoch. */
   private java.lang.Long created;
  /** The time at which this analysis was last updated in milliseconds
  from the epoch. */
   private java.lang.Long updated;
  /** The type of analysis. */
   private java.lang.CharSequence type;
  /** The software run to generate this analysis. */
   private java.util.List<java.lang.CharSequence> software;
  /** A map of additional analysis information. */
   private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Analysis() {}

  /**
   * All-args constructor.
   */
  public Analysis(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.CharSequence description, java.lang.Long created, java.lang.Long updated, java.lang.CharSequence type, java.util.List<java.lang.CharSequence> software, java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> info) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.created = created;
    this.updated = updated;
    this.type = type;
    this.software = software;
    this.info = info;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return created;
    case 4: return updated;
    case 5: return type;
    case 6: return software;
    case 7: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: created = (java.lang.Long)value$; break;
    case 4: updated = (java.lang.Long)value$; break;
    case 5: type = (java.lang.CharSequence)value$; break;
    case 6: software = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: info = (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The analysis UUID. This is globally unique.   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The analysis UUID. This is globally unique.   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * The name of the analysis.   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The name of the analysis.   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * A description of the analysis.   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * A description of the analysis.   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'created' field.
   * The time at which this analysis was created in milliseconds from the epoch.   */
  public java.lang.Long getCreated() {
    return created;
  }

  /**
   * Sets the value of the 'created' field.
   * The time at which this analysis was created in milliseconds from the epoch.   * @param value the value to set.
   */
  public void setCreated(java.lang.Long value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'updated' field.
   * The time at which this analysis was last updated in milliseconds
  from the epoch.   */
  public java.lang.Long getUpdated() {
    return updated;
  }

  /**
   * Sets the value of the 'updated' field.
   * The time at which this analysis was last updated in milliseconds
  from the epoch.   * @param value the value to set.
   */
  public void setUpdated(java.lang.Long value) {
    this.updated = value;
  }

  /**
   * Gets the value of the 'type' field.
   * The type of analysis.   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of analysis.   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'software' field.
   * The software run to generate this analysis.   */
  public java.util.List<java.lang.CharSequence> getSoftware() {
    return software;
  }

  /**
   * Sets the value of the 'software' field.
   * The software run to generate this analysis.   * @param value the value to set.
   */
  public void setSoftware(java.util.List<java.lang.CharSequence> value) {
    this.software = value;
  }

  /**
   * Gets the value of the 'info' field.
   * A map of additional analysis information.   */
  public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * A map of additional analysis information.   * @param value the value to set.
   */
  public void setInfo(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> value) {
    this.info = value;
  }

  /** Creates a new Analysis RecordBuilder */
  public static org.ga4gh.models.Analysis.Builder newBuilder() {
    return new org.ga4gh.models.Analysis.Builder();
  }
  
  /** Creates a new Analysis RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.Analysis.Builder newBuilder(org.ga4gh.models.Analysis.Builder other) {
    return new org.ga4gh.models.Analysis.Builder(other);
  }
  
  /** Creates a new Analysis RecordBuilder by copying an existing Analysis instance */
  public static org.ga4gh.models.Analysis.Builder newBuilder(org.ga4gh.models.Analysis other) {
    return new org.ga4gh.models.Analysis.Builder(other);
  }
  
  /**
   * RecordBuilder for Analysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Analysis>
    implements org.apache.avro.data.RecordBuilder<Analysis> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence description;
    private java.lang.Long created;
    private java.lang.Long updated;
    private java.lang.CharSequence type;
    private java.util.List<java.lang.CharSequence> software;
    private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> info;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.Analysis.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.Analysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.created)) {
        this.created = data().deepCopy(fields()[3].schema(), other.created);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updated)) {
        this.updated = data().deepCopy(fields()[4].schema(), other.updated);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.software)) {
        this.software = data().deepCopy(fields()[6].schema(), other.software);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.info)) {
        this.info = data().deepCopy(fields()[7].schema(), other.info);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Analysis instance */
    private Builder(org.ga4gh.models.Analysis other) {
            super(org.ga4gh.models.Analysis.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.created)) {
        this.created = data().deepCopy(fields()[3].schema(), other.created);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updated)) {
        this.updated = data().deepCopy(fields()[4].schema(), other.updated);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.software)) {
        this.software = data().deepCopy(fields()[6].schema(), other.software);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.info)) {
        this.info = data().deepCopy(fields()[7].schema(), other.info);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.models.Analysis.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.models.Analysis.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ga4gh.models.Analysis.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public org.ga4gh.models.Analysis.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ga4gh.models.Analysis.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public org.ga4gh.models.Analysis.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'created' field */
    public java.lang.Long getCreated() {
      return created;
    }
    
    /** Sets the value of the 'created' field */
    public org.ga4gh.models.Analysis.Builder setCreated(java.lang.Long value) {
      validate(fields()[3], value);
      this.created = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'created' field has been set */
    public boolean hasCreated() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'created' field */
    public org.ga4gh.models.Analysis.Builder clearCreated() {
      created = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'updated' field */
    public java.lang.Long getUpdated() {
      return updated;
    }
    
    /** Sets the value of the 'updated' field */
    public org.ga4gh.models.Analysis.Builder setUpdated(java.lang.Long value) {
      validate(fields()[4], value);
      this.updated = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'updated' field has been set */
    public boolean hasUpdated() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'updated' field */
    public org.ga4gh.models.Analysis.Builder clearUpdated() {
      updated = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.ga4gh.models.Analysis.Builder setType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'type' field */
    public org.ga4gh.models.Analysis.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'software' field */
    public java.util.List<java.lang.CharSequence> getSoftware() {
      return software;
    }
    
    /** Sets the value of the 'software' field */
    public org.ga4gh.models.Analysis.Builder setSoftware(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.software = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'software' field has been set */
    public boolean hasSoftware() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'software' field */
    public org.ga4gh.models.Analysis.Builder clearSoftware() {
      software = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'info' field */
    public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> getInfo() {
      return info;
    }
    
    /** Sets the value of the 'info' field */
    public org.ga4gh.models.Analysis.Builder setInfo(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>> value) {
      validate(fields()[7], value);
      this.info = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'info' field */
    public org.ga4gh.models.Analysis.Builder clearInfo() {
      info = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Analysis build() {
      try {
        Analysis record = new Analysis();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.created = fieldSetFlags()[3] ? this.created : (java.lang.Long) defaultValue(fields()[3]);
        record.updated = fieldSetFlags()[4] ? this.updated : (java.lang.Long) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.software = fieldSetFlags()[6] ? this.software : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.info = fieldSetFlags()[7] ? this.info : (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.CharSequence>>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
