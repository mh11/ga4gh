/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** A structure for an instance of a CIGAR operation. */
@org.apache.avro.specific.AvroGenerated
public class CigarUnit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CigarUnit\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A structure for an instance of a CIGAR operation.\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"CigarOperation\",\"doc\":\"An enum for the different types of CIGAR alignment operations that exist.\\nUsed wherever CIGAR alignments are used. The different enumerated values\\nhave the following usage:\\n\\n* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be\\n  aligned to the reference without evidence of an INDEL. Unlike the\\n  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`\\n  operator does not indicate whether the reference and read sequences are an\\n  exact match. This operator is equivalent to SAM's `M`.\\n* `INSERT`: The insert operator indicates that the read contains evidence of\\n  bases being inserted into the reference. This operator is equivalent to\\n  SAM's `I`.\\n* `DELETE`: The delete operator indicates that the read contains evidence of\\n  bases being deleted from the reference. This operator is equivalent to\\n  SAM's `D`.\\n* `SKIP`: The skip operator indicates that this read skips a long segment of\\n  the reference, but the bases have not been deleted. This operator is\\n  commonly used when working with RNA-seq data, where reads may skip long\\n  segments of the reference between exons. This operator is equivalent to\\n  SAM's 'N'.\\n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end\\n  of a read have not been considered during alignment. This may occur if the\\n  majority of a read maps, except for low quality bases at the start/end of\\n  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped\\n  will still be stored in the read.\\n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of\\n  a read have been omitted from this alignment. This may occur if this linear\\n  alignment is part of a chimeric alignment, or if the read has been trimmed\\n  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This\\n  operator is equivalent to SAM's 'H'.\\n* `PAD`: The pad operator indicates that there is padding in an alignment.\\n  This operator is equivalent to SAM's 'P'.\\n* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned\\n  sequence exactly matches the reference (e.g., all bases are equal to the\\n  reference bases). This operator is equivalent to SAM's '='.\\n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the\\n  aligned sequence is an alignment match to the reference, but a sequence\\n  mismatch (e.g., the bases are not equal to the reference). This can\\n  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.\",\"symbols\":[\"ALIGNMENT_MATCH\",\"INSERT\",\"DELETE\",\"SKIP\",\"CLIP_SOFT\",\"CLIP_HARD\",\"PAD\",\"SEQUENCE_MATCH\",\"SEQUENCE_MISMATCH\"]},\"doc\":\"The operation type.\"},{\"name\":\"operationLength\",\"type\":\"long\",\"doc\":\"The number of bases that the operation runs for.\"},{\"name\":\"referenceSequence\",\"type\":[\"null\",\"string\"],\"doc\":\"`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)\\n  and deletions (`DELETE`). Filling this field replaces the MD tag.\\n  If the relevant information is not available, leave this field as `null`.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The operation type. */
   private org.ga4gh.models.CigarOperation operation;
  /** The number of bases that the operation runs for. */
   private long operationLength;
  /** `referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)
  and deletions (`DELETE`). Filling this field replaces the MD tag.
  If the relevant information is not available, leave this field as `null`. */
   private java.lang.CharSequence referenceSequence;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CigarUnit() {}

  /**
   * All-args constructor.
   */
  public CigarUnit(org.ga4gh.models.CigarOperation operation, java.lang.Long operationLength, java.lang.CharSequence referenceSequence) {
    this.operation = operation;
    this.operationLength = operationLength;
    this.referenceSequence = referenceSequence;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return operationLength;
    case 2: return referenceSequence;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (org.ga4gh.models.CigarOperation)value$; break;
    case 1: operationLength = (java.lang.Long)value$; break;
    case 2: referenceSequence = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * The operation type.   */
  public org.ga4gh.models.CigarOperation getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * The operation type.   * @param value the value to set.
   */
  public void setOperation(org.ga4gh.models.CigarOperation value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'operationLength' field.
   * The number of bases that the operation runs for.   */
  public java.lang.Long getOperationLength() {
    return operationLength;
  }

  /**
   * Sets the value of the 'operationLength' field.
   * The number of bases that the operation runs for.   * @param value the value to set.
   */
  public void setOperationLength(java.lang.Long value) {
    this.operationLength = value;
  }

  /**
   * Gets the value of the 'referenceSequence' field.
   * `referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)
  and deletions (`DELETE`). Filling this field replaces the MD tag.
  If the relevant information is not available, leave this field as `null`.   */
  public java.lang.CharSequence getReferenceSequence() {
    return referenceSequence;
  }

  /**
   * Sets the value of the 'referenceSequence' field.
   * `referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)
  and deletions (`DELETE`). Filling this field replaces the MD tag.
  If the relevant information is not available, leave this field as `null`.   * @param value the value to set.
   */
  public void setReferenceSequence(java.lang.CharSequence value) {
    this.referenceSequence = value;
  }

  /** Creates a new CigarUnit RecordBuilder */
  public static org.ga4gh.models.CigarUnit.Builder newBuilder() {
    return new org.ga4gh.models.CigarUnit.Builder();
  }
  
  /** Creates a new CigarUnit RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.CigarUnit.Builder newBuilder(org.ga4gh.models.CigarUnit.Builder other) {
    return new org.ga4gh.models.CigarUnit.Builder(other);
  }
  
  /** Creates a new CigarUnit RecordBuilder by copying an existing CigarUnit instance */
  public static org.ga4gh.models.CigarUnit.Builder newBuilder(org.ga4gh.models.CigarUnit other) {
    return new org.ga4gh.models.CigarUnit.Builder(other);
  }
  
  /**
   * RecordBuilder for CigarUnit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CigarUnit>
    implements org.apache.avro.data.RecordBuilder<CigarUnit> {

    private org.ga4gh.models.CigarOperation operation;
    private long operationLength;
    private java.lang.CharSequence referenceSequence;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.CigarUnit.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.CigarUnit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operationLength)) {
        this.operationLength = data().deepCopy(fields()[1].schema(), other.operationLength);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceSequence)) {
        this.referenceSequence = data().deepCopy(fields()[2].schema(), other.referenceSequence);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CigarUnit instance */
    private Builder(org.ga4gh.models.CigarUnit other) {
            super(org.ga4gh.models.CigarUnit.SCHEMA$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operationLength)) {
        this.operationLength = data().deepCopy(fields()[1].schema(), other.operationLength);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceSequence)) {
        this.referenceSequence = data().deepCopy(fields()[2].schema(), other.referenceSequence);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'operation' field */
    public org.ga4gh.models.CigarOperation getOperation() {
      return operation;
    }
    
    /** Sets the value of the 'operation' field */
    public org.ga4gh.models.CigarUnit.Builder setOperation(org.ga4gh.models.CigarOperation value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'operation' field has been set */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'operation' field */
    public org.ga4gh.models.CigarUnit.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'operationLength' field */
    public java.lang.Long getOperationLength() {
      return operationLength;
    }
    
    /** Sets the value of the 'operationLength' field */
    public org.ga4gh.models.CigarUnit.Builder setOperationLength(long value) {
      validate(fields()[1], value);
      this.operationLength = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'operationLength' field has been set */
    public boolean hasOperationLength() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'operationLength' field */
    public org.ga4gh.models.CigarUnit.Builder clearOperationLength() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'referenceSequence' field */
    public java.lang.CharSequence getReferenceSequence() {
      return referenceSequence;
    }
    
    /** Sets the value of the 'referenceSequence' field */
    public org.ga4gh.models.CigarUnit.Builder setReferenceSequence(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.referenceSequence = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceSequence' field has been set */
    public boolean hasReferenceSequence() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'referenceSequence' field */
    public org.ga4gh.models.CigarUnit.Builder clearReferenceSequence() {
      referenceSequence = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CigarUnit build() {
      try {
        CigarUnit record = new CigarUnit();
        record.operation = fieldSetFlags()[0] ? this.operation : (org.ga4gh.models.CigarOperation) defaultValue(fields()[0]);
        record.operationLength = fieldSetFlags()[1] ? this.operationLength : (java.lang.Long) defaultValue(fields()[1]);
        record.referenceSequence = fieldSetFlags()[2] ? this.referenceSequence : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
