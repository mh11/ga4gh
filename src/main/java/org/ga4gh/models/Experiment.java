/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** An experimental preparation of a sample. */
@org.apache.avro.specific.AvroGenerated
public class Experiment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Experiment\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An experimental preparation of a sample.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The experiment UUID. This is globally unique.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the experiment.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A description of the experiment.\",\"default\":null},{\"name\":\"createDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The time at which this record was created. \\n  Format: :ref:`ISO 8601 <metadata_date_time>`\"},{\"name\":\"updateDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The time at which this record was last updated.\\n  Format: :ref:`ISO 8601 <metadata_date_time>`\"},{\"name\":\"runTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The time at which this experiment was performed.\\n  Granularity here is variable (e.g. date only).\\n  Format: :ref:`ISO 8601 <metadata_date_time>`\",\"default\":null},{\"name\":\"molecule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The molecule examined in this experiment. (e.g. genomics DNA, total RNA)\",\"default\":null},{\"name\":\"strategy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The experiment technique or strategy applied to the sample.\\n  (e.g. whole genome sequencing, RNA-seq, RIP-seq)\",\"default\":null},{\"name\":\"selection\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The method used to enrich the target. (e.g. immunoprecipitation, size\\n  fractionation, MNase digestion)\",\"default\":null},{\"name\":\"library\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the library used as part of this experiment.\",\"default\":null},{\"name\":\"libraryLayout\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The configuration of sequenced reads. (e.g. Single or Paired)\",\"default\":null},{\"name\":\"instrumentModel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The instrument model used as part of this experiment.\\n    This maps to sequencing technology in BAM.\"},{\"name\":\"instrumentDataFile\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The data file generated by the instrument.\\n  TODO: This isn't actually a file is it?\\n  Should this be `instrumentData` instead?\",\"default\":null},{\"name\":\"sequencingCenter\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The sequencing center used as part of this experiment.\"},{\"name\":\"platformUnit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The platform unit used as part of this experiment. This is a flowcell-barcode\\n  or slide unique identifier.\",\"default\":null},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional experiment information.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The experiment UUID. This is globally unique. */
   private java.lang.String id;
  /** The name of the experiment. */
   private java.lang.String name;
  /** A description of the experiment. */
   private java.lang.String description;
  /** The time at which this record was created. 
  Format: :ref:`ISO 8601 <metadata_date_time>` */
   private java.lang.String createDateTime;
  /** The time at which this record was last updated.
  Format: :ref:`ISO 8601 <metadata_date_time>` */
   private java.lang.String updateDateTime;
  /** The time at which this experiment was performed.
  Granularity here is variable (e.g. date only).
  Format: :ref:`ISO 8601 <metadata_date_time>` */
   private java.lang.String runTime;
  /** The molecule examined in this experiment. (e.g. genomics DNA, total RNA) */
   private java.lang.String molecule;
  /** The experiment technique or strategy applied to the sample.
  (e.g. whole genome sequencing, RNA-seq, RIP-seq) */
   private java.lang.String strategy;
  /** The method used to enrich the target. (e.g. immunoprecipitation, size
  fractionation, MNase digestion) */
   private java.lang.String selection;
  /** The name of the library used as part of this experiment. */
   private java.lang.String library;
  /** The configuration of sequenced reads. (e.g. Single or Paired) */
   private java.lang.String libraryLayout;
  /** The instrument model used as part of this experiment.
    This maps to sequencing technology in BAM. */
   private java.lang.String instrumentModel;
  /** The data file generated by the instrument.
  TODO: This isn't actually a file is it?
  Should this be `instrumentData` instead? */
   private java.lang.String instrumentDataFile;
  /** The sequencing center used as part of this experiment. */
   private java.lang.String sequencingCenter;
  /** The platform unit used as part of this experiment. This is a flowcell-barcode
  or slide unique identifier. */
   private java.lang.String platformUnit;
  /** A map of additional experiment information. */
   private java.util.Map<java.lang.String,java.util.List<java.lang.String>> info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Experiment() {}

  /**
   * All-args constructor.
   */
  public Experiment(java.lang.String id, java.lang.String name, java.lang.String description, java.lang.String createDateTime, java.lang.String updateDateTime, java.lang.String runTime, java.lang.String molecule, java.lang.String strategy, java.lang.String selection, java.lang.String library, java.lang.String libraryLayout, java.lang.String instrumentModel, java.lang.String instrumentDataFile, java.lang.String sequencingCenter, java.lang.String platformUnit, java.util.Map<java.lang.String,java.util.List<java.lang.String>> info) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.createDateTime = createDateTime;
    this.updateDateTime = updateDateTime;
    this.runTime = runTime;
    this.molecule = molecule;
    this.strategy = strategy;
    this.selection = selection;
    this.library = library;
    this.libraryLayout = libraryLayout;
    this.instrumentModel = instrumentModel;
    this.instrumentDataFile = instrumentDataFile;
    this.sequencingCenter = sequencingCenter;
    this.platformUnit = platformUnit;
    this.info = info;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return createDateTime;
    case 4: return updateDateTime;
    case 5: return runTime;
    case 6: return molecule;
    case 7: return strategy;
    case 8: return selection;
    case 9: return library;
    case 10: return libraryLayout;
    case 11: return instrumentModel;
    case 12: return instrumentDataFile;
    case 13: return sequencingCenter;
    case 14: return platformUnit;
    case 15: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: createDateTime = (java.lang.String)value$; break;
    case 4: updateDateTime = (java.lang.String)value$; break;
    case 5: runTime = (java.lang.String)value$; break;
    case 6: molecule = (java.lang.String)value$; break;
    case 7: strategy = (java.lang.String)value$; break;
    case 8: selection = (java.lang.String)value$; break;
    case 9: library = (java.lang.String)value$; break;
    case 10: libraryLayout = (java.lang.String)value$; break;
    case 11: instrumentModel = (java.lang.String)value$; break;
    case 12: instrumentDataFile = (java.lang.String)value$; break;
    case 13: sequencingCenter = (java.lang.String)value$; break;
    case 14: platformUnit = (java.lang.String)value$; break;
    case 15: info = (java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The experiment UUID. This is globally unique.   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The experiment UUID. This is globally unique.   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * The name of the experiment.   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The name of the experiment.   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * A description of the experiment.   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * A description of the experiment.   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'createDateTime' field.
   * The time at which this record was created. 
  Format: :ref:`ISO 8601 <metadata_date_time>`   */
  public java.lang.String getCreateDateTime() {
    return createDateTime;
  }

  /**
   * Sets the value of the 'createDateTime' field.
   * The time at which this record was created. 
  Format: :ref:`ISO 8601 <metadata_date_time>`   * @param value the value to set.
   */
  public void setCreateDateTime(java.lang.String value) {
    this.createDateTime = value;
  }

  /**
   * Gets the value of the 'updateDateTime' field.
   * The time at which this record was last updated.
  Format: :ref:`ISO 8601 <metadata_date_time>`   */
  public java.lang.String getUpdateDateTime() {
    return updateDateTime;
  }

  /**
   * Sets the value of the 'updateDateTime' field.
   * The time at which this record was last updated.
  Format: :ref:`ISO 8601 <metadata_date_time>`   * @param value the value to set.
   */
  public void setUpdateDateTime(java.lang.String value) {
    this.updateDateTime = value;
  }

  /**
   * Gets the value of the 'runTime' field.
   * The time at which this experiment was performed.
  Granularity here is variable (e.g. date only).
  Format: :ref:`ISO 8601 <metadata_date_time>`   */
  public java.lang.String getRunTime() {
    return runTime;
  }

  /**
   * Sets the value of the 'runTime' field.
   * The time at which this experiment was performed.
  Granularity here is variable (e.g. date only).
  Format: :ref:`ISO 8601 <metadata_date_time>`   * @param value the value to set.
   */
  public void setRunTime(java.lang.String value) {
    this.runTime = value;
  }

  /**
   * Gets the value of the 'molecule' field.
   * The molecule examined in this experiment. (e.g. genomics DNA, total RNA)   */
  public java.lang.String getMolecule() {
    return molecule;
  }

  /**
   * Sets the value of the 'molecule' field.
   * The molecule examined in this experiment. (e.g. genomics DNA, total RNA)   * @param value the value to set.
   */
  public void setMolecule(java.lang.String value) {
    this.molecule = value;
  }

  /**
   * Gets the value of the 'strategy' field.
   * The experiment technique or strategy applied to the sample.
  (e.g. whole genome sequencing, RNA-seq, RIP-seq)   */
  public java.lang.String getStrategy() {
    return strategy;
  }

  /**
   * Sets the value of the 'strategy' field.
   * The experiment technique or strategy applied to the sample.
  (e.g. whole genome sequencing, RNA-seq, RIP-seq)   * @param value the value to set.
   */
  public void setStrategy(java.lang.String value) {
    this.strategy = value;
  }

  /**
   * Gets the value of the 'selection' field.
   * The method used to enrich the target. (e.g. immunoprecipitation, size
  fractionation, MNase digestion)   */
  public java.lang.String getSelection() {
    return selection;
  }

  /**
   * Sets the value of the 'selection' field.
   * The method used to enrich the target. (e.g. immunoprecipitation, size
  fractionation, MNase digestion)   * @param value the value to set.
   */
  public void setSelection(java.lang.String value) {
    this.selection = value;
  }

  /**
   * Gets the value of the 'library' field.
   * The name of the library used as part of this experiment.   */
  public java.lang.String getLibrary() {
    return library;
  }

  /**
   * Sets the value of the 'library' field.
   * The name of the library used as part of this experiment.   * @param value the value to set.
   */
  public void setLibrary(java.lang.String value) {
    this.library = value;
  }

  /**
   * Gets the value of the 'libraryLayout' field.
   * The configuration of sequenced reads. (e.g. Single or Paired)   */
  public java.lang.String getLibraryLayout() {
    return libraryLayout;
  }

  /**
   * Sets the value of the 'libraryLayout' field.
   * The configuration of sequenced reads. (e.g. Single or Paired)   * @param value the value to set.
   */
  public void setLibraryLayout(java.lang.String value) {
    this.libraryLayout = value;
  }

  /**
   * Gets the value of the 'instrumentModel' field.
   * The instrument model used as part of this experiment.
    This maps to sequencing technology in BAM.   */
  public java.lang.String getInstrumentModel() {
    return instrumentModel;
  }

  /**
   * Sets the value of the 'instrumentModel' field.
   * The instrument model used as part of this experiment.
    This maps to sequencing technology in BAM.   * @param value the value to set.
   */
  public void setInstrumentModel(java.lang.String value) {
    this.instrumentModel = value;
  }

  /**
   * Gets the value of the 'instrumentDataFile' field.
   * The data file generated by the instrument.
  TODO: This isn't actually a file is it?
  Should this be `instrumentData` instead?   */
  public java.lang.String getInstrumentDataFile() {
    return instrumentDataFile;
  }

  /**
   * Sets the value of the 'instrumentDataFile' field.
   * The data file generated by the instrument.
  TODO: This isn't actually a file is it?
  Should this be `instrumentData` instead?   * @param value the value to set.
   */
  public void setInstrumentDataFile(java.lang.String value) {
    this.instrumentDataFile = value;
  }

  /**
   * Gets the value of the 'sequencingCenter' field.
   * The sequencing center used as part of this experiment.   */
  public java.lang.String getSequencingCenter() {
    return sequencingCenter;
  }

  /**
   * Sets the value of the 'sequencingCenter' field.
   * The sequencing center used as part of this experiment.   * @param value the value to set.
   */
  public void setSequencingCenter(java.lang.String value) {
    this.sequencingCenter = value;
  }

  /**
   * Gets the value of the 'platformUnit' field.
   * The platform unit used as part of this experiment. This is a flowcell-barcode
  or slide unique identifier.   */
  public java.lang.String getPlatformUnit() {
    return platformUnit;
  }

  /**
   * Sets the value of the 'platformUnit' field.
   * The platform unit used as part of this experiment. This is a flowcell-barcode
  or slide unique identifier.   * @param value the value to set.
   */
  public void setPlatformUnit(java.lang.String value) {
    this.platformUnit = value;
  }

  /**
   * Gets the value of the 'info' field.
   * A map of additional experiment information.   */
  public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * A map of additional experiment information.   * @param value the value to set.
   */
  public void setInfo(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
    this.info = value;
  }

  /** Creates a new Experiment RecordBuilder */
  public static org.ga4gh.models.Experiment.Builder newBuilder() {
    return new org.ga4gh.models.Experiment.Builder();
  }
  
  /** Creates a new Experiment RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.Experiment.Builder newBuilder(org.ga4gh.models.Experiment.Builder other) {
    return new org.ga4gh.models.Experiment.Builder(other);
  }
  
  /** Creates a new Experiment RecordBuilder by copying an existing Experiment instance */
  public static org.ga4gh.models.Experiment.Builder newBuilder(org.ga4gh.models.Experiment other) {
    return new org.ga4gh.models.Experiment.Builder(other);
  }
  
  /**
   * RecordBuilder for Experiment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Experiment>
    implements org.apache.avro.data.RecordBuilder<Experiment> {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String description;
    private java.lang.String createDateTime;
    private java.lang.String updateDateTime;
    private java.lang.String runTime;
    private java.lang.String molecule;
    private java.lang.String strategy;
    private java.lang.String selection;
    private java.lang.String library;
    private java.lang.String libraryLayout;
    private java.lang.String instrumentModel;
    private java.lang.String instrumentDataFile;
    private java.lang.String sequencingCenter;
    private java.lang.String platformUnit;
    private java.util.Map<java.lang.String,java.util.List<java.lang.String>> info;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.Experiment.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.Experiment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDateTime)) {
        this.createDateTime = data().deepCopy(fields()[3].schema(), other.createDateTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updateDateTime)) {
        this.updateDateTime = data().deepCopy(fields()[4].schema(), other.updateDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runTime)) {
        this.runTime = data().deepCopy(fields()[5].schema(), other.runTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.molecule)) {
        this.molecule = data().deepCopy(fields()[6].schema(), other.molecule);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.strategy)) {
        this.strategy = data().deepCopy(fields()[7].schema(), other.strategy);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.selection)) {
        this.selection = data().deepCopy(fields()[8].schema(), other.selection);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.library)) {
        this.library = data().deepCopy(fields()[9].schema(), other.library);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.libraryLayout)) {
        this.libraryLayout = data().deepCopy(fields()[10].schema(), other.libraryLayout);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.instrumentModel)) {
        this.instrumentModel = data().deepCopy(fields()[11].schema(), other.instrumentModel);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.instrumentDataFile)) {
        this.instrumentDataFile = data().deepCopy(fields()[12].schema(), other.instrumentDataFile);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sequencingCenter)) {
        this.sequencingCenter = data().deepCopy(fields()[13].schema(), other.sequencingCenter);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.platformUnit)) {
        this.platformUnit = data().deepCopy(fields()[14].schema(), other.platformUnit);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.info)) {
        this.info = data().deepCopy(fields()[15].schema(), other.info);
        fieldSetFlags()[15] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Experiment instance */
    private Builder(org.ga4gh.models.Experiment other) {
            super(org.ga4gh.models.Experiment.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDateTime)) {
        this.createDateTime = data().deepCopy(fields()[3].schema(), other.createDateTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updateDateTime)) {
        this.updateDateTime = data().deepCopy(fields()[4].schema(), other.updateDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runTime)) {
        this.runTime = data().deepCopy(fields()[5].schema(), other.runTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.molecule)) {
        this.molecule = data().deepCopy(fields()[6].schema(), other.molecule);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.strategy)) {
        this.strategy = data().deepCopy(fields()[7].schema(), other.strategy);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.selection)) {
        this.selection = data().deepCopy(fields()[8].schema(), other.selection);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.library)) {
        this.library = data().deepCopy(fields()[9].schema(), other.library);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.libraryLayout)) {
        this.libraryLayout = data().deepCopy(fields()[10].schema(), other.libraryLayout);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.instrumentModel)) {
        this.instrumentModel = data().deepCopy(fields()[11].schema(), other.instrumentModel);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.instrumentDataFile)) {
        this.instrumentDataFile = data().deepCopy(fields()[12].schema(), other.instrumentDataFile);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sequencingCenter)) {
        this.sequencingCenter = data().deepCopy(fields()[13].schema(), other.sequencingCenter);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.platformUnit)) {
        this.platformUnit = data().deepCopy(fields()[14].schema(), other.platformUnit);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.info)) {
        this.info = data().deepCopy(fields()[15].schema(), other.info);
        fieldSetFlags()[15] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.models.Experiment.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.models.Experiment.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ga4gh.models.Experiment.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public org.ga4gh.models.Experiment.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ga4gh.models.Experiment.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public org.ga4gh.models.Experiment.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'createDateTime' field */
    public java.lang.String getCreateDateTime() {
      return createDateTime;
    }
    
    /** Sets the value of the 'createDateTime' field */
    public org.ga4gh.models.Experiment.Builder setCreateDateTime(java.lang.String value) {
      validate(fields()[3], value);
      this.createDateTime = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'createDateTime' field has been set */
    public boolean hasCreateDateTime() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'createDateTime' field */
    public org.ga4gh.models.Experiment.Builder clearCreateDateTime() {
      createDateTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'updateDateTime' field */
    public java.lang.String getUpdateDateTime() {
      return updateDateTime;
    }
    
    /** Sets the value of the 'updateDateTime' field */
    public org.ga4gh.models.Experiment.Builder setUpdateDateTime(java.lang.String value) {
      validate(fields()[4], value);
      this.updateDateTime = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'updateDateTime' field has been set */
    public boolean hasUpdateDateTime() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'updateDateTime' field */
    public org.ga4gh.models.Experiment.Builder clearUpdateDateTime() {
      updateDateTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'runTime' field */
    public java.lang.String getRunTime() {
      return runTime;
    }
    
    /** Sets the value of the 'runTime' field */
    public org.ga4gh.models.Experiment.Builder setRunTime(java.lang.String value) {
      validate(fields()[5], value);
      this.runTime = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'runTime' field has been set */
    public boolean hasRunTime() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'runTime' field */
    public org.ga4gh.models.Experiment.Builder clearRunTime() {
      runTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'molecule' field */
    public java.lang.String getMolecule() {
      return molecule;
    }
    
    /** Sets the value of the 'molecule' field */
    public org.ga4gh.models.Experiment.Builder setMolecule(java.lang.String value) {
      validate(fields()[6], value);
      this.molecule = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'molecule' field has been set */
    public boolean hasMolecule() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'molecule' field */
    public org.ga4gh.models.Experiment.Builder clearMolecule() {
      molecule = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'strategy' field */
    public java.lang.String getStrategy() {
      return strategy;
    }
    
    /** Sets the value of the 'strategy' field */
    public org.ga4gh.models.Experiment.Builder setStrategy(java.lang.String value) {
      validate(fields()[7], value);
      this.strategy = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'strategy' field has been set */
    public boolean hasStrategy() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'strategy' field */
    public org.ga4gh.models.Experiment.Builder clearStrategy() {
      strategy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'selection' field */
    public java.lang.String getSelection() {
      return selection;
    }
    
    /** Sets the value of the 'selection' field */
    public org.ga4gh.models.Experiment.Builder setSelection(java.lang.String value) {
      validate(fields()[8], value);
      this.selection = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'selection' field has been set */
    public boolean hasSelection() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'selection' field */
    public org.ga4gh.models.Experiment.Builder clearSelection() {
      selection = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'library' field */
    public java.lang.String getLibrary() {
      return library;
    }
    
    /** Sets the value of the 'library' field */
    public org.ga4gh.models.Experiment.Builder setLibrary(java.lang.String value) {
      validate(fields()[9], value);
      this.library = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'library' field has been set */
    public boolean hasLibrary() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'library' field */
    public org.ga4gh.models.Experiment.Builder clearLibrary() {
      library = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'libraryLayout' field */
    public java.lang.String getLibraryLayout() {
      return libraryLayout;
    }
    
    /** Sets the value of the 'libraryLayout' field */
    public org.ga4gh.models.Experiment.Builder setLibraryLayout(java.lang.String value) {
      validate(fields()[10], value);
      this.libraryLayout = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'libraryLayout' field has been set */
    public boolean hasLibraryLayout() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'libraryLayout' field */
    public org.ga4gh.models.Experiment.Builder clearLibraryLayout() {
      libraryLayout = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'instrumentModel' field */
    public java.lang.String getInstrumentModel() {
      return instrumentModel;
    }
    
    /** Sets the value of the 'instrumentModel' field */
    public org.ga4gh.models.Experiment.Builder setInstrumentModel(java.lang.String value) {
      validate(fields()[11], value);
      this.instrumentModel = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentModel' field has been set */
    public boolean hasInstrumentModel() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'instrumentModel' field */
    public org.ga4gh.models.Experiment.Builder clearInstrumentModel() {
      instrumentModel = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'instrumentDataFile' field */
    public java.lang.String getInstrumentDataFile() {
      return instrumentDataFile;
    }
    
    /** Sets the value of the 'instrumentDataFile' field */
    public org.ga4gh.models.Experiment.Builder setInstrumentDataFile(java.lang.String value) {
      validate(fields()[12], value);
      this.instrumentDataFile = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentDataFile' field has been set */
    public boolean hasInstrumentDataFile() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'instrumentDataFile' field */
    public org.ga4gh.models.Experiment.Builder clearInstrumentDataFile() {
      instrumentDataFile = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'sequencingCenter' field */
    public java.lang.String getSequencingCenter() {
      return sequencingCenter;
    }
    
    /** Sets the value of the 'sequencingCenter' field */
    public org.ga4gh.models.Experiment.Builder setSequencingCenter(java.lang.String value) {
      validate(fields()[13], value);
      this.sequencingCenter = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'sequencingCenter' field has been set */
    public boolean hasSequencingCenter() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'sequencingCenter' field */
    public org.ga4gh.models.Experiment.Builder clearSequencingCenter() {
      sequencingCenter = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'platformUnit' field */
    public java.lang.String getPlatformUnit() {
      return platformUnit;
    }
    
    /** Sets the value of the 'platformUnit' field */
    public org.ga4gh.models.Experiment.Builder setPlatformUnit(java.lang.String value) {
      validate(fields()[14], value);
      this.platformUnit = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'platformUnit' field has been set */
    public boolean hasPlatformUnit() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'platformUnit' field */
    public org.ga4gh.models.Experiment.Builder clearPlatformUnit() {
      platformUnit = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'info' field */
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getInfo() {
      return info;
    }
    
    /** Sets the value of the 'info' field */
    public org.ga4gh.models.Experiment.Builder setInfo(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
      validate(fields()[15], value);
      this.info = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'info' field */
    public org.ga4gh.models.Experiment.Builder clearInfo() {
      info = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public Experiment build() {
      try {
        Experiment record = new Experiment();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.createDateTime = fieldSetFlags()[3] ? this.createDateTime : (java.lang.String) defaultValue(fields()[3]);
        record.updateDateTime = fieldSetFlags()[4] ? this.updateDateTime : (java.lang.String) defaultValue(fields()[4]);
        record.runTime = fieldSetFlags()[5] ? this.runTime : (java.lang.String) defaultValue(fields()[5]);
        record.molecule = fieldSetFlags()[6] ? this.molecule : (java.lang.String) defaultValue(fields()[6]);
        record.strategy = fieldSetFlags()[7] ? this.strategy : (java.lang.String) defaultValue(fields()[7]);
        record.selection = fieldSetFlags()[8] ? this.selection : (java.lang.String) defaultValue(fields()[8]);
        record.library = fieldSetFlags()[9] ? this.library : (java.lang.String) defaultValue(fields()[9]);
        record.libraryLayout = fieldSetFlags()[10] ? this.libraryLayout : (java.lang.String) defaultValue(fields()[10]);
        record.instrumentModel = fieldSetFlags()[11] ? this.instrumentModel : (java.lang.String) defaultValue(fields()[11]);
        record.instrumentDataFile = fieldSetFlags()[12] ? this.instrumentDataFile : (java.lang.String) defaultValue(fields()[12]);
        record.sequencingCenter = fieldSetFlags()[13] ? this.sequencingCenter : (java.lang.String) defaultValue(fields()[13]);
        record.platformUnit = fieldSetFlags()[14] ? this.platformUnit : (java.lang.String) defaultValue(fields()[14]);
        record.info = fieldSetFlags()[15] ? this.info : (java.util.Map<java.lang.String,java.util.List<java.lang.String>>) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
