/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** Node in the annotation graph that annotates a contiguous region of a
  sequence. */
@org.apache.avro.specific.AvroGenerated
public class Feature extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Feature\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"Node in the annotation graph that annotates a contiguous region of a\\n  sequence.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Id of this annotation node.\"},{\"name\":\"parentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Parent Id of this node. Set to empty string if node has no parent.\"},{\"name\":\"childIds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Ordered array of Child Ids of this node.\\n    Since not all child nodes are ordered by genomic coordinates,\\n    this can't always be reconstructed from parentId's of the children alone.\",\"default\":[]},{\"name\":\"featureSetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Identifier for the containing feature set.\"},{\"name\":\"referenceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The reference on which this feature occurs.\\n    (e.g. `chr20` or `X`)\"},{\"name\":\"start\",\"type\":\"long\",\"doc\":\"The start position at which this feature occurs (0-based).\\n    This corresponds to the first base of the string of reference bases.\\n    Genomic positions are non-negative integers less than reference length.\\n    Features spanning the join of circular genomes are represented as\\n    two features one on each side of the join (position 0).\",\"default\":0},{\"name\":\"end\",\"type\":\"long\",\"doc\":\"The end position (exclusive), resulting in [start, end) closed-open interval.\\n    This is typically calculated by `start + referenceBases.length`.\"},{\"name\":\"strand\",\"type\":{\"type\":\"enum\",\"name\":\"Strand\",\"doc\":\"Indicates the DNA strand associate for some data item.\\n* `NEG_STRAND`: The negative (-) strand.\\n* `POS_STRAND`:  The postive (+) strand.\",\"symbols\":[\"NEG_STRAND\",\"POS_STRAND\"]},\"doc\":\"The strand on which the feature is present.\"},{\"name\":\"featureType\",\"type\":{\"type\":\"record\",\"name\":\"OntologyTerm\",\"doc\":\"An ontology term describing an attribute. (e.g. the phenotype attribute\\n  'polydactyly' from HPO)\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Ontology source identifier - the identifier, a CURIE (preferred) or\\n  PURL for an ontology source e.g. http://purl.obolibrary.org/obo/hp.obo\\n  It differs from the standard GA4GH schema's :ref:`id <apidesign_object_ids>`\\n  in that it is a URI pointing to an information resource outside of the scope\\n  of the schema or its resource implementation.\"},{\"name\":\"term\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ontology term - the representation the id is pointing to.\",\"default\":null},{\"name\":\"sourceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ontology source name - the name of ontology from which the term is obtained\\n  e.g. 'Human Phenotype Ontology'\",\"default\":null},{\"name\":\"sourceVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ontology source version - the version of the ontology from which the\\n  OntologyTerm is obtained; e.g. 2.6.1.\\n  There is no standard for ontology versioning and some frequently\\n  released ontologies may use a datestamp, or build number.\",\"default\":null}]},\"doc\":\"Feature that is annotated by this region.  Normally, this will be a term in\\n    the Sequence Ontology.\"},{\"name\":\"attributes\",\"type\":{\"type\":\"record\",\"name\":\"Attributes\",\"doc\":\"Type defining a collection of attributes associated with various protocol\\n  records.  Each attribute is a name that maps to an array of one or more\\n  values.  Values can be strings, external identifiers, or ontology terms.\\n  Values should be split into the array elements instead of using a separator\\n  syntax that needs to parsed.\",\"fields\":[{\"name\":\"vals\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},{\"type\":\"record\",\"name\":\"ExternalIdentifier\",\"doc\":\"Identifier from a public database\",\"fields\":[{\"name\":\"database\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The source of the identifier.\\n  (e.g. `Ensembl`)\"},{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID defined by the external database.\\n  (e.g. `ENST00000000000`)\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The version of the object or the database\\n  (e.g. `78`)\"}]},\"OntologyTerm\"]},\"avro.java.string\":\"String\"},\"default\":{}}]},\"doc\":\"Name/value attributes of the annotation.  Attribute names follow the GFF3\\n    naming convention of reserved names starting with an upper cases\\n    character, and user-define names start with lower-case.  Most GFF3\\n    pre-defined attributes apply, the exceptions are ID and Parent, which are\\n    defined as fields. Additional, the following attributes are added:\\n    * Score - the GFF3 score column\\n    * Phase - the GFF3 phase column for CDS features.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Id of this annotation node. */
   private java.lang.String id;
  /** Parent Id of this node. Set to empty string if node has no parent. */
   private java.lang.String parentId;
  /** Ordered array of Child Ids of this node.
    Since not all child nodes are ordered by genomic coordinates,
    this can't always be reconstructed from parentId's of the children alone. */
   private java.util.List<java.lang.String> childIds;
  /** Identifier for the containing feature set. */
   private java.lang.String featureSetId;
  /** The reference on which this feature occurs.
    (e.g. `chr20` or `X`) */
   private java.lang.String referenceName;
  /** The start position at which this feature occurs (0-based).
    This corresponds to the first base of the string of reference bases.
    Genomic positions are non-negative integers less than reference length.
    Features spanning the join of circular genomes are represented as
    two features one on each side of the join (position 0). */
   private long start;
  /** The end position (exclusive), resulting in [start, end) closed-open interval.
    This is typically calculated by `start + referenceBases.length`. */
   private long end;
  /** The strand on which the feature is present. */
   private org.ga4gh.models.Strand strand;
  /** Feature that is annotated by this region.  Normally, this will be a term in
    the Sequence Ontology. */
   private org.ga4gh.models.OntologyTerm featureType;
  /** Name/value attributes of the annotation.  Attribute names follow the GFF3
    naming convention of reserved names starting with an upper cases
    character, and user-define names start with lower-case.  Most GFF3
    pre-defined attributes apply, the exceptions are ID and Parent, which are
    defined as fields. Additional, the following attributes are added:
    * Score - the GFF3 score column
    * Phase - the GFF3 phase column for CDS features. */
   private org.ga4gh.models.Attributes attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Feature() {}

  /**
   * All-args constructor.
   */
  public Feature(java.lang.String id, java.lang.String parentId, java.util.List<java.lang.String> childIds, java.lang.String featureSetId, java.lang.String referenceName, java.lang.Long start, java.lang.Long end, org.ga4gh.models.Strand strand, org.ga4gh.models.OntologyTerm featureType, org.ga4gh.models.Attributes attributes) {
    this.id = id;
    this.parentId = parentId;
    this.childIds = childIds;
    this.featureSetId = featureSetId;
    this.referenceName = referenceName;
    this.start = start;
    this.end = end;
    this.strand = strand;
    this.featureType = featureType;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return parentId;
    case 2: return childIds;
    case 3: return featureSetId;
    case 4: return referenceName;
    case 5: return start;
    case 6: return end;
    case 7: return strand;
    case 8: return featureType;
    case 9: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: parentId = (java.lang.String)value$; break;
    case 2: childIds = (java.util.List<java.lang.String>)value$; break;
    case 3: featureSetId = (java.lang.String)value$; break;
    case 4: referenceName = (java.lang.String)value$; break;
    case 5: start = (java.lang.Long)value$; break;
    case 6: end = (java.lang.Long)value$; break;
    case 7: strand = (org.ga4gh.models.Strand)value$; break;
    case 8: featureType = (org.ga4gh.models.OntologyTerm)value$; break;
    case 9: attributes = (org.ga4gh.models.Attributes)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * Id of this annotation node.   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Id of this annotation node.   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'parentId' field.
   * Parent Id of this node. Set to empty string if node has no parent.   */
  public java.lang.String getParentId() {
    return parentId;
  }

  /**
   * Sets the value of the 'parentId' field.
   * Parent Id of this node. Set to empty string if node has no parent.   * @param value the value to set.
   */
  public void setParentId(java.lang.String value) {
    this.parentId = value;
  }

  /**
   * Gets the value of the 'childIds' field.
   * Ordered array of Child Ids of this node.
    Since not all child nodes are ordered by genomic coordinates,
    this can't always be reconstructed from parentId's of the children alone.   */
  public java.util.List<java.lang.String> getChildIds() {
    return childIds;
  }

  /**
   * Sets the value of the 'childIds' field.
   * Ordered array of Child Ids of this node.
    Since not all child nodes are ordered by genomic coordinates,
    this can't always be reconstructed from parentId's of the children alone.   * @param value the value to set.
   */
  public void setChildIds(java.util.List<java.lang.String> value) {
    this.childIds = value;
  }

  /**
   * Gets the value of the 'featureSetId' field.
   * Identifier for the containing feature set.   */
  public java.lang.String getFeatureSetId() {
    return featureSetId;
  }

  /**
   * Sets the value of the 'featureSetId' field.
   * Identifier for the containing feature set.   * @param value the value to set.
   */
  public void setFeatureSetId(java.lang.String value) {
    this.featureSetId = value;
  }

  /**
   * Gets the value of the 'referenceName' field.
   * The reference on which this feature occurs.
    (e.g. `chr20` or `X`)   */
  public java.lang.String getReferenceName() {
    return referenceName;
  }

  /**
   * Sets the value of the 'referenceName' field.
   * The reference on which this feature occurs.
    (e.g. `chr20` or `X`)   * @param value the value to set.
   */
  public void setReferenceName(java.lang.String value) {
    this.referenceName = value;
  }

  /**
   * Gets the value of the 'start' field.
   * The start position at which this feature occurs (0-based).
    This corresponds to the first base of the string of reference bases.
    Genomic positions are non-negative integers less than reference length.
    Features spanning the join of circular genomes are represented as
    two features one on each side of the join (position 0).   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * The start position at which this feature occurs (0-based).
    This corresponds to the first base of the string of reference bases.
    Genomic positions are non-negative integers less than reference length.
    Features spanning the join of circular genomes are represented as
    two features one on each side of the join (position 0).   * @param value the value to set.
   */
  public void setStart(java.lang.Long value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   * The end position (exclusive), resulting in [start, end) closed-open interval.
    This is typically calculated by `start + referenceBases.length`.   */
  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * The end position (exclusive), resulting in [start, end) closed-open interval.
    This is typically calculated by `start + referenceBases.length`.   * @param value the value to set.
   */
  public void setEnd(java.lang.Long value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'strand' field.
   * The strand on which the feature is present.   */
  public org.ga4gh.models.Strand getStrand() {
    return strand;
  }

  /**
   * Sets the value of the 'strand' field.
   * The strand on which the feature is present.   * @param value the value to set.
   */
  public void setStrand(org.ga4gh.models.Strand value) {
    this.strand = value;
  }

  /**
   * Gets the value of the 'featureType' field.
   * Feature that is annotated by this region.  Normally, this will be a term in
    the Sequence Ontology.   */
  public org.ga4gh.models.OntologyTerm getFeatureType() {
    return featureType;
  }

  /**
   * Sets the value of the 'featureType' field.
   * Feature that is annotated by this region.  Normally, this will be a term in
    the Sequence Ontology.   * @param value the value to set.
   */
  public void setFeatureType(org.ga4gh.models.OntologyTerm value) {
    this.featureType = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * Name/value attributes of the annotation.  Attribute names follow the GFF3
    naming convention of reserved names starting with an upper cases
    character, and user-define names start with lower-case.  Most GFF3
    pre-defined attributes apply, the exceptions are ID and Parent, which are
    defined as fields. Additional, the following attributes are added:
    * Score - the GFF3 score column
    * Phase - the GFF3 phase column for CDS features.   */
  public org.ga4gh.models.Attributes getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * Name/value attributes of the annotation.  Attribute names follow the GFF3
    naming convention of reserved names starting with an upper cases
    character, and user-define names start with lower-case.  Most GFF3
    pre-defined attributes apply, the exceptions are ID and Parent, which are
    defined as fields. Additional, the following attributes are added:
    * Score - the GFF3 score column
    * Phase - the GFF3 phase column for CDS features.   * @param value the value to set.
   */
  public void setAttributes(org.ga4gh.models.Attributes value) {
    this.attributes = value;
  }

  /** Creates a new Feature RecordBuilder */
  public static org.ga4gh.models.Feature.Builder newBuilder() {
    return new org.ga4gh.models.Feature.Builder();
  }
  
  /** Creates a new Feature RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.Feature.Builder newBuilder(org.ga4gh.models.Feature.Builder other) {
    return new org.ga4gh.models.Feature.Builder(other);
  }
  
  /** Creates a new Feature RecordBuilder by copying an existing Feature instance */
  public static org.ga4gh.models.Feature.Builder newBuilder(org.ga4gh.models.Feature other) {
    return new org.ga4gh.models.Feature.Builder(other);
  }
  
  /**
   * RecordBuilder for Feature instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Feature>
    implements org.apache.avro.data.RecordBuilder<Feature> {

    private java.lang.String id;
    private java.lang.String parentId;
    private java.util.List<java.lang.String> childIds;
    private java.lang.String featureSetId;
    private java.lang.String referenceName;
    private long start;
    private long end;
    private org.ga4gh.models.Strand strand;
    private org.ga4gh.models.OntologyTerm featureType;
    private org.ga4gh.models.Attributes attributes;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.Feature.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.Feature.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.childIds)) {
        this.childIds = data().deepCopy(fields()[2].schema(), other.childIds);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.featureSetId)) {
        this.featureSetId = data().deepCopy(fields()[3].schema(), other.featureSetId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[4].schema(), other.referenceName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.start)) {
        this.start = data().deepCopy(fields()[5].schema(), other.start);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.end)) {
        this.end = data().deepCopy(fields()[6].schema(), other.end);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.strand)) {
        this.strand = data().deepCopy(fields()[7].schema(), other.strand);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.featureType)) {
        this.featureType = data().deepCopy(fields()[8].schema(), other.featureType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.attributes)) {
        this.attributes = data().deepCopy(fields()[9].schema(), other.attributes);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Feature instance */
    private Builder(org.ga4gh.models.Feature other) {
            super(org.ga4gh.models.Feature.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.childIds)) {
        this.childIds = data().deepCopy(fields()[2].schema(), other.childIds);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.featureSetId)) {
        this.featureSetId = data().deepCopy(fields()[3].schema(), other.featureSetId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[4].schema(), other.referenceName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.start)) {
        this.start = data().deepCopy(fields()[5].schema(), other.start);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.end)) {
        this.end = data().deepCopy(fields()[6].schema(), other.end);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.strand)) {
        this.strand = data().deepCopy(fields()[7].schema(), other.strand);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.featureType)) {
        this.featureType = data().deepCopy(fields()[8].schema(), other.featureType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.attributes)) {
        this.attributes = data().deepCopy(fields()[9].schema(), other.attributes);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.models.Feature.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.models.Feature.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'parentId' field */
    public java.lang.String getParentId() {
      return parentId;
    }
    
    /** Sets the value of the 'parentId' field */
    public org.ga4gh.models.Feature.Builder setParentId(java.lang.String value) {
      validate(fields()[1], value);
      this.parentId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'parentId' field has been set */
    public boolean hasParentId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'parentId' field */
    public org.ga4gh.models.Feature.Builder clearParentId() {
      parentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'childIds' field */
    public java.util.List<java.lang.String> getChildIds() {
      return childIds;
    }
    
    /** Sets the value of the 'childIds' field */
    public org.ga4gh.models.Feature.Builder setChildIds(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.childIds = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'childIds' field has been set */
    public boolean hasChildIds() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'childIds' field */
    public org.ga4gh.models.Feature.Builder clearChildIds() {
      childIds = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'featureSetId' field */
    public java.lang.String getFeatureSetId() {
      return featureSetId;
    }
    
    /** Sets the value of the 'featureSetId' field */
    public org.ga4gh.models.Feature.Builder setFeatureSetId(java.lang.String value) {
      validate(fields()[3], value);
      this.featureSetId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'featureSetId' field has been set */
    public boolean hasFeatureSetId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'featureSetId' field */
    public org.ga4gh.models.Feature.Builder clearFeatureSetId() {
      featureSetId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'referenceName' field */
    public java.lang.String getReferenceName() {
      return referenceName;
    }
    
    /** Sets the value of the 'referenceName' field */
    public org.ga4gh.models.Feature.Builder setReferenceName(java.lang.String value) {
      validate(fields()[4], value);
      this.referenceName = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceName' field has been set */
    public boolean hasReferenceName() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'referenceName' field */
    public org.ga4gh.models.Feature.Builder clearReferenceName() {
      referenceName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Long getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.ga4gh.models.Feature.Builder setStart(long value) {
      validate(fields()[5], value);
      this.start = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'start' field */
    public org.ga4gh.models.Feature.Builder clearStart() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Long getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.ga4gh.models.Feature.Builder setEnd(long value) {
      validate(fields()[6], value);
      this.end = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'end' field */
    public org.ga4gh.models.Feature.Builder clearEnd() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'strand' field */
    public org.ga4gh.models.Strand getStrand() {
      return strand;
    }
    
    /** Sets the value of the 'strand' field */
    public org.ga4gh.models.Feature.Builder setStrand(org.ga4gh.models.Strand value) {
      validate(fields()[7], value);
      this.strand = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'strand' field has been set */
    public boolean hasStrand() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'strand' field */
    public org.ga4gh.models.Feature.Builder clearStrand() {
      strand = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'featureType' field */
    public org.ga4gh.models.OntologyTerm getFeatureType() {
      return featureType;
    }
    
    /** Sets the value of the 'featureType' field */
    public org.ga4gh.models.Feature.Builder setFeatureType(org.ga4gh.models.OntologyTerm value) {
      validate(fields()[8], value);
      this.featureType = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'featureType' field has been set */
    public boolean hasFeatureType() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'featureType' field */
    public org.ga4gh.models.Feature.Builder clearFeatureType() {
      featureType = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'attributes' field */
    public org.ga4gh.models.Attributes getAttributes() {
      return attributes;
    }
    
    /** Sets the value of the 'attributes' field */
    public org.ga4gh.models.Feature.Builder setAttributes(org.ga4gh.models.Attributes value) {
      validate(fields()[9], value);
      this.attributes = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'attributes' field */
    public org.ga4gh.models.Feature.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public Feature build() {
      try {
        Feature record = new Feature();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.parentId = fieldSetFlags()[1] ? this.parentId : (java.lang.String) defaultValue(fields()[1]);
        record.childIds = fieldSetFlags()[2] ? this.childIds : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.featureSetId = fieldSetFlags()[3] ? this.featureSetId : (java.lang.String) defaultValue(fields()[3]);
        record.referenceName = fieldSetFlags()[4] ? this.referenceName : (java.lang.String) defaultValue(fields()[4]);
        record.start = fieldSetFlags()[5] ? this.start : (java.lang.Long) defaultValue(fields()[5]);
        record.end = fieldSetFlags()[6] ? this.end : (java.lang.Long) defaultValue(fields()[6]);
        record.strand = fieldSetFlags()[7] ? this.strand : (org.ga4gh.models.Strand) defaultValue(fields()[7]);
        record.featureType = fieldSetFlags()[8] ? this.featureType : (org.ga4gh.models.OntologyTerm) defaultValue(fields()[8]);
        record.attributes = fieldSetFlags()[9] ? this.attributes : (org.ga4gh.models.Attributes) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
