/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** A HGVSAnnotation record holds Human Genome Variation Society descriptions
of the sequence change with respect to genomic, transcript and protein
sequences. See: http://www.hgvs.org/mutnomen/recs.html.
Descriptions should be provided at genomic level. Descriptions at transcript
level should be provided when the allele lies within a transcript. Descriptions
at protein level should be provided when the allele lies within the translated
sequence or stop codon. */
@org.apache.avro.specific.AvroGenerated
public class HGVSAnnotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HGVSAnnotation\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A HGVSAnnotation record holds Human Genome Variation Society descriptions\\nof the sequence change with respect to genomic, transcript and protein\\nsequences. See: http://www.hgvs.org/mutnomen/recs.html.\\nDescriptions should be provided at genomic level. Descriptions at transcript\\nlevel should be provided when the allele lies within a transcript. Descriptions\\nat protein level should be provided when the allele lies within the translated\\nsequence or stop codon.\",\"fields\":[{\"name\":\"genomic\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transcript\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"protein\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String genomic;
   private java.lang.String transcript;
   private java.lang.String protein;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HGVSAnnotation() {}

  /**
   * All-args constructor.
   */
  public HGVSAnnotation(java.lang.String genomic, java.lang.String transcript, java.lang.String protein) {
    this.genomic = genomic;
    this.transcript = transcript;
    this.protein = protein;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return genomic;
    case 1: return transcript;
    case 2: return protein;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: genomic = (java.lang.String)value$; break;
    case 1: transcript = (java.lang.String)value$; break;
    case 2: protein = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'genomic' field.
   */
  public java.lang.String getGenomic() {
    return genomic;
  }

  /**
   * Sets the value of the 'genomic' field.
   * @param value the value to set.
   */
  public void setGenomic(java.lang.String value) {
    this.genomic = value;
  }

  /**
   * Gets the value of the 'transcript' field.
   */
  public java.lang.String getTranscript() {
    return transcript;
  }

  /**
   * Sets the value of the 'transcript' field.
   * @param value the value to set.
   */
  public void setTranscript(java.lang.String value) {
    this.transcript = value;
  }

  /**
   * Gets the value of the 'protein' field.
   */
  public java.lang.String getProtein() {
    return protein;
  }

  /**
   * Sets the value of the 'protein' field.
   * @param value the value to set.
   */
  public void setProtein(java.lang.String value) {
    this.protein = value;
  }

  /** Creates a new HGVSAnnotation RecordBuilder */
  public static org.ga4gh.models.HGVSAnnotation.Builder newBuilder() {
    return new org.ga4gh.models.HGVSAnnotation.Builder();
  }
  
  /** Creates a new HGVSAnnotation RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.HGVSAnnotation.Builder newBuilder(org.ga4gh.models.HGVSAnnotation.Builder other) {
    return new org.ga4gh.models.HGVSAnnotation.Builder(other);
  }
  
  /** Creates a new HGVSAnnotation RecordBuilder by copying an existing HGVSAnnotation instance */
  public static org.ga4gh.models.HGVSAnnotation.Builder newBuilder(org.ga4gh.models.HGVSAnnotation other) {
    return new org.ga4gh.models.HGVSAnnotation.Builder(other);
  }
  
  /**
   * RecordBuilder for HGVSAnnotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HGVSAnnotation>
    implements org.apache.avro.data.RecordBuilder<HGVSAnnotation> {

    private java.lang.String genomic;
    private java.lang.String transcript;
    private java.lang.String protein;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.HGVSAnnotation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.HGVSAnnotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.genomic)) {
        this.genomic = data().deepCopy(fields()[0].schema(), other.genomic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transcript)) {
        this.transcript = data().deepCopy(fields()[1].schema(), other.transcript);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.protein)) {
        this.protein = data().deepCopy(fields()[2].schema(), other.protein);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HGVSAnnotation instance */
    private Builder(org.ga4gh.models.HGVSAnnotation other) {
            super(org.ga4gh.models.HGVSAnnotation.SCHEMA$);
      if (isValidValue(fields()[0], other.genomic)) {
        this.genomic = data().deepCopy(fields()[0].schema(), other.genomic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transcript)) {
        this.transcript = data().deepCopy(fields()[1].schema(), other.transcript);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.protein)) {
        this.protein = data().deepCopy(fields()[2].schema(), other.protein);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'genomic' field */
    public java.lang.String getGenomic() {
      return genomic;
    }
    
    /** Sets the value of the 'genomic' field */
    public org.ga4gh.models.HGVSAnnotation.Builder setGenomic(java.lang.String value) {
      validate(fields()[0], value);
      this.genomic = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'genomic' field has been set */
    public boolean hasGenomic() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'genomic' field */
    public org.ga4gh.models.HGVSAnnotation.Builder clearGenomic() {
      genomic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'transcript' field */
    public java.lang.String getTranscript() {
      return transcript;
    }
    
    /** Sets the value of the 'transcript' field */
    public org.ga4gh.models.HGVSAnnotation.Builder setTranscript(java.lang.String value) {
      validate(fields()[1], value);
      this.transcript = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'transcript' field has been set */
    public boolean hasTranscript() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'transcript' field */
    public org.ga4gh.models.HGVSAnnotation.Builder clearTranscript() {
      transcript = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'protein' field */
    public java.lang.String getProtein() {
      return protein;
    }
    
    /** Sets the value of the 'protein' field */
    public org.ga4gh.models.HGVSAnnotation.Builder setProtein(java.lang.String value) {
      validate(fields()[2], value);
      this.protein = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'protein' field has been set */
    public boolean hasProtein() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'protein' field */
    public org.ga4gh.models.HGVSAnnotation.Builder clearProtein() {
      protein = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public HGVSAnnotation build() {
      try {
        HGVSAnnotation record = new HGVSAnnotation();
        record.genomic = fieldSetFlags()[0] ? this.genomic : (java.lang.String) defaultValue(fields()[0]);
        record.transcript = fieldSetFlags()[1] ? this.transcript : (java.lang.String) defaultValue(fields()[1]);
        record.protein = fieldSetFlags()[2] ? this.protein : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
