/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** An individual (or subject) typically corresponds to an individual
human or other organism. */
@org.apache.avro.specific.AvroGenerated
public class Individual extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Individual\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"An individual (or subject) typically corresponds to an individual\\nhuman or other organism.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The individual UUID. This is globally unique.\"},{\"name\":\"groupIds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The IDs of the individual groups this individual belongs to.\",\"default\":[]},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the individual.\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A description of the individual.\",\"default\":null},{\"name\":\"created\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this individual was created in milliseconds from the epoch.\",\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this individual was last updated in milliseconds\\n  from the epoch.\",\"default\":null},{\"name\":\"species\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"OntologyTerm\",\"doc\":\"An ontology term describing an attribute. (e.g. the phenotype attribute\\n'polydactyly' from HPO)\",\"fields\":[{\"name\":\"ontologySource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The source of the onotology term.\\n  (e.g. `Ontology for Biomedical Investigation`)\"},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID defined by the external onotology source.\\n  (e.g. `http://purl.obolibrary.org/obo/OBI_0001271`)\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The name of the onotology term. (e.g. `RNA-seq assay`)\",\"default\":null}]}],\"doc\":\"The species of this individual. Using\\n  [NCBI taxonomy](http://www.ncbi.nlm.nih.gov/taxonomy) is recommended.\\n  For a representation of an NCBI Taxon ID as an OntologyTerm, see\\n  [NCBITaxon Ontology](http://www.obofoundry.org/wiki/index.php/NCBITaxon:Main_Page).\\n  For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for this is\\n  NCBITaxon:9606, which has the URI http://purl.obolibrary.org/obo/NCBITaxon_9606\",\"default\":null},{\"name\":\"sex\",\"type\":{\"type\":\"enum\",\"name\":\"GeneticSex\",\"doc\":\"* `FEMALE`: Genetic/chromosomal female\\n* `MALE`: Genetic/chromosomal male\\n* `OTHER`: sex information ambiguous, e.g. not clear XX/XY/ZZ...\\n* `MIXED_SAMPLE`: Multiple samples, e.g. pooled, environmental\\n* `NOT_APPLICABLE`: Used for prokaryotes, snails, etc. Not used for humans.\",\"symbols\":[\"FEMALE\",\"MALE\",\"OTHER\",\"MIXED_SAMPLE\",\"NOT_APPLICABLE\"]},\"doc\":\"The genetic sex of this individual. Use `null` when unknown.\",\"default\":null},{\"name\":\"developmentalStage\",\"type\":[\"null\",\"OntologyTerm\"],\"doc\":\"The developmental stage of this individual. Using Uberon is recommended.\\n  TODO: Add link to uberon\",\"default\":null},{\"name\":\"dateOfBirth\",\"type\":[\"null\",\"long\"],\"doc\":\"The date of birth of this individual in milliseconds from the epoch.\\n  This field may be approximate.\",\"default\":null},{\"name\":\"diseases\",\"type\":{\"type\":\"array\",\"items\":\"OntologyTerm\"},\"doc\":\"Diseases with which the individual has been diagnosed.\\n  TODO: Is this the right representation?\",\"default\":[]},{\"name\":\"phenotypes\",\"type\":{\"type\":\"array\",\"items\":\"OntologyTerm\"},\"doc\":\"Phenotypes for this individual.\\n  TODO: Is this the right representation?\",\"default\":[]},{\"name\":\"stagingSystem\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Disease area specific classification (e.g. classification of cancer samples\\n  such as Dukes)\",\"default\":null},{\"name\":\"clinicalTreatment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A description of the clinical treatment used for this individual.\",\"default\":null},{\"name\":\"strain\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The strain of this individual, for non-humans.\",\"default\":null},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"A map of additional individual information.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The individual UUID. This is globally unique. */
   private java.lang.String id;
  /** The IDs of the individual groups this individual belongs to. */
   private java.util.List<java.lang.String> groupIds;
  /** The name of the individual. */
   private java.lang.String name;
  /** A description of the individual. */
   private java.lang.String description;
  /** The time at which this individual was created in milliseconds from the epoch. */
   private java.lang.Long created;
  /** The time at which this individual was last updated in milliseconds
  from the epoch. */
   private java.lang.Long updated;
  /** The species of this individual. Using
  [NCBI taxonomy](http://www.ncbi.nlm.nih.gov/taxonomy) is recommended.
  For a representation of an NCBI Taxon ID as an OntologyTerm, see
  [NCBITaxon Ontology](http://www.obofoundry.org/wiki/index.php/NCBITaxon:Main_Page).
  For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for this is
  NCBITaxon:9606, which has the URI http://purl.obolibrary.org/obo/NCBITaxon_9606 */
   private org.ga4gh.models.OntologyTerm species;
  /** The genetic sex of this individual. Use `null` when unknown. */
   private org.ga4gh.models.GeneticSex sex;
  /** The developmental stage of this individual. Using Uberon is recommended.
  TODO: Add link to uberon */
   private org.ga4gh.models.OntologyTerm developmentalStage;
  /** The date of birth of this individual in milliseconds from the epoch.
  This field may be approximate. */
   private java.lang.Long dateOfBirth;
  /** Diseases with which the individual has been diagnosed.
  TODO: Is this the right representation? */
   private java.util.List<org.ga4gh.models.OntologyTerm> diseases;
  /** Phenotypes for this individual.
  TODO: Is this the right representation? */
   private java.util.List<org.ga4gh.models.OntologyTerm> phenotypes;
  /** Disease area specific classification (e.g. classification of cancer samples
  such as Dukes) */
   private java.lang.String stagingSystem;
  /** A description of the clinical treatment used for this individual. */
   private java.lang.String clinicalTreatment;
  /** The strain of this individual, for non-humans. */
   private java.lang.String strain;
  /** A map of additional individual information. */
   private java.util.Map<java.lang.String,java.util.List<java.lang.String>> info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Individual() {}

  /**
   * All-args constructor.
   */
  public Individual(java.lang.String id, java.util.List<java.lang.String> groupIds, java.lang.String name, java.lang.String description, java.lang.Long created, java.lang.Long updated, org.ga4gh.models.OntologyTerm species, org.ga4gh.models.GeneticSex sex, org.ga4gh.models.OntologyTerm developmentalStage, java.lang.Long dateOfBirth, java.util.List<org.ga4gh.models.OntologyTerm> diseases, java.util.List<org.ga4gh.models.OntologyTerm> phenotypes, java.lang.String stagingSystem, java.lang.String clinicalTreatment, java.lang.String strain, java.util.Map<java.lang.String,java.util.List<java.lang.String>> info) {
    this.id = id;
    this.groupIds = groupIds;
    this.name = name;
    this.description = description;
    this.created = created;
    this.updated = updated;
    this.species = species;
    this.sex = sex;
    this.developmentalStage = developmentalStage;
    this.dateOfBirth = dateOfBirth;
    this.diseases = diseases;
    this.phenotypes = phenotypes;
    this.stagingSystem = stagingSystem;
    this.clinicalTreatment = clinicalTreatment;
    this.strain = strain;
    this.info = info;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return groupIds;
    case 2: return name;
    case 3: return description;
    case 4: return created;
    case 5: return updated;
    case 6: return species;
    case 7: return sex;
    case 8: return developmentalStage;
    case 9: return dateOfBirth;
    case 10: return diseases;
    case 11: return phenotypes;
    case 12: return stagingSystem;
    case 13: return clinicalTreatment;
    case 14: return strain;
    case 15: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: groupIds = (java.util.List<java.lang.String>)value$; break;
    case 2: name = (java.lang.String)value$; break;
    case 3: description = (java.lang.String)value$; break;
    case 4: created = (java.lang.Long)value$; break;
    case 5: updated = (java.lang.Long)value$; break;
    case 6: species = (org.ga4gh.models.OntologyTerm)value$; break;
    case 7: sex = (org.ga4gh.models.GeneticSex)value$; break;
    case 8: developmentalStage = (org.ga4gh.models.OntologyTerm)value$; break;
    case 9: dateOfBirth = (java.lang.Long)value$; break;
    case 10: diseases = (java.util.List<org.ga4gh.models.OntologyTerm>)value$; break;
    case 11: phenotypes = (java.util.List<org.ga4gh.models.OntologyTerm>)value$; break;
    case 12: stagingSystem = (java.lang.String)value$; break;
    case 13: clinicalTreatment = (java.lang.String)value$; break;
    case 14: strain = (java.lang.String)value$; break;
    case 15: info = (java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The individual UUID. This is globally unique.   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The individual UUID. This is globally unique.   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'groupIds' field.
   * The IDs of the individual groups this individual belongs to.   */
  public java.util.List<java.lang.String> getGroupIds() {
    return groupIds;
  }

  /**
   * Sets the value of the 'groupIds' field.
   * The IDs of the individual groups this individual belongs to.   * @param value the value to set.
   */
  public void setGroupIds(java.util.List<java.lang.String> value) {
    this.groupIds = value;
  }

  /**
   * Gets the value of the 'name' field.
   * The name of the individual.   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The name of the individual.   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * A description of the individual.   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * A description of the individual.   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'created' field.
   * The time at which this individual was created in milliseconds from the epoch.   */
  public java.lang.Long getCreated() {
    return created;
  }

  /**
   * Sets the value of the 'created' field.
   * The time at which this individual was created in milliseconds from the epoch.   * @param value the value to set.
   */
  public void setCreated(java.lang.Long value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'updated' field.
   * The time at which this individual was last updated in milliseconds
  from the epoch.   */
  public java.lang.Long getUpdated() {
    return updated;
  }

  /**
   * Sets the value of the 'updated' field.
   * The time at which this individual was last updated in milliseconds
  from the epoch.   * @param value the value to set.
   */
  public void setUpdated(java.lang.Long value) {
    this.updated = value;
  }

  /**
   * Gets the value of the 'species' field.
   * The species of this individual. Using
  [NCBI taxonomy](http://www.ncbi.nlm.nih.gov/taxonomy) is recommended.
  For a representation of an NCBI Taxon ID as an OntologyTerm, see
  [NCBITaxon Ontology](http://www.obofoundry.org/wiki/index.php/NCBITaxon:Main_Page).
  For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for this is
  NCBITaxon:9606, which has the URI http://purl.obolibrary.org/obo/NCBITaxon_9606   */
  public org.ga4gh.models.OntologyTerm getSpecies() {
    return species;
  }

  /**
   * Sets the value of the 'species' field.
   * The species of this individual. Using
  [NCBI taxonomy](http://www.ncbi.nlm.nih.gov/taxonomy) is recommended.
  For a representation of an NCBI Taxon ID as an OntologyTerm, see
  [NCBITaxon Ontology](http://www.obofoundry.org/wiki/index.php/NCBITaxon:Main_Page).
  For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for this is
  NCBITaxon:9606, which has the URI http://purl.obolibrary.org/obo/NCBITaxon_9606   * @param value the value to set.
   */
  public void setSpecies(org.ga4gh.models.OntologyTerm value) {
    this.species = value;
  }

  /**
   * Gets the value of the 'sex' field.
   * The genetic sex of this individual. Use `null` when unknown.   */
  public org.ga4gh.models.GeneticSex getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * The genetic sex of this individual. Use `null` when unknown.   * @param value the value to set.
   */
  public void setSex(org.ga4gh.models.GeneticSex value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'developmentalStage' field.
   * The developmental stage of this individual. Using Uberon is recommended.
  TODO: Add link to uberon   */
  public org.ga4gh.models.OntologyTerm getDevelopmentalStage() {
    return developmentalStage;
  }

  /**
   * Sets the value of the 'developmentalStage' field.
   * The developmental stage of this individual. Using Uberon is recommended.
  TODO: Add link to uberon   * @param value the value to set.
   */
  public void setDevelopmentalStage(org.ga4gh.models.OntologyTerm value) {
    this.developmentalStage = value;
  }

  /**
   * Gets the value of the 'dateOfBirth' field.
   * The date of birth of this individual in milliseconds from the epoch.
  This field may be approximate.   */
  public java.lang.Long getDateOfBirth() {
    return dateOfBirth;
  }

  /**
   * Sets the value of the 'dateOfBirth' field.
   * The date of birth of this individual in milliseconds from the epoch.
  This field may be approximate.   * @param value the value to set.
   */
  public void setDateOfBirth(java.lang.Long value) {
    this.dateOfBirth = value;
  }

  /**
   * Gets the value of the 'diseases' field.
   * Diseases with which the individual has been diagnosed.
  TODO: Is this the right representation?   */
  public java.util.List<org.ga4gh.models.OntologyTerm> getDiseases() {
    return diseases;
  }

  /**
   * Sets the value of the 'diseases' field.
   * Diseases with which the individual has been diagnosed.
  TODO: Is this the right representation?   * @param value the value to set.
   */
  public void setDiseases(java.util.List<org.ga4gh.models.OntologyTerm> value) {
    this.diseases = value;
  }

  /**
   * Gets the value of the 'phenotypes' field.
   * Phenotypes for this individual.
  TODO: Is this the right representation?   */
  public java.util.List<org.ga4gh.models.OntologyTerm> getPhenotypes() {
    return phenotypes;
  }

  /**
   * Sets the value of the 'phenotypes' field.
   * Phenotypes for this individual.
  TODO: Is this the right representation?   * @param value the value to set.
   */
  public void setPhenotypes(java.util.List<org.ga4gh.models.OntologyTerm> value) {
    this.phenotypes = value;
  }

  /**
   * Gets the value of the 'stagingSystem' field.
   * Disease area specific classification (e.g. classification of cancer samples
  such as Dukes)   */
  public java.lang.String getStagingSystem() {
    return stagingSystem;
  }

  /**
   * Sets the value of the 'stagingSystem' field.
   * Disease area specific classification (e.g. classification of cancer samples
  such as Dukes)   * @param value the value to set.
   */
  public void setStagingSystem(java.lang.String value) {
    this.stagingSystem = value;
  }

  /**
   * Gets the value of the 'clinicalTreatment' field.
   * A description of the clinical treatment used for this individual.   */
  public java.lang.String getClinicalTreatment() {
    return clinicalTreatment;
  }

  /**
   * Sets the value of the 'clinicalTreatment' field.
   * A description of the clinical treatment used for this individual.   * @param value the value to set.
   */
  public void setClinicalTreatment(java.lang.String value) {
    this.clinicalTreatment = value;
  }

  /**
   * Gets the value of the 'strain' field.
   * The strain of this individual, for non-humans.   */
  public java.lang.String getStrain() {
    return strain;
  }

  /**
   * Sets the value of the 'strain' field.
   * The strain of this individual, for non-humans.   * @param value the value to set.
   */
  public void setStrain(java.lang.String value) {
    this.strain = value;
  }

  /**
   * Gets the value of the 'info' field.
   * A map of additional individual information.   */
  public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * A map of additional individual information.   * @param value the value to set.
   */
  public void setInfo(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
    this.info = value;
  }

  /** Creates a new Individual RecordBuilder */
  public static org.ga4gh.models.Individual.Builder newBuilder() {
    return new org.ga4gh.models.Individual.Builder();
  }
  
  /** Creates a new Individual RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.Individual.Builder newBuilder(org.ga4gh.models.Individual.Builder other) {
    return new org.ga4gh.models.Individual.Builder(other);
  }
  
  /** Creates a new Individual RecordBuilder by copying an existing Individual instance */
  public static org.ga4gh.models.Individual.Builder newBuilder(org.ga4gh.models.Individual other) {
    return new org.ga4gh.models.Individual.Builder(other);
  }
  
  /**
   * RecordBuilder for Individual instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Individual>
    implements org.apache.avro.data.RecordBuilder<Individual> {

    private java.lang.String id;
    private java.util.List<java.lang.String> groupIds;
    private java.lang.String name;
    private java.lang.String description;
    private java.lang.Long created;
    private java.lang.Long updated;
    private org.ga4gh.models.OntologyTerm species;
    private org.ga4gh.models.GeneticSex sex;
    private org.ga4gh.models.OntologyTerm developmentalStage;
    private java.lang.Long dateOfBirth;
    private java.util.List<org.ga4gh.models.OntologyTerm> diseases;
    private java.util.List<org.ga4gh.models.OntologyTerm> phenotypes;
    private java.lang.String stagingSystem;
    private java.lang.String clinicalTreatment;
    private java.lang.String strain;
    private java.util.Map<java.lang.String,java.util.List<java.lang.String>> info;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.Individual.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.Individual.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groupIds)) {
        this.groupIds = data().deepCopy(fields()[1].schema(), other.groupIds);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.created)) {
        this.created = data().deepCopy(fields()[4].schema(), other.created);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updated)) {
        this.updated = data().deepCopy(fields()[5].schema(), other.updated);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.species)) {
        this.species = data().deepCopy(fields()[6].schema(), other.species);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sex)) {
        this.sex = data().deepCopy(fields()[7].schema(), other.sex);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.developmentalStage)) {
        this.developmentalStage = data().deepCopy(fields()[8].schema(), other.developmentalStage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.dateOfBirth)) {
        this.dateOfBirth = data().deepCopy(fields()[9].schema(), other.dateOfBirth);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.diseases)) {
        this.diseases = data().deepCopy(fields()[10].schema(), other.diseases);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.phenotypes)) {
        this.phenotypes = data().deepCopy(fields()[11].schema(), other.phenotypes);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.stagingSystem)) {
        this.stagingSystem = data().deepCopy(fields()[12].schema(), other.stagingSystem);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.clinicalTreatment)) {
        this.clinicalTreatment = data().deepCopy(fields()[13].schema(), other.clinicalTreatment);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.strain)) {
        this.strain = data().deepCopy(fields()[14].schema(), other.strain);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.info)) {
        this.info = data().deepCopy(fields()[15].schema(), other.info);
        fieldSetFlags()[15] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Individual instance */
    private Builder(org.ga4gh.models.Individual other) {
            super(org.ga4gh.models.Individual.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groupIds)) {
        this.groupIds = data().deepCopy(fields()[1].schema(), other.groupIds);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.created)) {
        this.created = data().deepCopy(fields()[4].schema(), other.created);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updated)) {
        this.updated = data().deepCopy(fields()[5].schema(), other.updated);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.species)) {
        this.species = data().deepCopy(fields()[6].schema(), other.species);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sex)) {
        this.sex = data().deepCopy(fields()[7].schema(), other.sex);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.developmentalStage)) {
        this.developmentalStage = data().deepCopy(fields()[8].schema(), other.developmentalStage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.dateOfBirth)) {
        this.dateOfBirth = data().deepCopy(fields()[9].schema(), other.dateOfBirth);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.diseases)) {
        this.diseases = data().deepCopy(fields()[10].schema(), other.diseases);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.phenotypes)) {
        this.phenotypes = data().deepCopy(fields()[11].schema(), other.phenotypes);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.stagingSystem)) {
        this.stagingSystem = data().deepCopy(fields()[12].schema(), other.stagingSystem);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.clinicalTreatment)) {
        this.clinicalTreatment = data().deepCopy(fields()[13].schema(), other.clinicalTreatment);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.strain)) {
        this.strain = data().deepCopy(fields()[14].schema(), other.strain);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.info)) {
        this.info = data().deepCopy(fields()[15].schema(), other.info);
        fieldSetFlags()[15] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.models.Individual.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.models.Individual.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'groupIds' field */
    public java.util.List<java.lang.String> getGroupIds() {
      return groupIds;
    }
    
    /** Sets the value of the 'groupIds' field */
    public org.ga4gh.models.Individual.Builder setGroupIds(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.groupIds = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'groupIds' field has been set */
    public boolean hasGroupIds() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'groupIds' field */
    public org.ga4gh.models.Individual.Builder clearGroupIds() {
      groupIds = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ga4gh.models.Individual.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'name' field */
    public org.ga4gh.models.Individual.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ga4gh.models.Individual.Builder setDescription(java.lang.String value) {
      validate(fields()[3], value);
      this.description = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'description' field */
    public org.ga4gh.models.Individual.Builder clearDescription() {
      description = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'created' field */
    public java.lang.Long getCreated() {
      return created;
    }
    
    /** Sets the value of the 'created' field */
    public org.ga4gh.models.Individual.Builder setCreated(java.lang.Long value) {
      validate(fields()[4], value);
      this.created = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'created' field has been set */
    public boolean hasCreated() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'created' field */
    public org.ga4gh.models.Individual.Builder clearCreated() {
      created = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'updated' field */
    public java.lang.Long getUpdated() {
      return updated;
    }
    
    /** Sets the value of the 'updated' field */
    public org.ga4gh.models.Individual.Builder setUpdated(java.lang.Long value) {
      validate(fields()[5], value);
      this.updated = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'updated' field has been set */
    public boolean hasUpdated() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'updated' field */
    public org.ga4gh.models.Individual.Builder clearUpdated() {
      updated = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'species' field */
    public org.ga4gh.models.OntologyTerm getSpecies() {
      return species;
    }
    
    /** Sets the value of the 'species' field */
    public org.ga4gh.models.Individual.Builder setSpecies(org.ga4gh.models.OntologyTerm value) {
      validate(fields()[6], value);
      this.species = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'species' field has been set */
    public boolean hasSpecies() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'species' field */
    public org.ga4gh.models.Individual.Builder clearSpecies() {
      species = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'sex' field */
    public org.ga4gh.models.GeneticSex getSex() {
      return sex;
    }
    
    /** Sets the value of the 'sex' field */
    public org.ga4gh.models.Individual.Builder setSex(org.ga4gh.models.GeneticSex value) {
      validate(fields()[7], value);
      this.sex = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'sex' field has been set */
    public boolean hasSex() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'sex' field */
    public org.ga4gh.models.Individual.Builder clearSex() {
      sex = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'developmentalStage' field */
    public org.ga4gh.models.OntologyTerm getDevelopmentalStage() {
      return developmentalStage;
    }
    
    /** Sets the value of the 'developmentalStage' field */
    public org.ga4gh.models.Individual.Builder setDevelopmentalStage(org.ga4gh.models.OntologyTerm value) {
      validate(fields()[8], value);
      this.developmentalStage = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'developmentalStage' field has been set */
    public boolean hasDevelopmentalStage() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'developmentalStage' field */
    public org.ga4gh.models.Individual.Builder clearDevelopmentalStage() {
      developmentalStage = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'dateOfBirth' field */
    public java.lang.Long getDateOfBirth() {
      return dateOfBirth;
    }
    
    /** Sets the value of the 'dateOfBirth' field */
    public org.ga4gh.models.Individual.Builder setDateOfBirth(java.lang.Long value) {
      validate(fields()[9], value);
      this.dateOfBirth = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'dateOfBirth' field has been set */
    public boolean hasDateOfBirth() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'dateOfBirth' field */
    public org.ga4gh.models.Individual.Builder clearDateOfBirth() {
      dateOfBirth = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'diseases' field */
    public java.util.List<org.ga4gh.models.OntologyTerm> getDiseases() {
      return diseases;
    }
    
    /** Sets the value of the 'diseases' field */
    public org.ga4gh.models.Individual.Builder setDiseases(java.util.List<org.ga4gh.models.OntologyTerm> value) {
      validate(fields()[10], value);
      this.diseases = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'diseases' field has been set */
    public boolean hasDiseases() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'diseases' field */
    public org.ga4gh.models.Individual.Builder clearDiseases() {
      diseases = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'phenotypes' field */
    public java.util.List<org.ga4gh.models.OntologyTerm> getPhenotypes() {
      return phenotypes;
    }
    
    /** Sets the value of the 'phenotypes' field */
    public org.ga4gh.models.Individual.Builder setPhenotypes(java.util.List<org.ga4gh.models.OntologyTerm> value) {
      validate(fields()[11], value);
      this.phenotypes = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'phenotypes' field has been set */
    public boolean hasPhenotypes() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'phenotypes' field */
    public org.ga4gh.models.Individual.Builder clearPhenotypes() {
      phenotypes = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'stagingSystem' field */
    public java.lang.String getStagingSystem() {
      return stagingSystem;
    }
    
    /** Sets the value of the 'stagingSystem' field */
    public org.ga4gh.models.Individual.Builder setStagingSystem(java.lang.String value) {
      validate(fields()[12], value);
      this.stagingSystem = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'stagingSystem' field has been set */
    public boolean hasStagingSystem() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'stagingSystem' field */
    public org.ga4gh.models.Individual.Builder clearStagingSystem() {
      stagingSystem = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'clinicalTreatment' field */
    public java.lang.String getClinicalTreatment() {
      return clinicalTreatment;
    }
    
    /** Sets the value of the 'clinicalTreatment' field */
    public org.ga4gh.models.Individual.Builder setClinicalTreatment(java.lang.String value) {
      validate(fields()[13], value);
      this.clinicalTreatment = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'clinicalTreatment' field has been set */
    public boolean hasClinicalTreatment() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'clinicalTreatment' field */
    public org.ga4gh.models.Individual.Builder clearClinicalTreatment() {
      clinicalTreatment = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'strain' field */
    public java.lang.String getStrain() {
      return strain;
    }
    
    /** Sets the value of the 'strain' field */
    public org.ga4gh.models.Individual.Builder setStrain(java.lang.String value) {
      validate(fields()[14], value);
      this.strain = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'strain' field has been set */
    public boolean hasStrain() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'strain' field */
    public org.ga4gh.models.Individual.Builder clearStrain() {
      strain = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'info' field */
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getInfo() {
      return info;
    }
    
    /** Sets the value of the 'info' field */
    public org.ga4gh.models.Individual.Builder setInfo(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
      validate(fields()[15], value);
      this.info = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'info' field */
    public org.ga4gh.models.Individual.Builder clearInfo() {
      info = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public Individual build() {
      try {
        Individual record = new Individual();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.groupIds = fieldSetFlags()[1] ? this.groupIds : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.description = fieldSetFlags()[3] ? this.description : (java.lang.String) defaultValue(fields()[3]);
        record.created = fieldSetFlags()[4] ? this.created : (java.lang.Long) defaultValue(fields()[4]);
        record.updated = fieldSetFlags()[5] ? this.updated : (java.lang.Long) defaultValue(fields()[5]);
        record.species = fieldSetFlags()[6] ? this.species : (org.ga4gh.models.OntologyTerm) defaultValue(fields()[6]);
        record.sex = fieldSetFlags()[7] ? this.sex : (org.ga4gh.models.GeneticSex) defaultValue(fields()[7]);
        record.developmentalStage = fieldSetFlags()[8] ? this.developmentalStage : (org.ga4gh.models.OntologyTerm) defaultValue(fields()[8]);
        record.dateOfBirth = fieldSetFlags()[9] ? this.dateOfBirth : (java.lang.Long) defaultValue(fields()[9]);
        record.diseases = fieldSetFlags()[10] ? this.diseases : (java.util.List<org.ga4gh.models.OntologyTerm>) defaultValue(fields()[10]);
        record.phenotypes = fieldSetFlags()[11] ? this.phenotypes : (java.util.List<org.ga4gh.models.OntologyTerm>) defaultValue(fields()[11]);
        record.stagingSystem = fieldSetFlags()[12] ? this.stagingSystem : (java.lang.String) defaultValue(fields()[12]);
        record.clinicalTreatment = fieldSetFlags()[13] ? this.clinicalTreatment : (java.lang.String) defaultValue(fields()[13]);
        record.strain = fieldSetFlags()[14] ? this.strain : (java.lang.String) defaultValue(fields()[14]);
        record.info = fieldSetFlags()[15] ? this.info : (java.util.Map<java.lang.String,java.util.List<java.lang.String>>) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
