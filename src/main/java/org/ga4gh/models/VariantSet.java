/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.models;  
@SuppressWarnings("all")
/** A VariantSet is a collection of variants and variant calls intended to be analyzed together. */
@org.apache.avro.specific.AvroGenerated
public class VariantSet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantSet\",\"namespace\":\"org.ga4gh.models\",\"doc\":\"A VariantSet is a collection of variants and variant calls intended to be analyzed together.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The variant set ID.\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The variant set name.\",\"default\":null},{\"name\":\"datasetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID of the dataset this variant set belongs to.\"},{\"name\":\"referenceSetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The ID of the reference set that describes the sequences used by the variants in this set.\"},{\"name\":\"metadata\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"VariantSetMetadata\",\"doc\":\"Optional metadata associated with a variant set.\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The top-level key.\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The value field for simple metadata.\"},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User-provided ID field, not enforced by this API.\\n  Two or more pieces of structured metadata with identical\\n  id and key fields are considered equivalent.\\n  `FIXME: If it's not enforced, then why can't it be null?`\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The type of data.\"},{\"name\":\"number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The number of values that can be included in a field described by this\\n  metadata.\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A textual description of this metadata.\"},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"},\"doc\":\"Remaining structured metadata key-value pairs.\",\"default\":{}}]}},\"doc\":\"Optional metadata associated with this variant set.\\n  This array can be used to store information about the variant set, such as information found\\n  in VCF header fields, that isn't already available in first class fields such as \\\"name\\\".\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The variant set ID. */
   private java.lang.String id;
  /** The variant set name. */
   private java.lang.String name;
  /** The ID of the dataset this variant set belongs to. */
   private java.lang.String datasetId;
  /** The ID of the reference set that describes the sequences used by the variants in this set. */
   private java.lang.String referenceSetId;
  /** Optional metadata associated with this variant set.
  This array can be used to store information about the variant set, such as information found
  in VCF header fields, that isn't already available in first class fields such as "name". */
   private java.util.List<org.ga4gh.models.VariantSetMetadata> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantSet() {}

  /**
   * All-args constructor.
   */
  public VariantSet(java.lang.String id, java.lang.String name, java.lang.String datasetId, java.lang.String referenceSetId, java.util.List<org.ga4gh.models.VariantSetMetadata> metadata) {
    this.id = id;
    this.name = name;
    this.datasetId = datasetId;
    this.referenceSetId = referenceSetId;
    this.metadata = metadata;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return datasetId;
    case 3: return referenceSetId;
    case 4: return metadata;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: datasetId = (java.lang.String)value$; break;
    case 3: referenceSetId = (java.lang.String)value$; break;
    case 4: metadata = (java.util.List<org.ga4gh.models.VariantSetMetadata>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The variant set ID.   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The variant set ID.   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * The variant set name.   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The variant set name.   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'datasetId' field.
   * The ID of the dataset this variant set belongs to.   */
  public java.lang.String getDatasetId() {
    return datasetId;
  }

  /**
   * Sets the value of the 'datasetId' field.
   * The ID of the dataset this variant set belongs to.   * @param value the value to set.
   */
  public void setDatasetId(java.lang.String value) {
    this.datasetId = value;
  }

  /**
   * Gets the value of the 'referenceSetId' field.
   * The ID of the reference set that describes the sequences used by the variants in this set.   */
  public java.lang.String getReferenceSetId() {
    return referenceSetId;
  }

  /**
   * Sets the value of the 'referenceSetId' field.
   * The ID of the reference set that describes the sequences used by the variants in this set.   * @param value the value to set.
   */
  public void setReferenceSetId(java.lang.String value) {
    this.referenceSetId = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * Optional metadata associated with this variant set.
  This array can be used to store information about the variant set, such as information found
  in VCF header fields, that isn't already available in first class fields such as "name".   */
  public java.util.List<org.ga4gh.models.VariantSetMetadata> getMetadata() {
    return metadata;
  }

  /**
   * Sets the value of the 'metadata' field.
   * Optional metadata associated with this variant set.
  This array can be used to store information about the variant set, such as information found
  in VCF header fields, that isn't already available in first class fields such as "name".   * @param value the value to set.
   */
  public void setMetadata(java.util.List<org.ga4gh.models.VariantSetMetadata> value) {
    this.metadata = value;
  }

  /** Creates a new VariantSet RecordBuilder */
  public static org.ga4gh.models.VariantSet.Builder newBuilder() {
    return new org.ga4gh.models.VariantSet.Builder();
  }
  
  /** Creates a new VariantSet RecordBuilder by copying an existing Builder */
  public static org.ga4gh.models.VariantSet.Builder newBuilder(org.ga4gh.models.VariantSet.Builder other) {
    return new org.ga4gh.models.VariantSet.Builder(other);
  }
  
  /** Creates a new VariantSet RecordBuilder by copying an existing VariantSet instance */
  public static org.ga4gh.models.VariantSet.Builder newBuilder(org.ga4gh.models.VariantSet other) {
    return new org.ga4gh.models.VariantSet.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantSet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantSet>
    implements org.apache.avro.data.RecordBuilder<VariantSet> {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String datasetId;
    private java.lang.String referenceSetId;
    private java.util.List<org.ga4gh.models.VariantSetMetadata> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.models.VariantSet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.models.VariantSet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.datasetId)) {
        this.datasetId = data().deepCopy(fields()[2].schema(), other.datasetId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referenceSetId)) {
        this.referenceSetId = data().deepCopy(fields()[3].schema(), other.referenceSetId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.metadata)) {
        this.metadata = data().deepCopy(fields()[4].schema(), other.metadata);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantSet instance */
    private Builder(org.ga4gh.models.VariantSet other) {
            super(org.ga4gh.models.VariantSet.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.datasetId)) {
        this.datasetId = data().deepCopy(fields()[2].schema(), other.datasetId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referenceSetId)) {
        this.referenceSetId = data().deepCopy(fields()[3].schema(), other.referenceSetId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.metadata)) {
        this.metadata = data().deepCopy(fields()[4].schema(), other.metadata);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.models.VariantSet.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.models.VariantSet.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ga4gh.models.VariantSet.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public org.ga4gh.models.VariantSet.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'datasetId' field */
    public java.lang.String getDatasetId() {
      return datasetId;
    }
    
    /** Sets the value of the 'datasetId' field */
    public org.ga4gh.models.VariantSet.Builder setDatasetId(java.lang.String value) {
      validate(fields()[2], value);
      this.datasetId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'datasetId' field has been set */
    public boolean hasDatasetId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'datasetId' field */
    public org.ga4gh.models.VariantSet.Builder clearDatasetId() {
      datasetId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'referenceSetId' field */
    public java.lang.String getReferenceSetId() {
      return referenceSetId;
    }
    
    /** Sets the value of the 'referenceSetId' field */
    public org.ga4gh.models.VariantSet.Builder setReferenceSetId(java.lang.String value) {
      validate(fields()[3], value);
      this.referenceSetId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceSetId' field has been set */
    public boolean hasReferenceSetId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'referenceSetId' field */
    public org.ga4gh.models.VariantSet.Builder clearReferenceSetId() {
      referenceSetId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'metadata' field */
    public java.util.List<org.ga4gh.models.VariantSetMetadata> getMetadata() {
      return metadata;
    }
    
    /** Sets the value of the 'metadata' field */
    public org.ga4gh.models.VariantSet.Builder setMetadata(java.util.List<org.ga4gh.models.VariantSetMetadata> value) {
      validate(fields()[4], value);
      this.metadata = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'metadata' field has been set */
    public boolean hasMetadata() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'metadata' field */
    public org.ga4gh.models.VariantSet.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public VariantSet build() {
      try {
        VariantSet record = new VariantSet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.datasetId = fieldSetFlags()[2] ? this.datasetId : (java.lang.String) defaultValue(fields()[2]);
        record.referenceSetId = fieldSetFlags()[3] ? this.referenceSetId : (java.lang.String) defaultValue(fields()[3]);
        record.metadata = fieldSetFlags()[4] ? this.metadata : (java.util.List<org.ga4gh.models.VariantSetMetadata>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
