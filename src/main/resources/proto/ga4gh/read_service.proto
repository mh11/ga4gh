syntax = "proto3";

package org.ga4gh.protobuf;

import "proto/ga4gh/metadata.proto";
import "proto/ga4gh/reads.proto";

service ReadService {
  // TODO: Move datasets to a central location.

  // Gets a list of `Dataset` matching the search criteria.
  //
  // `POST /datasets/search` must accept a JSON version of
  // `SearchDatasetsRequest` as the post body and will return a JSON
  // version of `SearchDatasetsResponse`.
  rpc SearchDatasets(SearchDatasetsRequest) returns (SearchDatasetsResponse);

  // Gets a `Dataset` by ID.
  //
  // `GET /datasets/{dataset_id}` will return a JSON version of
  // `Dataset`.
  rpc GetDataset(GetDatasetRequest) returns (Dataset);

  // Gets a list of `ReadGroupSet` matching the search criteria.
  //
  // `POST /readgroupsets/search` must accept a JSON version of
  // `SearchReadGroupSetsRequest` as the post body and will return a JSON
  // version of `SearchReadGroupSetsResponse`.
  rpc SearchReadGroupSets(SearchReadGroupSetsRequest)
      returns (SearchReadGroupSetsResponse);

  // Gets a `ReadGroupSet` by ID.
  //
  // `GET /readgroupsets/{read_group_set_id}` will return a JSON version of
  // `ReadGroupSet`.
  rpc GetReadGroupSet(GetReadGroupSetRequest) returns (ReadGroupSet);

  // Gets a list of `ReadAlignment` matching the search criteria.
  //
  // `POST /reads/search` must accept a JSON version of `SearchReadsRequest` as
  // the post body and will return a JSON version of `SearchReadsResponse`.
  rpc SearchReads(SearchReadsRequest) returns (SearchReadsResponse);
}

// ****************  /datasets  *******************

// This request maps to the body of `POST /datasets/search` as JSON.
message SearchDatasetsRequest {
  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 1;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 2;
}

// This is the response from `POST /datasets/search` expressed as JSON.
message SearchDatasetsResponse {
  // The list of datasets.
  repeated Dataset datasets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// This request maps to the URL `GET /datasets/{dataset_id}`.
message GetDatasetRequest {
  // The ID of the `Dataset` to be retrieved.
  string dataset_id = 1;
}

// ******************  /readgroupsets  *********************/

// This request maps to the body of `POST /readgroupsets/search` as JSON.
message SearchReadGroupSetsRequest {
  // The dataset to search.
  string dataset_id = 1;

  // Only return read group sets with this name (case-sensitive, exact match).
  string name = 2;

  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 3;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 4;
}

// This is the response from `POST /readgroupsets/search` expressed as JSON.
message SearchReadGroupSetsResponse {
  // The list of matching read group sets.
  repeated ReadGroupSet read_group_sets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// This request maps to the URL `GET /readgroupsets/{read_group_set_id}`.
message GetReadGroupSetRequest {
  // The ID of the `ReadGroupSet` to be retrieved.
  string read_group_set_id = 1;
}

// ******************  /reads  *********************
// This request maps to the body of `POST /reads/search` as JSON.
//
// If a reference is specified, all queried `ReadGroup`s must be aligned
// to `ReferenceSet`s containing that same `Reference`. If no reference is
// specified, all `ReadGroup`s must be aligned to the same `ReferenceSet`.
message SearchReadsRequest {
  // The ReadGroups to search. At least one readGroupId must be specified.
  repeated string read_group_ids = 1;

  // The reference to query. Leaving blank returns results from all
  // references, including unmapped reads - this could be very large.
  string reference_id = 2;

  // The start position (0-based) of this query.
  // If a reference is specified, this defaults to 0.
  // Genomic positions are non-negative integers less than reference length.
  // Requests spanning the join of circular genomes are represented as
  // two requests one on each side of the join (position 0).
  int64 start = 3;

  // The end position (0-based, exclusive) of this query.
  // If a reference is specified, this defaults to the
  // reference's length.
  int64 end = 4;

  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 5;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 6;
}

// This is the response from `POST /reads/search` expressed as JSON.
message SearchReadsResponse {
  // The list of matching alignment messages, sorted by position.
  // Unmapped reads, which have no position, are returned last.
  repeated ReadAlignment alignments = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}
